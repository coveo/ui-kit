import {Component, h, State, Fragment, Prop} from '@stencil/core';
import {
  NotifyTrigger,
  NotifyTriggerState,
  buildNotifyTrigger,
} from '@coveo/headless';
import {
  BindStateToController,
  InitializableComponent,
  InitializeBindings,
} from '../../../utils/initialization-utils';
import {Hidden} from '../../common/hidden';
import {Bindings} from '../atomic-search-interface/atomic-search-interface';
import InfoIcon from '../../../images/info.svg';
import {AriaLiveRegion} from '../../../utils/accessibility-utils';
import {Heading} from '../../common/heading';

/**
 * The `atomic-notifications` component is responsible for displaying notifications generated by the Coveo Search API (see [Trigger](https://docs.coveo.com/en/1458)).
 *
 * @part notification - The wrapper around the notification.
 * @part icon - The icon of the notification.
 * @part text - The text of the notification.
 */
@Component({
  tag: 'atomic-notifications',
  styleUrl: 'atomic-notifications.pcss',
  shadow: true,
})
export class AtomicNotifyTrigger implements InitializableComponent {
  @InitializeBindings() public bindings!: Bindings;
  protected notifyTrigger!: NotifyTrigger;

  @BindStateToController('notifyTrigger')
  @State()
  private notifyTriggerState!: NotifyTriggerState;
  @State() public error!: Error;

  @AriaLiveRegion('notifications') ariaMessage!: string;

  /**
   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use above the notifications, from 1 to 6.
   */
  @Prop({reflect: true}) public headingLevel = 0;

  /**
   * Specifies an icon to display at the left-end of a notification.
   *
   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.
   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.
   * - Use a stringified SVG to display it directly
   */
  @Prop({reflect: true}) public icon?: string;

  public initialize() {
    this.notifyTrigger = buildNotifyTrigger(this.bindings.engine);
  }

  public renderNotifications(text: string) {
    return (
      <div
        part="notification"
        class="shadow-lg bg-background border border-neutral-dark rounded-md p-6 flex items-center"
      >
        <atomic-icon
          icon={this.icon ?? InfoIcon}
          part="icon"
          class="w-7 h-7 mr-6 text-neutral-dark"
          aria-hidden="true"
        />
        <span part="text" class="leading-5 text-base text-on-background">
          {text}
        </span>
      </div>
    );
  }

  public render() {
    if (!this.notifyTriggerState.notifications.length) {
      return <Hidden></Hidden>;
    }

    this.ariaMessage = this.notifyTriggerState.notifications[0];

    return (
      <Fragment>
        <Heading level={this.headingLevel ?? 0} class="accessibility-only">
          {this.bindings.i18n.t('notifications')}
        </Heading>
        {this.renderNotifications(this.notifyTriggerState.notifications[0])}
      </Fragment>
    );
  }
}
