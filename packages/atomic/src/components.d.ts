/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AutomaticFacet, CategoryFacetSortCriterion, FacetResultsMustMatch, FacetSortCriterion, FoldedResult, GeneratedAnswer, GeneratedAnswerCitation, GeneratedAnswerStyle, InlineLink, InteractiveCitation, InteractiveResult, LogLevel as LogLevel1, PlatformEnvironment as PlatformEnvironment2, RangeFacetRangeAlgorithm, RangeFacetSortCriterion, Result, ResultTemplate, ResultTemplateCondition, SearchEngine, SearchStatus } from "@coveo/headless";
import { CommerceEngine, LogLevel, PlatformEnvironment } from "@coveo/headless/commerce";
import { i18n } from "i18next";
import { CommerceInitializationOptions } from "./components/commerce/atomic-commerce-interface/atomic-commerce-interface";
import { StandaloneSearchBoxData } from "./utils/local-storage-utils";
import { RedirectionPayload } from "./components/search/atomic-search-box/redirection-payload";
import { AnyBindings } from "./components/common/interface/bindings";
import { DateFilter, DateFilterState, NumericFilter, NumericFilterState, RelativeDateUnit } from "./components/common/types";
import { NumberInputType } from "./components/common/facets/facet-number-input/number-input-type";
import { ItemDisplayBasicLayout, ItemDisplayDensity, ItemDisplayImageSize, ItemDisplayLayout, ItemTarget } from "./components/common/layout/display-options";
import { ItemRenderingFunction } from "./components/common/item-list/item-list-common";
import { InsightEngine, InsightFacetSortCriterion, InsightFoldedResult, InsightGeneratedAnswerStyle, InsightInteractiveResult, InsightLogLevel, InsightRangeFacetRangeAlgorithm, InsightRangeFacetSortCriterion, InsightResult, InsightResultTemplate, InsightResultTemplateCondition, PlatformEnvironmentInsight } from "./components/insight";
import { i18nCompatibilityVersion } from "./components/common/interface/i18n";
import { InsightInitializationOptions } from "./components/insight/atomic-insight-interface/atomic-insight-interface";
import { AtomicInsightStore } from "./components/insight/atomic-insight-interface/store";
import { InsightResultActionClickedEvent } from "./components/insight/atomic-insight-result-action/atomic-insight-result-action";
import { Section } from "./components/common/atomic-layout-section/sections";
import { PlatformEnvironment as PlatformEnvironment1, RecommendationEngine } from "@coveo/headless/recommendation";
import { RecsInteractiveResult, RecsLogLevel, RecsResult, RecsResultTemplate, RecsResultTemplateCondition } from "./components/recommendations";
import { i18nCompatibilityVersion as i18nCompatibilityVersion1 } from "./components";
import { RecsInitializationOptions } from "./components/recommendations/atomic-recs-interface/atomic-recs-interface";
import { AtomicRecsStore } from "./components/recommendations/atomic-recs-interface/store";
import { Bindings } from "./components/search/atomic-search-interface/atomic-search-interface";
import { AtomicCommonStore, AtomicCommonStoreData } from "./components/common/interface/store";
import { AriaLabelGenerator } from "./components/search/search-box-suggestions/atomic-search-box-instant-results/atomic-search-box-instant-results";
import { InitializationOptions } from "./components/search/atomic-search-interface/atomic-search-interface";
export { AutomaticFacet, CategoryFacetSortCriterion, FacetResultsMustMatch, FacetSortCriterion, FoldedResult, GeneratedAnswer, GeneratedAnswerCitation, GeneratedAnswerStyle, InlineLink, InteractiveCitation, InteractiveResult, LogLevel as LogLevel1, PlatformEnvironment as PlatformEnvironment2, RangeFacetRangeAlgorithm, RangeFacetSortCriterion, Result, ResultTemplate, ResultTemplateCondition, SearchEngine, SearchStatus } from "@coveo/headless";
export { CommerceEngine, LogLevel, PlatformEnvironment } from "@coveo/headless/commerce";
export { i18n } from "i18next";
export { CommerceInitializationOptions } from "./components/commerce/atomic-commerce-interface/atomic-commerce-interface";
export { StandaloneSearchBoxData } from "./utils/local-storage-utils";
export { RedirectionPayload } from "./components/search/atomic-search-box/redirection-payload";
export { AnyBindings } from "./components/common/interface/bindings";
export { DateFilter, DateFilterState, NumericFilter, NumericFilterState, RelativeDateUnit } from "./components/common/types";
export { NumberInputType } from "./components/common/facets/facet-number-input/number-input-type";
export { ItemDisplayBasicLayout, ItemDisplayDensity, ItemDisplayImageSize, ItemDisplayLayout, ItemTarget } from "./components/common/layout/display-options";
export { ItemRenderingFunction } from "./components/common/item-list/item-list-common";
export { InsightEngine, InsightFacetSortCriterion, InsightFoldedResult, InsightGeneratedAnswerStyle, InsightInteractiveResult, InsightLogLevel, InsightRangeFacetRangeAlgorithm, InsightRangeFacetSortCriterion, InsightResult, InsightResultTemplate, InsightResultTemplateCondition, PlatformEnvironmentInsight } from "./components/insight";
export { i18nCompatibilityVersion } from "./components/common/interface/i18n";
export { InsightInitializationOptions } from "./components/insight/atomic-insight-interface/atomic-insight-interface";
export { AtomicInsightStore } from "./components/insight/atomic-insight-interface/store";
export { InsightResultActionClickedEvent } from "./components/insight/atomic-insight-result-action/atomic-insight-result-action";
export { Section } from "./components/common/atomic-layout-section/sections";
export { PlatformEnvironment as PlatformEnvironment1, RecommendationEngine } from "@coveo/headless/recommendation";
export { RecsInteractiveResult, RecsLogLevel, RecsResult, RecsResultTemplate, RecsResultTemplateCondition } from "./components/recommendations";
export { i18nCompatibilityVersion as i18nCompatibilityVersion1 } from "./components";
export { RecsInitializationOptions } from "./components/recommendations/atomic-recs-interface/atomic-recs-interface";
export { AtomicRecsStore } from "./components/recommendations/atomic-recs-interface/store";
export { Bindings } from "./components/search/atomic-search-interface/atomic-search-interface";
export { AtomicCommonStore, AtomicCommonStoreData } from "./components/common/interface/store";
export { AriaLabelGenerator } from "./components/search/search-box-suggestions/atomic-search-box-instant-results/atomic-search-box-instant-results";
export { InitializationOptions } from "./components/search/atomic-search-interface/atomic-search-interface";
export namespace Components {
    /**
     * The `atomic-aria-live` component notifies screen readers of changes in the search interface.
     */
    interface AtomicAriaLive {
        "registerRegion": (region: string, assertive: boolean) => Promise<void>;
        "updateMessage": (region: string, message: string, assertive: boolean) => Promise<void>;
    }
    /**
     * An automatic facet is a special type of facet generated by the automatic facets feature.
     * Unlike regular facets, which need to be explicitly defined and requested in the query,
     * automatic facets are dynamically generated by the index in response to the query.
     * **Note:** This component should never be used on its own. It is used internally by the `atomic-automatic-facet-generator`
     * component to automatically render updated facets. However, you can use the shadow parts to style the automatically generated facets.
     * To learn more about the automatic facet generator feature, see: [About the Facet Generator](https://docs.coveo.com/en/n9sd0159/).
     */
    interface AtomicAutomaticFacet {
        "facet": AutomaticFacet;
        "facetId": string;
        "field": string;
        "isCollapsed": boolean;
        "searchStatus": SearchStatus;
    }
    /**
     * The `atomic-automatic-facet-generator` is a component that renders the facets from
     * the automatic facets feature. Unlike regular facets, which need to be explicitly defined
     * and requested in the query, automatic facets are dynamically generated by the index
     * in response to the search query.
     * **Note:** This component renders one or more [automatic facets](https://docs.coveo.com/en/atomic/latest/reference/components/atomic-automatic-facet/) based on the `desiredCount` property.
     * To learn more about the automatic facet generator feature, see: [About the Facet Generator](https://docs.coveo.com/en/n9sd0159/).
     */
    interface AtomicAutomaticFacetGenerator {
        /**
          * The desired count of automatic facets.  Minimum: `1` Maximum: `20`
          * @defaultValue `5`
         */
        "desiredCount": number;
        /**
          * The desired number of automatically generated facet values.  Minimum: `1`
          * @defaultValue `8`
         */
        "numberOfValues": number;
        "updateCollapseFacetsDependingOnFacetsVisibility": (collapseAfter: number, numberOfVisibleFacets: number) => Promise<void>;
    }
    /**
     * The `atomic-breadbox` component creates breadcrumbs that display a summary of the currently active facet values.
     */
    interface AtomicBreadbox {
        /**
          * This prop allows you to control the display depth of the path by specifying the number of parent or ancestor breadcrumbs links relative to the currently selected value.  If the path size is equal to or less than the pathLimit, all values in the path will be displayed without truncation.  If the path size exceeds the pathLimit, it will truncate the path by replacing the middle values with ellipses ('...').  Minimum: `1`
          * @defaultValue `3`
         */
        "pathLimit": number;
    }
    /**
     * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., number of occurrences).
     * An `atomic-category-facet` displays a facet of values in a browsable, hierarchical fashion.
     */
    interface AtomicCategoryFacet {
        /**
          * The base path shared by all values for the facet.  Specify the property as an array using a JSON string representation: ```html  <atomic-category-facet base-path='["first value", "second value"]' ></atomic-category-facet> ```
         */
        "basePath": string[] | string;
        /**
          * The character that separates values of a multi-value field.  *Note:* If you use the [example formatting](https://docs.coveo.com/en/atomic/latest/reference/components/atomic-category-facet/#usage-notes) for the associated multi-value field, you must set this value to `|` or the facet won't display properly.
         */
        "delimitingCharacter": string;
        /**
          * The required facets and values for this facet to be displayed. Examples: ```html <atomic-facet facet-id="abc" field="objecttype" ...></atomic-facet>  <!-- To show the facet when any value is selected in the facet with id "abc": --> <atomic-category-facet   depends-on-abc   ... ></atomic-category-facet>  <!-- To show the facet when value "doc" is selected in the facet with id "abc": --> <atomic-category-facet   depends-on-abc="doc"   ... ></atomic-category-facet> ```
         */
        "dependsOn": Record<string, string>;
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Whether to use basePath as a filter for the results.
         */
        "filterByBasePath": boolean;
        /**
          * Whether to exclude the parents of folded results when estimating the result count for each facet value.
         */
        "filterFacetCount": boolean;
        /**
          * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.
         */
        "headingLevel": number;
        /**
          * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values. Note: A high injectionDepth may negatively impact the facet request performance. Minimum: `0` Default: `1000`
         */
        "injectionDepth": number;
        /**
          * Specifies whether the facet is collapsed. When the facet is the child of an `atomic-facet-manager` component, the facet manager controls this property.
         */
        "isCollapsed": boolean;
        /**
          * The non-localized label for the facet. Used in the `atomic-breadbox` component through the bindings store.
         */
        "label": string;
        /**
          * The number of values to request for this facet. Also determines the number of additional values to request each time more values are shown.
         */
        "numberOfValues": number;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are 'alphanumeric' and 'occurrences'. For this criterion to apply to the top-layer facet values, disable [facet value ordering](https://docs.coveo.com/en/l1qf4156/#facet-value-ordering) in your Dynamic Navigation Experience configuration.
         */
        "sortCriteria": CategoryFacetSortCriterion;
        /**
          * Whether this facet should contain a search box.
         */
        "withSearch": boolean;
    }
    interface AtomicCitation {
        /**
          * The citation item information.
         */
        "citation": GeneratedAnswerCitation;
        /**
          * The citation index.
         */
        "index": number;
        /**
          * An `InteractiveCitation` controller instance. It is used when the user interacts with the citation by selecting or hovering over it.
         */
        "interactiveCitation": InteractiveCitation;
        /**
          * Callback function invoked when the user stops hovering over a citation. `citationHoverTimeMs` is the amount of time over which the citation has been hovered.
         */
        "sendHoverEndEvent": (citationHoverTimeMs: number) => void;
    }
    /**
     * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., number of occurrences).
     * An `atomic-color-facet` displays a facet of the results for the current query as colors.
     */
    interface AtomicColorFacet {
        /**
          * Specifies an explicit list of `allowedValues` in the Search API request. This list is in the form of a JSON string.  If you specify a list of values for this option, the facet only uses these values (if they are available in the current result set).  Example:  The following facet only uses the `Contact`, `Account`, and `File` values of the `objecttype` field. Even if the current result set contains other `objecttype` values, such as `Message` or `Product`, the facet does not use them.  ```html <atomic-color-facet field="objecttype" allowed-values='["Contact","Account","File"]'></atomic-color-facet> ```  The maximum amount of allowed values is 25.  The default value is `undefined`, and the facet uses all available values for its `field` in the current result set.
         */
        "allowedValues": string[] | string;
        /**
          * Identifies the facet values that must appear at the top, in this order. This parameter can be used in conjunction with the `sortCriteria` parameter.  Facet values not part of the `customSort` list will be sorted according to the `sortCriteria`.  Example:  The following facet will sort the `Contact`, `Account`, and `File` values at the top of the list for the `objecttype` field.  If there are more than these 3 values available, the rest of the list will be sorted using `occurrences`.  ```html <atomic-color-facet field="objecttype" custom-sort='["Contact","Account","File"]' sort-criteria='occurrences'></atomic-color-facet> ``` The maximum amount of custom sort values is 25.  The default value is `undefined`, and the facet values will be sorted using only the `sortCriteria`.
         */
        "customSort": string[] | string;
        /**
          * The required facets and values for this facet to be displayed. Examples: ```html <atomic-facet facet-id="abc" field="objecttype" ...></atomic-facet>  <!-- To show the facet when any value is selected in the facet with id "abc": --> <atomic-color-facet   depends-on-abc   ... ></atomic-color-facet>  <!-- To show the facet when value "doc" is selected in the facet with id "abc": --> <atomic-color-facet   depends-on-abc="doc"   ... ></atomic-color-facet> ```
         */
        "dependsOn": Record<string, string>;
        /**
          * Whether to display the facet values as checkboxes (multiple selection) or boxes (multiple selection). Possible values are 'checkbox', and 'box'.
         */
        "displayValuesAs": 'checkbox' | 'box';
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Whether to exclude the parents of folded results when estimating the result count for each facet value.
         */
        "filterFacetCount": boolean;
        /**
          * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.
         */
        "headingLevel": number;
        /**
          * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values. Note: A high injectionDepth may negatively impact the facet request performance. Minimum: `0` Default: `1000`
         */
        "injectionDepth": number;
        /**
          * Specifies whether the facet is collapsed. When the facet is the child of an `atomic-facet-manager` component, the facet manager controls this property.
         */
        "isCollapsed": boolean;
        /**
          * The non-localized label for the facet. Used in the `atomic-breadbox` component through the bindings store.
         */
        "label": string;
        /**
          * The number of values to request for this facet. Also determines the number of additional values to request each time more values are shown.
         */
        "numberOfValues": number;
        /**
          * Specifies how a result must match the selected facet values. Allowed values: - `atLeastOneValue`: A result will match if at least one of the corresponding facet values is selected. - `allValues`: A result will match if all corresponding facet values are selected.
         */
        "resultsMustMatch": FacetResultsMustMatch;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are 'score', 'alphanumeric', 'occurrences', and 'automatic'.
         */
        "sortCriteria": FacetSortCriterion;
        /**
          * Whether this facet should contain a search box.
         */
        "withSearch": boolean;
    }
    interface AtomicCommerceInterface {
        /**
          * The value to set the [nonce](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce) attribute to on inline script and style elements generated by this interface and its child components. If your application is served with a Content Security Policy (CSP) that doesn't include the `script-src: 'unsafe-inline'` or `style-src: 'unsafe-inline'` directives, you should ensure that your application server generates a new nonce on every page load and uses the generated value to set this prop and serve the corresponding CSP response headers (i.e., script-src 'nonce-<YOUR_GENERATED_NONCE>' and style-src 'nonce-<YOUR_GENERATED_NONCE>'). Otherwise you may see console errors such as  - Refused to execute inline script because it violates the following Content Security Policy directive: [...]  - Refused to apply inline style because it violates the following Content Security Policy directive: [...].
          * @example : ```html <script nonce="<YOUR_GENERATED_NONCE>"> import {setNonce} from '@coveo/atomic'; setNonce('<YOUR_GENERATED_NONCE>'); </script> ```
         */
        "CspNonce"?: string;
        /**
          * Whether analytics should be enabled.
         */
        "analytics": boolean;
        /**
          * The commerce interface headless engine.
         */
        "engine"?: CommerceEngine;
        /**
          * Executes the first search after initializing connection to the headless search engine.
         */
        "executeFirstSearch": () => Promise<void>;
        /**
          * Returns the unique, organization-specific endpoint(s).
          * @param organizationId
          * @param env
         */
        "getOrganizationEndpoints": (organizationId: string, env?: PlatformEnvironment) => Promise<{ platform: string; analytics: string; search: string; admin: string; }>;
        /**
          * the commerce interface i18next instance.
         */
        "i18n": i18n;
        /**
          * The icon assets path. By default, this will be a relative URL pointing to `./assets`.  Example: "/mypublicpath/icons"
         */
        "iconAssetsPath": string;
        /**
          * Initializes the connection with the headless search engine using options for accessToken (required), organizationId (required), renewAccessToken, organizationEndpoints (recommended), and platformUrl (deprecated).
         */
        "initialize": (options: CommerceInitializationOptions) => Promise<void>;
        /**
          * Initializes the connection with an already preconfigured [headless search engine](https://docs.coveo.com/en/headless/latest/reference/search/), as opposed to the `initialize` method, which will internally create a new search engine instance. This bypasses the properties set on the component, such as analytics, searchHub, pipeline, language, timezone & logLevel.
         */
        "initializeWithEngine": (engine: CommerceEngine) => Promise<void>;
        /**
          * the commerce interface language.
         */
        "language": string;
        /**
          * The language assets path. By default, this will be a relative URL pointing to `./lang`.  Example: "/mypublicpath/languages"
         */
        "languageAssetsPath": string;
        /**
          * The severity level of the messages to log in the console.
         */
        "logLevel"?: LogLevel;
        /**
          * Whether the state should be reflected in the URL parameters.
         */
        "reflectStateInUrl": boolean;
        /**
          * The CSS selector for the container where the interface will scroll back to.
         */
        "scrollContainer": string;
        /**
          * The type of the interface. - 'search': Indicates that the interface is used for Search. - 'product-listing': Indicates that the interface is used for Product listing.
         */
        "type": | 'search'
    | 'product-listing';
    }
    /**
     * The `atomic-pager` provides buttons that allow the end user to navigate through the different product pages.
     */
    interface AtomicCommercePager {
        /**
          * The SVG icon to use to display the Next button.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly.
         */
        "nextButtonIcon": string;
        /**
          * Specifies how many page buttons to display in the pager.
         */
        "numberOfPages": number;
        /**
          * The SVG icon to use to display the Previous button.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly.
         */
        "previousButtonIcon": string;
    }
    interface AtomicCommerceResultList {
        /**
          * The spacing of various elements in the result list, including the gap between results, the gap between parts of a result, and the font sizes of different parts in a result.
         */
        "density": 'normal' | 'compact';
        /**
          * The desired layout to use when displaying results. Layouts affect how many results to display per row and how visually distinct they are from each other.
         */
        "display": 'grid' | 'list';
        /**
          * The expected size of the image displayed in the results.
         */
        "imageSize": number;
    }
    /**
     * The `atomic-commerce-search-box` component creates a search box with built-in support for suggestions.
     */
    interface AtomicCommerceSearchBox {
        /**
          * Whether to clear all active query filters when the end user submits a new query from the search box. Setting this option to "false" is not recommended & can lead to an increasing number of queries returning no results.
         */
        "clearFilters": boolean;
        /**
          * Whether to prevent the user from triggering searches and query suggestions from the component. Perfect for use cases where you need to disable the search conditionally. For the specific case when you need to disable the search based on the length of the query, refer to {@link minimumQueryLength}.
         */
        "disableSearch": boolean;
        /**
          * Whether to interpret advanced [Coveo Cloud query syntax](https://docs.coveo.com/en/1814/) in the query. You should only enable query syntax in the search box if you have good reasons to do so, as it requires end users to be familiar with Coveo Cloud query syntax, otherwise they will likely be surprised by the search box behaviour.  When the `redirection-url` property is set and redirects to a page with more `atomic-commerce-search-box` components, all `atomic-commerce-search-box` components need to have the same `enable-query-syntax` value.
         */
        "enableQuerySyntax": boolean;
        /**
          * The minimum query length required to enable search. For example, to disable the search for empty queries, set this to `1`.
         */
        "minimumQueryLength": number;
        /**
          * The amount of queries displayed when the user interacts with the search box. By default, a mix of query suggestions and recent queries will be shown. You can configure those settings using the following components as children:  - atomic-commerce-search-box-query-suggestions  - atomic-commerce-search-box-recent-queries
         */
        "numberOfQueries": number;
        /**
          * Defining this option makes the search box standalone (see [Use a Standalone Search Box](https://docs.coveo.com/en/atomic/latest/usage/ssb/)).  This option defines the default URL the user should be redirected to, when a query is submitted. If a query pipeline redirect is triggered, it will redirect to that URL instead (see [query pipeline triggers](https://docs.coveo.com/en/1458)).
         */
        "redirectionUrl"?: string;
        /**
          * The delay for suggestion queries on input, in milliseconds.  The suggestion request will be delayed until the end user stops typing for at least the specified amount of time.  This delay is used to avoid sending too many requests to the Coveo Platform when the user is typing, as well as reducing potential input lag on low end devices. A higher delay will reduce input lag, at the cost of suggestions freshness.
         */
        "suggestionDelay": number;
        /**
          * The timeout for suggestion queries, in milliseconds. If a suggestion query times out, the suggestions from that particular query won't be shown.
         */
        "suggestionTimeout": number;
    }
    /**
     * The `atomic-component-error` is used by other components to return errors. This doesn't require any configuration.
     */
    interface AtomicComponentError {
        "element": HTMLElement;
        "error": Error;
    }
    /**
     * The `atomic-did-you-mean` component is responsible for handling query corrections. When a query returns no result but finds a possible query correction, the component either suggests the correction or automatically triggers a new query with the suggested term.
     */
    interface AtomicDidYouMean {
        /**
          * Whether to automatically apply corrections for queries that would otherwise return no results. When `automaticallyCorrectQuery` is `true`, the component automatically triggers a new query using the suggested term. When `automaticallyCorrectQuery` is `false`, the component returns the suggested term without triggering a new query.  The default value is `true`.
         */
        "automaticallyCorrectQuery": boolean;
        /**
          * Define which query correction system to use  `legacy`: Query correction is powered by the legacy index system. This system relies on an algorithm using solely the index content to compute the suggested terms. `next`: Query correction is powered by a machine learning system, requiring a valid query suggestion model configured in your Coveo environment to function properly. This system relies on machine learning algorithms to compute the suggested terms.  Default value is `legacy`. In the next major version of Atomic, the default value will be `next`.
         */
        "queryCorrectionMode": 'legacy' | 'next';
    }
    /**
     * The `atomic-external` component allows components defined outside of the `atomic-search-interface` to initialize.
     */
    interface AtomicExternal {
        /**
          * The CSS selector that identifies the `atomic-search-interface` component with which to initialize the external components.
         */
        "selector": string;
    }
    /**
     * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., number of occurrences).
     * An `atomic-facet` displays a facet of the results for the current query.
     */
    interface AtomicFacet {
        /**
          * Specifies an explicit list of `allowedValues` in the Search API request, as a JSON string representation.  If you specify a list of values for this option, the facet uses only these values (if they are available in the current result set).  Example:  The following facet only uses the `Contact`, `Account`, and `File` values of the `objecttype` field. Even if the current result set contains other `objecttype` values, such as `Message`, or `Product`, the facet does not use those other values.  ```html <atomic-facet field="objecttype" allowed-values='["Contact","Account","File"]'></atomic-facet> ```  The maximum amount of allowed values is 25.  Default value is `undefined`, and the facet uses all available values for its `field` in the current result set.
         */
        "allowedValues": string[] | string;
        /**
          * Identifies the facet values that must appear at the top, in this order. This parameter can be used in conjunction with the `sortCriteria` parameter.  Facet values not part of the `customSort` list will be sorted according to the `sortCriteria`.  Example:  The following facet will sort the `Contact`, `Account`, and `File` values at the top of the list for the `objecttype` field.  If there are more than these 3 values available, the rest of the list will be sorted using `occurrences`.  ```html <atomic-facet field="objecttype" custom-sort='["Contact","Account","File"]' sort-criteria='occurrences'></atomic-facet> ``` The maximum amount of custom sort values is 25.  The default value is `undefined`, and the facet values will be sorted using only the `sortCriteria`.
         */
        "customSort": string[] | string;
        /**
          * The required facets and values for this facet to be displayed. Examples: ```html <atomic-facet facet-id="abc" field="objecttype" ...></atomic-facet>  <!-- To show the facet when any value is selected in the facet with id "abc": --> <atomic-facet   depends-on-abc   ... ></atomic-facet>  <!-- To show the facet when value "doc" is selected in the facet with id "abc": --> <atomic-facet   depends-on-abc="doc"   ... ></atomic-facet> ```
         */
        "dependsOn": Record<string, string>;
        /**
          * Whether to display the facet values as checkboxes (multiple selection), links (single selection) or boxes (multiple selection). Possible values are 'checkbox', 'link', and 'box'.
         */
        "displayValuesAs": 'checkbox' | 'link' | 'box';
        /**
          * Whether to allow excluding values from the facet.
         */
        "enableExclusion": boolean;
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Whether to exclude the parents of folded results when estimating the result count for each facet value.
         */
        "filterFacetCount": boolean;
        /**
          * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.
         */
        "headingLevel": number;
        /**
          * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values. Note: A high injectionDepth may negatively impact the facet request performance. Minimum: `0` Default: `1000`
         */
        "injectionDepth": number;
        /**
          * Specifies whether the facet is collapsed. When the facet is the child of an `atomic-facet-manager` component, the facet manager controls this property.
         */
        "isCollapsed": boolean;
        /**
          * The non-localized label for the facet. Used in the `atomic-breadbox` component through the bindings store.
         */
        "label": string;
        /**
          * The number of values to request for this facet. Also determines the number of additional values to request each time more values are shown.
         */
        "numberOfValues": number;
        /**
          * Specifies how a result must match the selected facet values. Allowed values: - `atLeastOneValue`: A result will match if at least one of the corresponding facet values is selected. - `allValues`: A result will match if all corresponding facet values are selected.
         */
        "resultsMustMatch": FacetResultsMustMatch;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are 'score', 'alphanumeric', 'alphanumericDescending', 'occurrences', and 'automatic'.
         */
        "sortCriteria": FacetSortCriterion;
        /**
          * Whether this facet should contain a search box.
         */
        "withSearch": boolean;
    }
    /**
     * Internal component made to be integrated in a TimeframeFacet.
     */
    interface AtomicFacetDateInput {
        "bindings": AnyBindings;
        "filter": DateFilter;
        "filterState": DateFilterState;
        "label": string;
        "max"?: string;
        "min"?: string;
    }
    /**
     * The `atomic-facet-manager` helps reorder facets and their values to match the most recent search response with the most relevant results. A facet component is slotted within an `atomic-facet-manager` to leverage this functionality.
     */
    interface AtomicFacetManager {
        /**
          * The number of expanded facets inside the manager. Remaining facets are automatically collapsed.  Using the value `0` collapses all facets. Using the value `-1` disables the feature and keeps all facets expanded. Useful when you want to set the collapse state for each facet individually.
         */
        "collapseFacetsAfter": number;
    }
    /**
     * Internal component made to be integrated in a NumericFacet.
     */
    interface AtomicFacetNumberInput {
        "bindings": AnyBindings;
        "filter": NumericFilter;
        "filterState": NumericFilterState;
        "label": string;
        "type": NumberInputType;
    }
    /**
     * The `atomic-field-condition` component takes a list of conditions that, if fulfilled, apply the template in which it's defined.
     * The condition properties can be based on any top-level result property of the `result` object, not restricted to fields (e.g., `isRecommendation`).
     * @MapProp name: mustMatch;attr: must-match;docs: The field and values that define which result items the condition must be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is `lithiummessage` or `YouTubePlaylist`: `must-match-filetype="lithiummessage,YouTubePlaylist"`;type: Record<string, string[]> ;default: {}
     * @MapProp name: mustNotMatch;attr: must-not-match;docs: The field and values that define which result items the condition must not be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is not `lithiummessage`: `must-not-match-filetype="lithiummessage";type: Record<string, string[]> ;default: {}
     */
    interface AtomicFieldCondition {
        /**
          * Verifies whether the specified fields are defined.
         */
        "ifDefined"?: string;
        /**
          * Verifies whether the specified fields are not defined.
         */
        "ifNotDefined"?: string;
    }
    interface AtomicFocusDetector {
    }
    interface AtomicFocusTrap {
        "active": boolean;
        /**
          * The container to hide from the tabindex and accessibility DOM when the focus trap is inactive.
         */
        "container"?: HTMLElement;
        /**
          * The common ancestor of the focus trap and of all the elements that should be inaccessible when inside the focus trap.
         */
        "scope": HTMLElement;
        /**
          * Whether the element should be hidden from screen readers & not interactive with the tab, when not active.
         */
        "shouldHideSelf": boolean;
        /**
          * The source to focus when the focus trap becomes inactive.
         */
        "source"?: HTMLElement;
    }
    /**
     * The `atomic-folded-result-list` component is responsible for displaying folded query results, by applying one or more result templates for up to three layers (i.e., to the result, child and grandchild).
     */
    interface AtomicFoldedResultList {
        /**
          * The name of the field that uniquely identifies a result within a collection.
          * @defaultValue `foldingchild`
         */
        "childField"?: string;
        /**
          * The name of the field on which to do the folding. The folded result list component will use the values of this field to resolve the collections of result items.
          * @defaultValue `foldingcollection`
         */
        "collectionField"?: string;
        /**
          * The spacing of various elements in the result list, including the gap between results, the gap between parts of a result, and the font sizes of different parts in a result.
         */
        "density": ItemDisplayDensity;
        /**
          * The expected size of the image displayed in the results.
         */
        "imageSize": ItemDisplayImageSize;
        /**
          * The initial number of child results to request for each folded collection, before expansion.
          * @defaultValue `2`
          * @example For an email thread with a total of 20 messages, using the default value of `2` will request the top two child messages, based on the current sort criteria and query, to be returned as children of the parent message. The user can then click to expand the collection and see the remaining messages that match the current query (i.e., not necessarily all remaining 18 messages). Those messages will be sorted based on the current sort criteria (i.e., not necessarily by date). See the `atomic-load-more-children-results` component. For more info on Result Folding, see [Result Folding](https://docs.coveo.com/en/1884).
         */
        "numberOfFoldedResults": number;
        /**
          * The name of the field that determines whether a certain result is a top result containing other child results within a collection.
          * @defaultValue `foldingparent`
         */
        "parentField"?: string;
        /**
          * Sets a rendering function to bypass the standard HTML template mechanism for rendering results. You can use this function while working with web frameworks that don't use plain HTML syntax, e.g., React, Angular or Vue.  Do not use this method if you integrate Atomic in a plain HTML deployment.
         */
        "setRenderFunction": (resultRenderingFunction: ItemRenderingFunction) => Promise<void>;
    }
    /**
     * The `atomic-format-currency` component is used for formatting currencies.
     * The numerical format of compatible parents will be set according to the currency property of this component.
     */
    interface AtomicFormatCurrency {
        /**
          * The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as "USD" for the US dollar, "EUR" for the euro, or "CNY" for the Chinese RMB. See the current [currency & funds code list](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency).
         */
        "currency": string;
    }
    /**
     * The `atomic-format-number` component is used for number formatting.
     * The numerical format of compatible parents will be set according to the properties of this component.
     */
    interface AtomicFormatNumber {
        /**
          * The maximum number of fraction digits to use.
         */
        "maximumFractionDigits"?: number;
        /**
          * The maximum number of significant digits to use.
         */
        "maximumSignificantDigits"?: number;
        /**
          * The minimum number of fraction digits to use.
         */
        "minimumFractionDigits"?: number;
        /**
          * The minimum number of integer digits to use.
         */
        "minimumIntegerDigits"?: number;
        /**
          * The minimum number of significant digits to use.
         */
        "minimumSignificantDigits"?: number;
    }
    /**
     * The `atomic-format-unit` component is used for formatting numbers with units.
     * The numerical format of compatible parents will be set according to the properties of this component.
     */
    interface AtomicFormatUnit {
        /**
          * The unit to use in unit formatting. Leverages the [Intl.NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat) constructor. The unit must be [sanctioned unit identifier](https://tc39.es/proposal-unified-intl-numberformat/section6/locales-currencies-tz_proposed_out.html#sec-issanctionedsimpleunitidentifier)
         */
        "unit": string;
        /**
          * The unit formatting style to use in unit formatting.  * "long" (e.g., 16 litres) * "short" (e.g., 16 l) * "narrow" (e.g., 16l)
         */
        "unitDisplay"?: 'long' | 'short' | 'narrow';
    }
    /**
     * The `atomic-frequently-bought-together` component suggests products frequently bought with the current product based on the shopping cart of other users.
     */
    interface AtomicFrequentlyBoughtTogether {
    }
    /**
     * The `atomic-generated-answer` component uses Coveo Machine Learning (Coveo ML) models to automatically generate an answer to a query executed by the user.
     * For more information, see [About Relevance Generative Answering (RGA)](https://docs.coveo.com/en/n9de0370/)
     */
    interface AtomicGeneratedAnswer {
        /**
          * The answer style to apply when the component first loads. Options:   - `default`: Generate the answer without specific formatting instructions.   - `bullet`: Generate the answer as a bulleted list.   - `step`: Generate the answer as step-by-step instructions.   - `concise`: Generate the answer as briefly as possible.
         */
        "answerStyle": GeneratedAnswerStyle;
        /**
          * Whether to allow the answer to be collapsed when the text is taller than 250px.
         */
        "collapsible"?: boolean;
    }
    interface AtomicGeneratedAnswerFeedbackModal {
        /**
          * A `GeneratedAnswer` controller instance. It is used when the user interacts with the modal.
         */
        "generatedAnswer": GeneratedAnswer;
        /**
          * Indicates whether the modal is open.
         */
        "isOpen": boolean;
    }
    /**
     * The `atomic-html` component renders the HTML value of a string.
     * There is an inherent XSS security concern associated with the usage of this component.
     * Use only with values for which you are certain the content is harmless.
     */
    interface AtomicHtml {
        /**
          * Specify if the content should be sanitized, using [`DOMPurify`](https://www.npmjs.com/package/dompurify).
         */
        "sanitize": boolean;
        /**
          * The string value containing HTML to display;
         */
        "value": string;
    }
    /**
     * The `atomic-icon` component displays an SVG icon with a 1:1 aspect ratio.
     * This component can display an icon from those available in the Atomic package, from a specific location, or as an inline SVG element.
     */
    interface AtomicIcon {
        /**
          * The SVG icon to display.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly.
         */
        "icon": string;
    }
    interface AtomicInsightEditToggle {
        "clickCallback": () => void;
        "tooltip": string;
    }
    interface AtomicInsightFacet {
        /**
          * Whether to display the facet values as checkboxes (multiple selection), links (single selection) or boxes (multiple selection). Possible values are 'checkbox', 'link', and 'box'.
         */
        "displayValuesAs": 'checkbox' | 'link' | 'box';
        /**
          * Whether to allow excluding values from the facet.
         */
        "enableExclusion": boolean;
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Whether to exclude the parents of folded results when estimating the result count for each facet value.
         */
        "filterFacetCount": boolean;
        /**
          * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.
         */
        "headingLevel": number;
        /**
          * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values. Note: A high injectionDepth may negatively impact the facet request performance. Minimum: `0` Default: `1000`
         */
        "injectionDepth": number;
        /**
          * Specifies if the facet is collapsed.
         */
        "isCollapsed": boolean;
        /**
          * The non-localized label for the facet.
         */
        "label": string;
        /**
          * The number of values to request for this facet. Also determines the number of additional values to request each time more values are shown.
         */
        "numberOfValues": number;
        /**
          * Specifies how a result must match the selected facet values. Allowed values: - `atLeastOneValue`: A result will match if at least one of the corresponding facet values is selected. - `allValues`: A result will match if all corresponding facet values are selected.
         */
        "resultsMustMatch": FacetResultsMustMatch;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are 'score', 'alphanumeric', 'occurrences', and 'automatic'.
         */
        "sortCriteria": InsightFacetSortCriterion;
    }
    interface AtomicInsightFoldedResultList {
        /**
          * The name of the field that uniquely identifies a result within a collection.
          * @defaultValue `foldingchild`
         */
        "childField"?: string;
        /**
          * The name of the field on which to do the folding. The folded result list component will use the values of this field to resolve the collections of result items.
          * @defaultValue `foldingcollection`
         */
        "collectionField"?: string;
        /**
          * The spacing of various elements in the result list, including the gap between results, the gap between parts of a result, and the font sizes of different parts in a result.
         */
        "density": ItemDisplayDensity;
        /**
          * The expected size of the image displayed in the results.
         */
        "imageSize": ItemDisplayImageSize;
        /**
          * The name of the field that determines whether a certain result is a top result containing other child results within a collection.
          * @defaultValue `foldingparent`
         */
        "parentField"?: string;
        /**
          * Sets a rendering function to bypass the standard HTML template mechanism for rendering results. You can use this function while working with web frameworks that don't use plain HTML syntax, e.g., React, Angular or Vue.  Do not use this method if you integrate Atomic in a plain HTML deployment.
         */
        "setRenderFunction": (resultRenderingFunction: ItemRenderingFunction) => Promise<void>;
    }
    interface AtomicInsightFullSearchButton {
        "tooltip": string;
    }
    interface AtomicInsightGeneratedAnswer {
        /**
          * The answer style to apply when the component first loads. Options:   - `default`: Generate the answer without specific formatting instructions.   - `bullet`: Generate the answer as a bulleted list.   - `step`: Generate the answer as step-by-step instructions.   - `concise`: Generate the answer as briefly as possible.
         */
        "answerStyle": InsightGeneratedAnswerStyle;
        /**
          * Whether to allow the answer to be collapsed when the text is taller than 250px.
         */
        "collapsible"?: boolean;
    }
    interface AtomicInsightHistoryToggle {
        "clickCallback": () => void;
        "tooltip": string;
    }
    interface AtomicInsightInterface {
        /**
          * The value to set the [nonce](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce) attribute to on inline script and style elements generated by this interface and its child components. If your application is served with a Content Security Policy (CSP) that doesn't include the `script-src: 'unsafe-inline'` or `style-src: 'unsafe-inline'` directives, you should ensure that your application server generates a new nonce on every page load and uses the generated value to set this prop and serve the corresponding CSP response headers (i.e., script-src 'nonce-<YOUR_GENERATED_NONCE>' and style-src 'nonce-<YOUR_GENERATED_NONCE>'). Otherwise you may see console errors such as  - Refused to execute inline script because it violates the following Content Security Policy directive: [...]  - Refused to apply inline style because it violates the following Content Security Policy directive: [...]. When using a nonce, the first import of Atomic should be to import & call the `setNonce` function with the generated nonce value.
          * @example : ```html <script nonce="<YOUR_GENERATED_NONCE>"> import {setNonce} from '@coveo/atomic'; setNonce('<YOUR_GENERATED_NONCE>'); </script> ```
         */
        "CspNonce"?: string;
        /**
          * Whether analytics should be enabled.
         */
        "analytics": boolean;
        /**
          * The service insight interface headless engine.
         */
        "engine"?: InsightEngine;
        /**
          * Executes the first search and logs the interface load event to analytics, after initializing connection to the headless search engine.
         */
        "executeFirstSearch": () => Promise<void>;
        /**
          * A list of non-default fields to include in the query results.  Specify the property as an array using a JSON string representation: ```html <atomic-insight-interface fields-to-include='["fieldA", "fieldB"]'></atomic-insight-interface> ```
         */
        "fieldsToInclude": string[] | string;
        /**
          * Returns the unique, organization-specific endpoint(s)
          * @param organizationId
          * @param env
         */
        "getOrganizationEndpoints": (organizationId: string, env?: PlatformEnvironmentInsight) => Promise<{ platform: string; analytics: string; search: string; admin: string; }>;
        /**
          * The service insight interface i18next instance.
         */
        "i18n": i18n;
        /**
          * The icon assets path. By default, this will be a relative URL pointing to `./assets`.  Example: "/mypublicpath/icons"
         */
        "iconAssetsPath": string;
        /**
          * Initializes the connection with the headless insight engine using options for `accessToken` (required), `organizationId` (required), `renewAccessToken`, and `platformUrl`.
         */
        "initialize": (options: InsightInitializationOptions) => Promise<void>;
        /**
          * Initializes the connection with an already preconfigured headless insight engine.
         */
        "initializeWithInsightEngine": (engine: InsightEngine) => Promise<void>;
        /**
          * The service insight interface language.
         */
        "language": string;
        /**
          * The language assets path. By default, this will be a relative URL pointing to `./lang`.  Example: "/mypublicpath/languages"
         */
        "languageAssetsPath": string;
        /**
          * The compatibility JSON version for i18next to use (see [i18next Migration Guide](https://www.i18next.com/misc/migration-guide#v20.x.x-to-v21.0.0)).
         */
        "localizationCompatibilityVersion": i18nCompatibilityVersion;
        /**
          * The severity level of the messages to log in the console.
         */
        "logLevel"?: InsightLogLevel;
        /**
          * The number of results per page. By default, this is set to `5`.
         */
        "resultsPerPage": number;
    }
    interface AtomicInsightLayout {
        /**
          * Whether the interface should be shown in widget format.
         */
        "widget": boolean;
    }
    interface AtomicInsightNoResults {
    }
    interface AtomicInsightNumericFacet {
        /**
          * The required facets and values for this facet to be displayed. Examples: ```html <atomic-insight-facet facet-id="abc" field="objecttype" ...></atomic-insight-facet>  <!-- To show the facet when any value is selected in the facet with id "abc": --> <atomic-insight-numeric-facet   depends-on-abc   ... ></atomic-insight-numeric-facet>  <!-- To show the facet when value "doc" is selected in the facet with id "abc": --> <atomic-insight-numeric-facet   depends-on-abc="doc"   ... ></atomic-insight-numeric-facet> ```
         */
        "dependsOn": Record<string, string>;
        /**
          * Whether to display the facet values as checkboxes (multiple selection) or links (single selection). Possible values are 'checkbox' and 'link'.
         */
        "displayValuesAs": 'checkbox' | 'link';
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Whether to exclude the parents of folded results when estimating the result count for each facet value.
         */
        "filterFacetCount": boolean;
        /**
          * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.
         */
        "headingLevel": number;
        /**
          * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values. Note: A high injectionDepth may negatively impact the facet request performance. Minimum: `0` Default: `1000`
         */
        "injectionDepth": number;
        /**
          * Specifies if the facet is collapsed.
         */
        "isCollapsed": boolean;
        /**
          * The non-localized label for the facet. Used in the `atomic-breadbox` component through the bindings store.
         */
        "label": string;
        /**
          * The number of values to request for this facet, when there are no manual ranges. If the number of values is 0, no ranges will be displayed.
         */
        "numberOfValues": number;
        /**
          * The algorithm that's used for generating the ranges of this facet when they aren't manually defined. The default value of `"equiprobable"` generates facet ranges which vary in size but have a more balanced number of results within each range. The value of `"even"` generates equally sized facet ranges across all of the results.
         */
        "rangeAlgorithm": InsightRangeFacetRangeAlgorithm;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are 'ascending' and 'descending'.
         */
        "sortCriteria": InsightRangeFacetSortCriterion;
        /**
          * Whether this facet should contain an input allowing users to set custom ranges. Depending on the field, the input can allow either decimal or integer values.
         */
        "withInput"?: NumberInputType;
    }
    interface AtomicInsightPager {
        /**
          * Specifies how many page buttons to display in the pager.
         */
        "numberOfPages": number;
    }
    interface AtomicInsightQueryError {
    }
    interface AtomicInsightQuerySummary {
    }
    interface AtomicInsightRefineModal {
        "isOpen": boolean;
        "openButton"?: HTMLElement;
    }
    interface AtomicInsightRefineToggle {
    }
    interface AtomicInsightResult {
        /**
          * The classes to add to the result element.
         */
        "classes": string;
        /**
          * The result content to display.
         */
        "content"?: ParentNode;
        /**
          * How large or small results should be.
         */
        "density": ItemDisplayDensity;
        /**
          * The size of the visual section in result list items.  This is overwritten by the image size defined in the result content, if it exists.
         */
        "imageSize": ItemDisplayImageSize;
        /**
          * The InteractiveResult item.
         */
        "interactiveResult": InsightInteractiveResult;
        "loadingFlag"?: string;
        /**
          * The result item.
         */
        "result": InsightResult | InsightFoldedResult;
        /**
          * Whether an atomic-result-link inside atomic-insight-result should stop click event propagation.
         */
        "stopPropagation"?: boolean;
        /**
          * Global Atomic state.
         */
        "store"?: AtomicInsightStore;
    }
    interface AtomicInsightResultAction {
        /**
          * The type of action to perform when the result action is clicked. This will be sent along the event fired when the button is clicked.
         */
        "action": Actions | string;
        /**
          * Specify the result action icon to display.
         */
        "icon": string;
        /**
          * The text tooltip to show on the result action icon.
         */
        "tooltip": string;
    }
    interface AtomicInsightResultActionBar {
    }
    interface AtomicInsightResultChildren {
        /**
          * The expected size of the image displayed in the children results.
         */
        "imageSize"?: ItemDisplayImageSize;
        /**
          * Whether to inherit templates defined in a parent atomic-result-children. Only works for the second level of child nesting.
         */
        "inheritTemplates": boolean;
        /**
          * The non-localized copy for an empty result state. An empty string will result in the component being hidden.
         */
        "noResultText": string;
    }
    interface AtomicInsightResultChildrenTemplate {
        /**
          * A function that must return true on results for the result template to apply. Set programmatically before initialization, not via attribute.  For example, the following targets a template and sets a condition to make it apply only to results whose `title` contains `singapore`: `document.querySelector('#target-template').conditions = [(result) => /singapore/i.test(result.title)];`
         */
        "conditions": ResultTemplateCondition[];
        /**
          * Gets the appropriate result template based on conditions applied.
         */
        "getTemplate": () => Promise<ResultTemplate<DocumentFragment> | null>;
        /**
          * The field that, when defined on a result item, would allow the template to be applied.  For example, a template with the following attribute only applies to result items whose `filetype` and `sourcetype` fields are defined: `if-defined="filetype,sourcetype"`
         */
        "ifDefined"?: string;
        /**
          * The field that, when defined on a result item, would prevent the template from being applied.  For example, a template with the following attribute only applies to result items whose `filetype` and `sourcetype` fields are NOT defined: `if-not-defined="filetype,sourcetype"`
         */
        "ifNotDefined"?: string;
    }
    interface AtomicInsightResultList {
        /**
          * The spacing of various elements in the result list, including the gap between results, the gap between parts of a result, and the font sizes of different parts in a result.
         */
        "density": ItemDisplayDensity;
        /**
          * The expected size of the image displayed in the results.
         */
        "imageSize": ItemDisplayImageSize;
        /**
          * Sets a rendering function to bypass the standard HTML template mechanism for rendering results. You can use this function while working with web frameworks that don't use plain HTML syntax, e.g., React, Angular or Vue.  Do not use this method if you integrate Atomic in a plain HTML deployment.
          * @param resultRenderingFunction
         */
        "setRenderFunction": (resultRenderingFunction: ItemRenderingFunction) => Promise<void>;
    }
    interface AtomicInsightResultTemplate {
        /**
          * A function that must return true on results for the result template to apply. Set programmatically before initialization, not via attribute.  For example, the following targets a template and sets a condition to make it apply only to results whose `title` contains `singapore`: `document.querySelector('#target-template').conditions = [(result) => /singapore/i.test(result.title)];`
         */
        "conditions": InsightResultTemplateCondition[];
        /**
          * Gets the appropriate result template based on conditions applied.
         */
        "getTemplate": () => Promise<InsightResultTemplate<DocumentFragment> | null>;
        /**
          * The field that, when defined on a result item, would allow the template to be applied.  For example, a template with the following attribute only applies to result items whose `filetype` and `sourcetype` fields are defined: `if-defined="filetype,sourcetype"`
         */
        "ifDefined"?: string;
        /**
          * The field that, when defined on a result item, would prevent the template from being applied.  For example, a template with the following attribute only applies to result items whose `filetype` and `sourcetype` fields are NOT defined: `if-not-defined="filetype,sourcetype"`
         */
        "ifNotDefined"?: string;
    }
    interface AtomicInsightSearchBox {
        /**
          * Whether to prevent the user from triggering a search from the component. Perfect for use cases where you need to disable the search conditionally, like when the input is empty.
         */
        "disableSearch": boolean;
        /**
          * The number of query suggestions to display when interacting with the search box.
         */
        "numberOfSuggestions": number;
    }
    interface AtomicInsightSmartSnippet {
        /**
          * When the answer is partly hidden, how much of its height (in pixels) should be visible.
         */
        "collapsedHeight": number;
        /**
          * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the question at the top of the snippet, from 1 to 5.
         */
        "headingLevel": number;
        /**
          * The maximum height (in pixels) a snippet can have before the component truncates it and displays a "show more" button.
         */
        "maximumHeight": number;
        /**
          * Sets the style of the snippet.  Example: ```ts smartSnippet.snippetStyle = `   b {     color: blue;   } `; ```
         */
        "snippetStyle"?: string;
    }
    interface AtomicInsightSmartSnippetFeedbackModal {
        "isOpen": boolean;
        "source"?: HTMLElement;
    }
    interface AtomicInsightSmartSnippetSuggestions {
        /**
          * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the "People also ask" heading over the snippets, from 1 to 5.
         */
        "headingLevel": number;
        /**
          * Sets the style of the snippets.  Example: ```ts smartSnippet.snippetStyle = `   b {     color: blue;   } `; ```
         */
        "snippetStyle"?: string;
    }
    interface AtomicInsightTab {
        /**
          * Whether this tab is active upon rendering. If multiple tabs are set to active on render, the last one to be rendered will override the others.
         */
        "active": boolean;
        /**
          * The expression that will be passed to the search as a `cq` paramenter upon being selected.
         */
        "expression": string;
        /**
          * The label that will be shown to the user.
         */
        "label": string;
        /**
          * Activates the tab.
         */
        "select": () => Promise<void>;
    }
    interface AtomicInsightTabs {
    }
    interface AtomicInsightTimeframeFacet {
        /**
          * The required facets and values for this facet to be displayed. Examples: ```html <atomic-insight-facet facet-id="abc" field="objecttype" ...></atomic-insight-facet>  <!-- To show the facet when any value is selected in the facet with id "abc": --> <atomic-insight-timeframe-facet   depends-on-abc   ... ></atomic-insight-timeframe-facet>  <!-- To show the facet when value "doc" is selected in the facet with id "abc": --> <atomic-insight-timeframe-facet   depends-on-abc="doc"   ... ></atomic-insight-timeframe-facet> ```
         */
        "dependsOn": Record<string, string>;
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Whether to exclude the parents of folded results when estimating the result count for each facet value.
         */
        "filterFacetCount": boolean;
        /**
          * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.
         */
        "headingLevel": number;
        /**
          * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values. Note: A high injectionDepth may negatively impact the facet request performance. Minimum: `0` Default: `1000`
         */
        "injectionDepth": number;
        /**
          * Specifies if the facet is collapsed.
         */
        "isCollapsed": boolean;
        /**
          * The non-localized label for the facet. Used in the atomic-breadbox component through the bindings store.
         */
        "label": string;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are 'ascending' and 'descending'.
         */
        "sortCriteria": InsightRangeFacetSortCriterion;
        /**
          * Whether this facet should contain an datepicker allowing users to set custom ranges.
         */
        "withDatePicker": boolean;
    }
    interface AtomicIpxBody {
        "displayFooterSlot": boolean;
        "isOpen"?: boolean;
    }
    interface AtomicIpxButton {
        /**
          * The close icon of the button.
         */
        "closeIcon": string;
        /**
          * Whether the IPX modal is open.
         */
        "isModalOpen": boolean;
        /**
          * The label that will be shown to the user.
         */
        "label"?: string;
        /**
          * The open icon of the button.
         */
        "openIcon": string;
    }
    interface AtomicIpxEmbedded {
        /**
          * The container to hide from the tabindex and accessibility DOM when the modal is closed.
         */
        "container"?: HTMLElement;
    }
    interface AtomicIpxModal {
        /**
          * The container to hide from the tabindex and accessibility DOM when the modal is closed.
         */
        "container"?: HTMLElement;
        "isOpen": boolean;
        "source"?: HTMLElement;
    }
    interface AtomicIpxRefineModal {
        /**
          * The number of expanded facets inside the refine modal. Remaining facets are automatically collapsed.  Using the value `0` collapses all facets.
         */
        "collapseFacetsAfter": number;
        "isOpen": boolean;
        "openButton"?: HTMLElement;
    }
    interface AtomicIpxRefineToggle {
        /**
          * The number of expanded facets inside the refine modal. Remaining facets are automatically collapsed.  Using the value `0` collapses all facets.
         */
        "collapseFacetsAfter": number;
    }
    /**
     * The `atomic-ipx-result-link` component automatically transforms a search result title into a clickable link that points to the original item. It is an experimental internal component not intended for general use.
     */
    interface AtomicIpxResultLink {
        /**
          * Specifies a template literal from which to generate the `href` attribute value (see [Template literals](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals)).  The template literal can reference any number of result properties from the parent result. It can also reference the window object.  For example, the following markup generates an `href` value such as `http://uri.com?id=itemTitle`, using the result's `clickUri` and `itemtitle` fields. ```html <atomic-ipx-result-link href-template='${clickUri}?id=${raw.itemtitle}'></atomic-ipx-result-link> ```
         */
        "hrefTemplate"?: string;
    }
    interface AtomicIpxTab {
        /**
          * Whether this tab is active upon rendering. If multiple tabs are set to active on render, the last one to be rendered will override the others.
         */
        "active": boolean;
        /**
          * The expression that will be passed to the search as a `cq` paramenter upon being selected.
         */
        "expression": string;
        /**
          * The label that will be shown to the user.
         */
        "label": string;
        /**
          * Activates the tab.
         */
        "select": () => Promise<void>;
    }
    interface AtomicIpxTabs {
    }
    /**
     * The `atomic-layout-section` lets you identify various sections for the related `atomic-layout` component.
     */
    interface AtomicLayoutSection {
        /**
          * For column sections, the maximum horizontal space it should take. E.g. '300px'
         */
        "maxWidth"?: string;
        /**
          * For column sections, the minimum horizontal space it should take. E.g. '300px'
         */
        "minWidth"?: string;
        /**
          * The name of the layout section.
         */
        "section": Section;
    }
    /**
     * The `atomic-load-more-children-results` component allows to load the full collection for a folded result.
     */
    interface AtomicLoadMoreChildrenResults {
        /**
          * The non-localized label for the button used to load more results.
         */
        "label": string;
    }
    /**
     * The `atomic-load-more-results` component allows the user to load additional results if more are available.
     */
    interface AtomicLoadMoreResults {
    }
    /**
     * When the modal is opened, the class `atomic-modal-opened` is added to the interfaceElement and the body, allowing further customization.
     */
    interface AtomicModal {
        /**
          * Whether to display the open and close animations over the entire page or the atomic-modal only.
         */
        "boundary": 'page' | 'element';
        "close": () => void;
        /**
          * The container to hide from the tabindex and accessibility DOM when the modal is closed.
         */
        "container"?: HTMLElement;
        "fullscreen": boolean;
        "isOpen": boolean;
        "scope"?: HTMLElement;
        "source"?: HTMLElement;
    }
    /**
     * The `atomic-no-results` component displays search tips and a "Cancel last action" button when there are no results. Any additional content slotted inside of its element will be displayed as well.
     */
    interface AtomicNoResults {
        /**
          * Whether to display a button which cancels the last available action.
         */
        "enableCancelLastAction": boolean;
    }
    /**
     * The `atomic-notifications` component is responsible for displaying notifications generated by the Coveo Search API (see [Trigger](https://docs.coveo.com/en/1458)).
     */
    interface AtomicNotifications {
        /**
          * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use above the notifications, from 1 to 6.
         */
        "headingLevel": number;
        /**
          * Specifies an icon to display at the left-end of a notification.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly
         */
        "icon"?: string;
    }
    /**
     * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., ascending, descending).
     * An `atomic-numeric-facet` displays a facet of the results for the current query as numeric ranges.
     */
    interface AtomicNumericFacet {
        /**
          * The required facets and values for this facet to be displayed. Examples: ```html <atomic-facet facet-id="abc" field="objecttype" ...></atomic-facet>  <!-- To show the facet when any value is selected in the facet with id "abc": --> <atomic-numeric-facet   depends-on-abc   ... ></atomic-numeric-facet>  <!-- To show the facet when value "doc" is selected in the facet with id "abc": --> <atomic-numeric-facet   depends-on-abc="doc"   ... ></atomic-numeric-facet> ```
         */
        "dependsOn": Record<string, string>;
        /**
          * Whether to display the facet values as checkboxes (multiple selection) or links (single selection). Possible values are 'checkbox' and 'link'.
         */
        "displayValuesAs": 'checkbox' | 'link';
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Whether to exclude the parents of folded results when estimating the result count for each facet value.
         */
        "filterFacetCount": boolean;
        /**
          * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.
         */
        "headingLevel": number;
        /**
          * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values. Note: A high injectionDepth may negatively impact the facet request performance. Minimum: `0` Default: `1000`
         */
        "injectionDepth": number;
        /**
          * Specifies whether the facet is collapsed. When the facet is the child of an `atomic-facet-manager` component, the facet manager controls this property.
         */
        "isCollapsed": boolean;
        /**
          * The non-localized label for the facet. Used in the `atomic-breadbox` component through the bindings store.
         */
        "label": string;
        /**
          * The number of values to request for this facet, when there are no manual ranges. If the number of values is 0, no ranges will be displayed.
         */
        "numberOfValues": number;
        /**
          * The algorithm that's used for generating the ranges of this facet when they aren't manually defined. The default value of `"equiprobable"` generates facet ranges which vary in size but have a more balanced number of results within each range. The value of `"even"` generates equally sized facet ranges across all of the results.
         */
        "rangeAlgorithm": RangeFacetRangeAlgorithm;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are 'ascending' and 'descending'.
         */
        "sortCriteria": RangeFacetSortCriterion;
        /**
          * Whether this facet should contain an input allowing users to set custom ranges. Depending on the field, the input can allow either decimal or integer values.
         */
        "withInput"?: NumberInputType;
    }
    /**
     * The `atomic-numeric-range` component defines the range of an `atomic-numeric-facet`, and therefore must be defined within an `atomic-numeric-facet` component.
     */
    interface AtomicNumericRange {
        /**
          * The ending value for the numeric range.
         */
        "end": number;
        /**
          * Specifies whether the end value should be included in the range.
         */
        "endInclusive": boolean;
        /**
          * The non-localized label for the facet. When defined, it will appear instead of the formatted value. Used in the `atomic-breadbox` component through the bindings store.
         */
        "label"?: string;
        /**
          * The starting value for the numeric range.
         */
        "start": number;
    }
    /**
     * The `atomic-pager` provides buttons that allow the end user to navigate through the different result pages.
     */
    interface AtomicPager {
        /**
          * The SVG icon to use to display the Next button.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly.
         */
        "nextButtonIcon": string;
        /**
          * Specifies how many page buttons to display in the pager.
         */
        "numberOfPages": number;
        /**
          * The SVG icon to use to display the Previous button.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly.
         */
        "previousButtonIcon": string;
    }
    /**
     * The `atomic-popover` component displays any facet as a popover menu.
     */
    interface AtomicPopover {
    }
    /**
     * The `atomic-query-error` component handles fatal errors when performing a query on the index or Search API. When the error is known, it displays a link to relevant documentation link for debugging purposes. When the error is unknown, it displays a small text area with the JSON content of the error.
     */
    interface AtomicQueryError {
    }
    /**
     * The `atomic-query-summary` component displays information about the current range of results and the request duration (e.g., "Results 1-10 of 123 in 0.47 seconds").
     */
    interface AtomicQuerySummary {
    }
    /**
     * The `atomic-quickview` component renders a button which the end user can click to open a modal box containing a preview
     * about a result.
     * The `atomic-quickview` is not meant to replace the `atomic-result-link` to access an item in a result template; it has certain limitations (e.g., custom styles and embedded
     * images/links may not work as expected in an `atomic-quickview`).
     */
    interface AtomicQuickview {
        /**
          * The `sandbox` attribute to apply to the quickview iframe.  The quickview is loaded inside an iframe with a [`sandbox`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-sandbox) attribute for security reasons.  This attribute exists primarily to protect against potential XSS attacks that could originate from the document being displayed.  By default, the sandbox attributes are: `allow-popups allow-top-navigation allow-same-origin`.  `allow-same-origin` is not optional, and must always be included in the list of allowed capabilities for the component to function properly.
         */
        "sandbox": string;
    }
    interface AtomicQuickviewModal {
        "content"?: string;
        "current"?: number;
        "modalCloseCallback"?: () => void;
        "reset": () => Promise<void>;
        "result"?: Result;
        "sandbox"?: string;
        "total"?: number;
    }
    /**
     * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., number of occurrences).
     * An `atomic-rating-facet` displays a facet of the results for the current query as ratings.
     * It only supports numeric fields.
     */
    interface AtomicRatingFacet {
        /**
          * The required facets and values for this facet to be displayed. Examples: ```html <atomic-facet facet-id="abc" field="objecttype" ...></atomic-facet>  <!-- To show the facet when any value is selected in the facet with id "abc": --> <atomic-rating-facet   depends-on-abc   ... ></atomic-rating-facet>  <!-- To show the facet when value "doc" is selected in the facet with id "abc": --> <atomic-rating-facet   depends-on-abc="doc"   ... ></atomic-rating-facet> ```
         */
        "dependsOn": Record<string, string>;
        /**
          * Whether to display the facet values as checkboxes (multiple selection) or links (single selection). Possible values are 'checkbox' and 'link'.
         */
        "displayValuesAs": 'checkbox' | 'link';
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Whether to exclude the parents of folded results when estimating the result count for each facet value.
         */
        "filterFacetCount": boolean;
        /**
          * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.
         */
        "headingLevel": number;
        /**
          * The SVG icon to use to display the rating.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly.  When using a custom icon, at least part of your icon should have the color set to `fill="currentColor"`. This part of the SVG will take on the colors set in the following [variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties):  - `--atomic-rating-icon-active-color` - `--atomic-rating-icon-inactive-color`
         */
        "icon": string;
        /**
          * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values. Note: A high injectionDepth may negatively impact the facet request performance. Minimum: `0`
         */
        "injectionDepth": number;
        /**
          * Specifies whether the facet is collapsed. When the facet is the child of an `atomic-facet-manager` component, the facet manager controls this property.
         */
        "isCollapsed": boolean;
        /**
          * The non-localized label for the facet. Used in the `atomic-breadbox` component through the bindings store.
         */
        "label": string;
        /**
          * The maximum value in the field's index and the number of rating icons to display in the facet. If not assigned a value, this property will default to the same value as `numberOfIntervals`.
         */
        "maxValueInIndex": number;
        /**
          * The minimum value of the field.
         */
        "minValueInIndex": number;
        /**
          * The number of options to display in the facet. If `maxValueInIndex` isn't specified, it will be assumed that this is also the maximum number of rating icons.
         */
        "numberOfIntervals": number;
    }
    /**
     * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., number of occurrences).
     * An `atomic-rating-range-facet` displays a facet of the results for the current query as ratings.
     * It only supports numeric fields.
     */
    interface AtomicRatingRangeFacet {
        /**
          * The required facets and values for this facet to be displayed. Examples: ```html <atomic-facet facet-id="abc" field="objecttype" ...></atomic-facet>  <!-- To show the facet when any value is selected in the facet with id "abc": --> <atomic-rating-range-facet   depends-on-abc   ... ></atomic-rating-range-facet>  <!-- To show the facet when value "doc" is selected in the facet with id "abc": --> <atomic-rating-range-facet   depends-on-abc="doc"   ... ></atomic-rating-range-facet> ```
         */
        "dependsOn": Record<string, string>;
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Whether to exclude the parents of folded results when estimating the result count for each facet value.
         */
        "filterFacetCount": boolean;
        /**
          * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.
         */
        "headingLevel": number;
        /**
          * The SVG icon to use to display the rating.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly.  When using a custom icon, at least part of your icon should have the color set to `fill="currentColor"`. This part of the SVG will take on the colors set in the following [variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties):  - `--atomic-rating-icon-active-color` - `--atomic-rating-icon-inactive-color`
         */
        "icon": string;
        /**
          * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values. Note: A high injectionDepth may negatively impact the facet request performance. Minimum: `0` Default: `1000`
         */
        "injectionDepth": number;
        /**
          * Specifies whether the facet is collapsed. When the facet is the child of an `atomic-facet-manager` component, the facet manager controls this property.
         */
        "isCollapsed": boolean;
        /**
          * The non-localized label for the facet. Used in the `atomic-breadbox` component through the bindings store.
         */
        "label": string;
        /**
          * The maximum value in the field's index and the number of rating icons to display in the facet. This property will default to the same value as `numberOfIntervals`, if not assigned a value.
         */
        "maxValueInIndex": number;
        /**
          * The minimum value of the field.
         */
        "minValueInIndex": number;
        /**
          * The number of options to display in the facet. If `maxValueInIndex` isn't specified, it will be assumed that this is also the maximum number of rating icons.
         */
        "numberOfIntervals": number;
    }
    /**
     * The `atomic-recs-error` component handles fatal errors when performing a recommendations request on the index or Search API. When the error is known, it displays a link to relevant documentation link for debugging purposes. When the error is unknown, it displays a small text area with the JSON content of the error.
     */
    interface AtomicRecsError {
    }
    /**
     * The `atomic-recs-interface` component is the parent to all other atomic components in a recommendation interface. It handles the headless recommendation engine and localization configurations.
     */
    interface AtomicRecsInterface {
        /**
          * The value to set the [nonce](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce) attribute to on inline script and style elements generated by this interface and its child components. If your application is served with a Content Security Policy (CSP) that doesn't include the `script-src: 'unsafe-inline'` or `style-src: 'unsafe-inline'` directives, you should ensure that your application server generates a new nonce on every page load and uses the generated value to set this prop and serve the corresponding CSP response headers (i.e., script-src 'nonce-<YOUR_GENERATED_NONCE>' and style-src 'nonce-<YOUR_GENERATED_NONCE>'). Otherwise you may see console errors such as  - Refused to execute inline script because it violates the following Content Security Policy directive: [...]  - Refused to apply inline style because it violates the following Content Security Policy directive: [...].
          * @example : ```html <script nonce="<YOUR_GENERATED_NONCE>"> import {setNonce} from '@coveo/atomic'; setNonce('<YOUR_GENERATED_NONCE>'); </script> ```
         */
        "CspNonce"?: string;
        /**
          * Whether analytics should be enabled.
         */
        "analytics": boolean;
        /**
          * The recommendation interface headless engine.
         */
        "engine"?: RecommendationEngine;
        /**
          * A list of non-default fields to include in the query results.  Specify the property as an array using a JSON string representation: ```html <atomic-recs-interface fields-to-include='["fieldA", "fieldB"]'></atomic-recs-interface> ```
         */
        "fieldsToInclude": string[] | string;
        "getOrganizationEndpoints": (organizationId: string, env?: PlatformEnvironment1) => Promise<{ platform: string; analytics: string; search: string; admin: string; }>;
        /**
          * Fetches new recommendations.
         */
        "getRecommendations": () => Promise<void>;
        /**
          * The recommendation interface i18next instance.
         */
        "i18n": i18n;
        /**
          * The icon assets path. By default, this will be a relative URL pointing to `./assets`.  Example: "/mypublicpath/icons"
         */
        "iconAssetsPath": string;
        /**
          * Initializes the connection with the headless recommendation engine using options for `accessToken` (required), `organizationId` (required), `renewAccessToken`, and `platformUrl`.
         */
        "initialize": (options: RecsInitializationOptions) => Promise<void>;
        /**
          * Initializes the connection with an already preconfigured headless recommendation engine. This bypasses the properties set on the component, such as analytics, recommendation, searchHub, language, timezone & logLevel.
         */
        "initializeWithRecommendationEngine": (engine: RecommendationEngine) => Promise<void>;
        /**
          * The recommendation interface language.
         */
        "language": string;
        /**
          * The language assets path. By default, this will be a relative URL pointing to `./lang`.  Example: "/mypublicpath/languages"
         */
        "languageAssetsPath": string;
        /**
          * The compatibility JSON version for i18next to use (see [i18next Migration Guide](https://www.i18next.com/misc/migration-guide#v20.x.x-to-v21.0.0)).
         */
        "localizationCompatibilityVersion": i18nCompatibilityVersion1;
        /**
          * The severity level of the messages to log in the console.
         */
        "logLevel"?: RecsLogLevel;
        /**
          * The recommendation interface [query pipeline](https://docs.coveo.com/en/180/).  If the recommendation interface is initialized using [`initializeWithRecommendationEngine`](https://docs.coveo.com/en/atomic/latest/reference/recommendation-components/atomic-recs-interface/#initializewithrecommendationengine), the query pipeline should instead be configured in the target engine.
         */
        "pipeline"?: string;
        /**
          * The recommendation interface [search hub](https://docs.coveo.com/en/1342/).  If the recommendation interface is initialized using [`initializeWithRecommendationEngine`](https://docs.coveo.com/en/atomic/latest/reference/recommendation-components/atomic-recs-interface/#initializewithrecommendationengine), the search hub should instead be configured in the target engine.
         */
        "searchHub"?: string;
        /**
          * The [tz database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) identifier of the time zone to use to correctly interpret dates in the query expression, facets, and result items. By default, the timezone will be [guessed](https://day.js.org/docs/en/timezone/guessing-user-timezone).  Example: "America/Montreal"
         */
        "timezone"?: string;
    }
    /**
     * The `atomic-recs-list` component displays recommendations by applying one or more result templates.
     */
    interface AtomicRecsList {
        /**
          * The spacing of various elements in the result list, including the gap between results, the gap between parts of a result, and the font sizes of different parts in a result.
         */
        "density": ItemDisplayDensity;
        /**
          * The layout to apply when displaying results themselves. This does not affect the display of the surrounding list itself. To modify the number of recommendations per column, modify the --atomic-recs-number-of-columns CSS variable.
         */
        "display": ItemDisplayBasicLayout;
        /**
          * The target location to open the result link (see [target](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#target)). This property is only leveraged when `display` is `grid`.
          * @defaultValue `_self`
         */
        "gridCellLinkTarget": ItemTarget;
        /**
          * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading label, from 1 to 6.
         */
        "headingLevel": number;
        /**
          * The expected size of the image displayed in the results.
         */
        "imageSize": ItemDisplayImageSize;
        /**
          * The non-localized label for the list of recommendations.
         */
        "label"?: string;
        /**
          * Moves to the next page, when the carousel is activated.
         */
        "nextPage": () => Promise<void>;
        /**
          * The total number of recommendations to display. This does not modify the number of recommendations per column. To do so, modify the --atomic-recs-number-of-columns CSS variable.
         */
        "numberOfRecommendations": number;
        /**
          * The number of recommendations to display, per page. Setting a value greater than and lower than the numberOfRecommendations value activates the carousel. This does not affect the display of the list itself, only the number of recommendation pages.
         */
        "numberOfRecommendationsPerPage"?: number;
        /**
          * Moves to the previous page, when the carousel is activated.
         */
        "previousPage": () => Promise<void>;
        /**
          * The Recommendation identifier used by the Coveo platform to retrieve recommended documents. Make sure to set a different value for each atomic-recs-list in your page.
         */
        "recommendation": string;
        /**
          * Sets a rendering function to bypass the standard HTML template mechanism for rendering results. You can use this function while working with web frameworks that don't use plain HTML syntax, e.g., React, Angular or Vue.  Do not use this method if you integrate Atomic in a plain HTML deployment.
          * @param resultRenderingFunction
         */
        "setRenderFunction": (resultRenderingFunction: ItemRenderingFunction) => Promise<void>;
    }
    /**
     * The `atomic-recs-result` component is used internally by the `atomic-recs-list` component.
     */
    interface AtomicRecsResult {
        /**
          * The classes to add to the result element.
         */
        "classes": string;
        /**
          * The result content to display.
         */
        "content"?: ParentNode;
        /**
          * The size of the results.
         */
        "density": ItemDisplayDensity;
        /**
          * The layout to apply to display results.
         */
        "display": ItemDisplayLayout;
        /**
          * The size of the visual section in result list items.  This is overwritten by the image size defined in the result content, if it exists.
         */
        "imageSize": ItemDisplayImageSize;
        /**
          * The InteractiveResult item.
         */
        "interactiveResult": RecsInteractiveResult;
        "loadingFlag"?: string;
        /**
          * Internal function used by atomic-recs-list in advanced setups, which lets you bypass the standard HTML template system. Particularly useful for Atomic React
         */
        "renderingFunction": ItemRenderingFunction;
        /**
          * The result item.
         */
        "result": RecsResult;
        /**
          * Whether an atomic-result-link inside atomic-recs-result should stop click event propagation.
         */
        "stopPropagation"?: boolean;
        /**
          * Global Atomic state.
         */
        "store"?: AtomicRecsStore;
    }
    /**
     * A [result template](https://docs.coveo.com/en/atomic/latest/usage/displaying-results#defining-a-result-template) determines the format of the query results, depending on the conditions that are defined for each template.
     * A `template` element must be the child of an `atomic-recs-result-template`, and an `atomic-recs-list` must be the parent of each `atomic-recs-result-template`.
     * **Note:** Any `<script>` tags that are defined inside a `<template>` element will not be executed when the results are being rendered.
     * @MapProp name: mustMatch;attr: must-match;docs: The field and values that define which result items the condition must be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is `lithiummessage` or `YouTubePlaylist`: `must-match-filetype="lithiummessage,YouTubePlaylist"`;type: Record<string, string[]> ;default: {}
     * @MapProp name: mustNotMatch;attr: must-not-match;docs: The field and values that define which result items the condition must not be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is not `lithiummessage`: `must-not-match-filetype="lithiummessage";type: Record<string, string[]> ;default: {}
     */
    interface AtomicRecsResultTemplate {
        /**
          * A function that must return true on results for the result template to apply. Set programmatically before initialization, not via attribute.  For example, the following targets a template and sets a condition to make it apply only to results whose `title` contains `singapore`: `document.querySelector('#target-template').conditions = [(result) => /singapore/i.test(result.title)];`
         */
        "conditions": RecsResultTemplateCondition[];
        /**
          * Gets the appropriate result template based on the conditions applied.
         */
        "getTemplate": () => Promise<RecsResultTemplate<DocumentFragment> | null>;
        /**
          * The field that, when defined on a result item, would allow the template to be applied.  For example, a template with the following attribute only applies to result items whose `filetype` and `sourcetype` fields are defined: `if-defined="filetype,sourcetype"`
         */
        "ifDefined"?: string;
        /**
          * The field that, when defined on a result item, would prevent the template from being applied.  For example, a template with the following attribute only applies to result items whose `filetype` and `sourcetype` fields are NOT defined: `if-not-defined="filetype,sourcetype"`
         */
        "ifNotDefined"?: string;
    }
    /**
     * The `atomic-refine-modal` is automatically created as a child of the `atomic-search-interface` when the `atomic-refine-toggle` is initialized.
     * When the modal is opened, the class `atomic-modal-opened` is added to the interface element and the body, allowing further customization.
     */
    interface AtomicRefineModal {
        /**
          * The number of expanded facets inside the refine modal. Remaining facets are automatically collapsed.  Using the value `0` collapses all facets.
         */
        "collapseFacetsAfter": number;
        "isOpen": boolean;
        "openButton"?: HTMLElement;
    }
    /**
     * The `atomic-refine-toggle` component displays a button that opens a modal containing the facets and the sort components.
     * When this component is added to the `atomic-search-interface`, an `atomic-refine-modal` component is automatically created.
     */
    interface AtomicRefineToggle {
        /**
          * The number of expanded facets inside the refine modal. Remaining facets are automatically collapsed.  Using the value `0` collapses all facets.
         */
        "collapseFacetsAfter": number;
    }
    /**
     * The `atomic-relevance-inspector` component is used internally to offer insight on search page relevance, as well as information to help troubleshoot issues during development.
     */
    interface AtomicRelevanceInspector {
        /**
          * The Atomic interface bindings, namely the headless search engine and i18n instances.
         */
        "bindings": Bindings;
        "open": boolean;
    }
    /**
     * The `atomic-result` component is used internally by the `atomic-result-list` component.
     */
    interface AtomicResult {
        /**
          * The classes to add to the result element.
         */
        "classes": string;
        /**
          * The result content to display.
         */
        "content"?: ParentNode;
        /**
          * How large or small results should be.
         */
        "density": ItemDisplayDensity;
        /**
          * How results should be displayed.
         */
        "display": ItemDisplayLayout;
        /**
          * The size of the visual section in result list items.  This is overwritten by the image size defined in the result content, if it exists.
         */
        "imageSize": ItemDisplayImageSize;
        /**
          * The InteractiveResult item.
         */
        "interactiveResult": InteractiveResult;
        "loadingFlag"?: string;
        /**
          * Internal function used by atomic-recs-list in advanced setups, which lets you bypass the standard HTML template system. Particularly useful for Atomic React
         */
        "renderingFunction": ItemRenderingFunction;
        /**
          * The result item.
         */
        "result": Result | FoldedResult;
        /**
          * Whether an atomic-result-link inside atomic-result should stop click event propagation.
         */
        "stopPropagation"?: boolean;
        /**
          * Global Atomic state.
         */
        "store"?: AtomicCommonStore<AtomicCommonStoreData>;
    }
    /**
     * The `atomic-result-badge` element renders a badge to highlight special features of a result.
     * A badge can either display:
     * * Text:
     * ```html
     * <atomic-result-badge label="trending"></atomic-result-badge>
     * ```
     * * The contents of a single-value field:
     * ```html
     * <atomic-result-badge field="objecttype"></atomic-result-badge>
     * ```
     * * An icon:
     * ```html
     * <atomic-result-badge icon="https://my-website.fake/star.svg"></atomic-result-badge>
     * ```
     * * Slotted elements:
     * ```html
     * <atomic-result-badge icon="https://my-website.fake/stopwatch.svg">
     *     Deal ends in <my-dynamic-countdown></my-dynamic-countdown>
     * </atomic-result-badge>
     * ```
     * The contents of a multi-value field can be displayed as in the following example:
     * ```html
     * <atomic-result-badge icon="https://my-website.fake/language.svg">
     *    <atomic-result-multi-value-text field="language"></atomic-result-multi-value-text>
     * </atomic-result-badge>
     * ```
     */
    interface AtomicResultBadge {
        /**
          * The field to display in the badge.  Not compatible with `label`, slotted elements nor multi-value fields.
         */
        "field"?: string;
        /**
          * Specifies an icon to display at the left-end of the badge. This can be used in conjunction with `field`, `label` or slotted elements.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly
         */
        "icon"?: string;
        /**
          * The text to display in the badge.  Not compatible with `field` nor slotted elements.
         */
        "label"?: string;
    }
    /**
     * The `atomic-result-children` component is responsible for displaying child results by applying one or more child result templates.
     * Includes two slots, "before-children" and "after-children", which allow for rendering content before and after the list of children,
     * only when children exist.
     */
    interface AtomicResultChildren {
        /**
          * The expected size of the image displayed in the children results.
         */
        "imageSize"?: ItemDisplayImageSize;
        /**
          * Whether to inherit templates defined in a parent atomic-result-children. Only works for the second level of child nesting.
         */
        "inheritTemplates": boolean;
        /**
          * The non-localized copy for an empty result state. An empty string will result in the component being hidden.
         */
        "noResultText": string;
    }
    /**
     * The `atomic-result-children-template` component determines the format of the child results, depending on the conditions that are defined for each template. A `template` element must be the child of an `atomic-result-children-template`, and an `atomic-result-children` must be the parent of each `atomic-result-children-template`.
     * Note: Any `<script>` tags defined inside of a `<template>` element will not be executed when results are being rendered.
     * @MapProp name: mustMatch;attr: must-match;docs: The field and values that define which result items the condition must be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is `lithiummessage` or `YouTubePlaylist`: `must-match-filetype="lithiummessage,YouTubePlaylist"`;type: Record<string, string[]> ;default: {}
     * @MapProp name: mustNotMatch;attr: must-not-match;docs: The field and values that define which result items the condition must not be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is not `lithiummessage`: `must-not-match-filetype="lithiummessage";type: Record<string, string[]> ;default: {}
     */
    interface AtomicResultChildrenTemplate {
        /**
          * A function that must return true on results for the result template to apply. Set programmatically before initialization, not via attribute.  For example, the following targets a template and sets a condition to make it apply only to results whose `title` contains `singapore`: `document.querySelector('#target-template').conditions = [(result) => /singapore/i.test(result.title)];`
         */
        "conditions": ResultTemplateCondition[];
        /**
          * Gets the appropriate result template based on conditions applied.
         */
        "getTemplate": () => Promise<ResultTemplate<DocumentFragment> | null>;
    }
    /**
     * The `atomic-result-date` component renders the value of a date result field.
     */
    interface AtomicResultDate {
        /**
          * The result field which the component should use. This will look for the field in the Result object first, and then in the Result.raw object. It is important to include the necessary field in the `atomic-search-interface` component.
         */
        "field": string;
        /**
          * Available formats: https://day.js.org/docs/en/display/format
         */
        "format": string;
        /**
          * Whether the date should display in the [relative time format](https://day.js.org/docs/en/plugin/calendar).  To modify the relative time string, use the [localization feature](https://docs.coveo.com/en/atomic/latest/usage/atomic-localization/).
         */
        "relativeTime"?: boolean;
    }
    /**
     * The `atomic-result-fields-list` component selectively renders its children to ensure they fit the parent element and adds dividers between them.
     */
    interface AtomicResultFieldsList {
    }
    /**
     * The `atomic-result-html` component renders the HTML value of a string result field.
     * There is an inherent XSS security concern associated with the usage of this component.
     * Use only with fields for which you are certain the data is harmless.
     */
    interface AtomicResultHtml {
        /**
          * The result field which the component should use. If set, Atomic searches for the specified field in the `Result` object first. If there's no such a field, Atomic searches through the `Result.raw` object. It's important to include the necessary field in the `ResultList` component.
         */
        "field": string;
        /**
          * Specify if the content should be sanitized, using [`DOMPurify`](https://www.npmjs.com/package/dompurify).
         */
        "sanitize": boolean;
    }
    /**
     * The `atomic-result-icon` component outputs the corresponding icon for a given file type.
     * The component searches for a suitable icon, or outputs a generic icon if the search is unsuccessful.
     */
    interface AtomicResultIcon {
    }
    /**
     * The `atomic-result-image` component renders an image from a result field.
     */
    interface AtomicResultImage {
        /**
          * An optional fallback image URL that will be used in case the specified image field is not available or encounters an error.
         */
        "fallback"?: string;
        /**
          * The result field which the component should use. This will look for the field in the Result object first, then in the Result.raw object. It is important to include the necessary field in the `atomic-search-interface` component.
         */
        "field": string;
    }
    /**
     * The `atomic-result-link` component automatically transforms a search result title into a clickable link that points to the original item.
     */
    interface AtomicResultLink {
        /**
          * Specifies a template literal from which to generate the `href` attribute value (see [Template literals](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals)).  The template literal can reference any number of result properties from the parent result. It can also reference the window object.  For example, the following markup generates an `href` value such as `http://uri.com?id=itemTitle`, using the result's `clickUri` and `itemtitle` fields. ```html <atomic-result-link href-template='${clickUri}?id=${raw.itemtitle}'></atomic-result-link> ```
         */
        "hrefTemplate"?: string;
    }
    /**
     * The `atomic-result-list` component is responsible for displaying query results by applying one or more result templates.
     */
    interface AtomicResultList {
        /**
          * The spacing of various elements in the result list, including the gap between results, the gap between parts of a result, and the font sizes of different parts in a result.
         */
        "density": ItemDisplayDensity;
        /**
          * The desired layout to use when displaying results. Layouts affect how many results to display per row and how visually distinct they are from each other.
         */
        "display": ItemDisplayLayout;
        /**
          * The target location to open the result link (see [target](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#target)). This property is only leveraged when `display` is `grid`.
          * @defaultValue `_self`
         */
        "gridCellLinkTarget": ItemTarget;
        /**
          * The expected size of the image displayed in the results.
         */
        "imageSize": ItemDisplayImageSize;
        /**
          * Sets a rendering function to bypass the standard HTML template mechanism for rendering results. You can use this function while working with web frameworks that don't use plain HTML syntax, e.g., React, Angular or Vue.  Do not use this method if you integrate Atomic in a plain HTML deployment.
          * @param resultRenderingFunction
         */
        "setRenderFunction": (resultRenderingFunction: ItemRenderingFunction) => Promise<void>;
    }
    /**
     * The `atomic-result-localized-text` component renders a target i18n localized string using the values of a target field.
     * Given this i18n configuration:
     * ```
     * searchInterface.i18n.addResourceBundle('en', 'translation', {
     *    classic_book_advert: 'Classic book from {{name}}',
     * });
     * ```
     * The component could be configured in such a way to replace `{{name}}` with the `author` field value from the result item:
     * ```
     * <atomic-result-localized-text locale-key="classic_book_advert" field-author="name"></atomic-result-localized-text>
     * ```
     * @MapProp name: field;attr: field;docs: The field from which to extract the target string and the variable used to map it to the target i18n parameter. For example, the following configuration extracts the value of `author` from a result, and assign it to the i18n parameter `name`: `field-author="name"`;type: Record<string, string> ;default: {}
     */
    interface AtomicResultLocalizedText {
        /**
          * The numerical field value used to determine whether to use the singular or plural value of a translation.
         */
        "fieldCount"?: string;
        /**
          * The i18n translation key.
         */
        "localeKey": string;
    }
    /**
     * The `atomic-result-multi-value-text` component renders the values of a multi-value string field.
     */
    interface AtomicResultMultiValueText {
        /**
          * The delimiter used to separate values when the field isn't indexed as a multi value field.
         */
        "delimiter": string | null;
        /**
          * The field that the component should use. The component will try to find this field in the `Result.raw` object unless it finds it in the `Result` object first. Make sure this field is present in the `fieldsToInclude` property of the `atomic-search-interface` component.
         */
        "field": string;
        /**
          * The maximum number of field values to display. If there are _n_ more values than the specified maximum, the last displayed value will be "_n_ more...".
         */
        "maxValuesToDisplay": number;
    }
    /**
     * The `atomic-result-number` component renders the value of a number result field.
     * The number can be formatted by adding a `atomic-format-number`, `atomic-format-currency` or `atomic-format-unit` component into this component.
     */
    interface AtomicResultNumber {
        /**
          * The field that the component should use. The component will try to find this field in the `Result.raw` object unless it finds it in the `Result` object first. Make sure this field is present in the `fieldsToInclude` property of the `atomic-search-interface` component.
         */
        "field": string;
    }
    /**
     * The `atomic-result-placeholder` component provides an intermediate visual state that is rendered before the first results are available.
     */
    interface AtomicResultPlaceholder {
        "density": ItemDisplayDensity;
        "display": ItemDisplayLayout;
        "imageSize": ItemDisplayImageSize;
    }
    /**
     * The `atomic-result-printable-uri` component displays the URI, or path, to access a result.
     */
    interface AtomicResultPrintableUri {
        /**
          * The maximum number of Uri parts to display. This has to be over the minimum of `3` in order to be effective. Putting `Infinity` will disable the ellipsis.
         */
        "maxNumberOfParts": number;
    }
    /**
     * The `atomic-result-rating` element renders a star rating.
     */
    interface AtomicResultRating {
        /**
          * The field whose values you want to display as a rating.
         */
        "field": string;
        /**
          * The SVG icon to use to display the rating.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly.  When using a custom icon, at least part of your icon should have the color set to `fill="currentColor"`. This part of the SVG will take on the colors set in the following [variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties):  - `--atomic-rating-icon-active-color` - `--atomic-rating-icon-inactive-color`
         */
        "icon": string;
        /**
          * The maximum value of the field. This value is also used as the number of icons to be displayed.
         */
        "maxValueInIndex": number;
    }
    /**
     * This section allows the information seeker to perform an action on an item without having to view its details.
     * For example, in Commerce you can add an item to the cart directly or add it to a wish list to view at a later time.
     * Behavior:
     * * Exposes the `--line-height` CSS variable so child elements can adjust to the current line height.
     * ** You should ensure that elements inside of it have `height: var(--line-height)`.
     * * Is a wrapping flexbox with a gap.
     * * May appear over, next to, or beneath the visual section.
     */
    interface AtomicResultSectionActions {
    }
    /**
     * This section provides badges that highlight special features of the item.
     * Behavior:
     * * Exposes the `--line-height` CSS variable so child elements can adjust to the current line height.
     * ** You should ensure that elements inside of it have `height: var(--line-height)`.
     * * Is a wrapping flexbox with a gap.
     * * May appear over, next to, or beneath the visual section.
     */
    interface AtomicResultSectionBadges {
    }
    /**
     * This section displays additional descriptive information about the item.
     * Behavior:
     * * Has a maximum height of two lines.
     * ** We recommend that you use `atomic-result-fields-list` to ensure that the fields in this section don’t overflow.
     * * Exposes the `--line-height` variable so child elements can adjust to the current line height.
     * * Has a defined CSS `color` property for text.
     * * Has a font weight.
     */
    interface AtomicResultSectionBottomMetadata {
    }
    /**
     * This section displays the folded results, available when using the <atomic-result-children> component.
     * Behavior:
     * * Shows children at the bottom of the result, indented and wrapped in a border.
     */
    interface AtomicResultSectionChildren {
    }
    /**
     * This section displays the field that's important for its search criteria.
     * For example, in Commerce, a product's cost is often more important than the title itself.
     * Behavior:
     * * Has a very large font size.
     * * Is the second closest element beneath the title section.
     */
    interface AtomicResultSectionEmphasized {
    }
    /**
     * This section contains an informative summary of the item's content.
     * Behavior:
     * * Has a fixed height of one to three lines, depending on the layout and density.
     * * Ellipses overflowing text.
     * * Exposes the `--line-height` CSS variable so child elements can adjust to the current line height.
     * * Has a defined CSS `color` property for text.
     */
    interface AtomicResultSectionExcerpt {
    }
    /**
     * This section identifies the item by its name, and its main use is to make the result list scannable.
     * This is usually the page title.
     * Behavior:
     * * Has a fixed height of two lines on grid layouts.
     * * Exposes the `--line-height` CSS variable so child elements can adjust to the current line height.
     * * Has a defined CSS `color` property for text.
     */
    interface AtomicResultSectionTitle {
    }
    /**
     * This section surfaces some fields that are directly related to the title of the item.
     * For example, in Commerce, this could be the item's rating, which is tied to the nature of the product itself,
     * rather than to the product's description.
     * Behavior:
     * * Has a very small font size.
     * * Is the closest element beneath the title section.
     */
    interface AtomicResultSectionTitleMetadata {
    }
    /**
     * This section provides visual information about the item.
     * For example, in Commerce, an image is a great shorthand for a product category.
     * An icon can quickly show the item type, or an avatar can help identify to whom it is related.
     * Behavior:
     * * Has a fixed size that depends on the specified image size, the layout, the density, and the screen size.
     * ** When the image size is set to `icon`, this section stays very small.
     * ** You should ensure that elements inside of it take the available space.
     * * Always has a 1:1 aspect ratio.
     */
    interface AtomicResultSectionVisual {
        /**
          * How large or small the visual section of results using this template should be.
         */
        "imageSize"?: ItemDisplayImageSize;
    }
    /**
     * The `atomic-result-table-placeholder` component provides an intermediate visual state that is rendered before the first results are available.
     */
    interface AtomicResultTablePlaceholder {
        "density": ItemDisplayDensity;
        "imageSize": ItemDisplayImageSize;
        "rows": number;
    }
    /**
     * A [result template](https://docs.coveo.com/en/atomic/latest/usage/displaying-results#defining-a-result-template) determines the format of the query results, depending on the conditions that are defined for each template.
     * A `template` element must be the child of an `atomic-result-template`, and either an `atomic-result-list` or `atomic-folded-result-list` must be the parent of each `atomic-result-template`.
     * **Note:** Any `<script>` tags that are defined inside a `<template>` element will not be executed when the results are being rendered.
     * @MapProp name: mustMatch;attr: must-match;docs: The field and values that define which result items the condition must be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is `lithiummessage` or `YouTubePlaylist`: `must-match-filetype="lithiummessage,YouTubePlaylist"`;type: Record<string, string[]> ;default: {}
     * @MapProp name: mustNotMatch;attr: must-not-match;docs: The field and values that define which result items the condition must not be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is not `lithiummessage`: `must-not-match-filetype="lithiummessage";type: Record<string, string[]> ;default: {}
     */
    interface AtomicResultTemplate {
        /**
          * A function that must return true on results for the result template to apply. Set programmatically before initialization, not via attribute.  For example, the following targets a template and sets a condition to make it apply only to results whose `title` contains `singapore`: `document.querySelector('#target-template').conditions = [(result) => /singapore/i.test(result.title)];`
         */
        "conditions": ResultTemplateCondition[];
        /**
          * Gets the appropriate result template based on conditions applied.
         */
        "getTemplate": () => Promise<ResultTemplate<DocumentFragment> | null>;
    }
    /**
     * The `atomic-result-text` component renders the value of a string result field.
     */
    interface AtomicResultText {
        /**
          * The locale key for the text to display when the configured field has no value.
         */
        "default"?: string;
        /**
          * The result field which the component should use. This will look in the Result object first, and then in the Result.raw object for the fields. It is important to include the necessary field in the `atomic-search-interface` component.
         */
        "field": string;
        /**
          * If this is set to true, it will look for the corresponding highlight property and use it if available.
         */
        "shouldHighlight": boolean;
    }
    /**
     * The `atomic-result-timespan` component renders a target result number field value as a duration.
     */
    interface AtomicResultTimespan {
        /**
          * The target result field. The component first looks for the field in the Result object, and then in the Result.raw object. It is important to include the necessary field in the `atomic-search-interface` component.
         */
        "field": string;
        /**
          * The format to apply to the result field value.  By default, the format is HH:mm:ss when the duration is under a day, and it is an approximation when longer (days, months or years).  The string displayed when there is an approximation can be modified with [localization](https://docs.coveo.com/en/atomic/latest/usage/atomic-localization/).  Available formats: https://day.js.org/docs/en/durations/format
         */
        "format"?: string;
        /**
          * The unit of measurement of the field value. Available units: https://day.js.org/docs/en/durations/creating
         */
        "unit": string;
    }
    /**
     * The `atomic-results-per-page` component determines how many results to display per page.
     */
    interface AtomicResultsPerPage {
        /**
          * A list of choices for the number of results to display per page, separated by commas.
         */
        "choicesDisplayed": string;
        /**
          * The initial selection for the number of result per page. This should be part of the `choicesDisplayed` option. By default, this is set to the first value in `choicesDisplayed`.
         */
        "initialChoice"?: number;
    }
    /**
     * The `atomic-search-box` component creates a search box with built-in support for suggestions.
     */
    interface AtomicSearchBox {
        /**
          * Whether to clear all active query filters when the end user submits a new query from the search box. Setting this option to "false" is not recommended & can lead to an increasing number of queries returning no results.
         */
        "clearFilters": boolean;
        /**
          * Whether to prevent the user from triggering searches and query suggestions from the component. Perfect for use cases where you need to disable the search conditionally. For the specific case when you need to disable the search based on the length of the query, refer to {@link minimumQueryLength}.
         */
        "disableSearch": boolean;
        /**
          * Whether to interpret advanced [Coveo Cloud query syntax](https://docs.coveo.com/en/1814/) in the query. You should only enable query syntax in the search box if you have good reasons to do so, as it requires end users to be familiar with Coveo Cloud query syntax, otherwise they will likely be surprised by the search box behaviour.  When the `redirection-url` property is set and redirects to a page with more `atomic-search-box` components, all `atomic-search-box` components need to have the same `enable-query-syntax` value.
         */
        "enableQuerySyntax": boolean;
        /**
          * The minimum query length required to enable search. For example, to disable the search for empty queries, set this to `1`.
         */
        "minimumQueryLength": number;
        /**
          * The amount of queries displayed when the user interacts with the search box. By default, a mix of query suggestions and recent queries will be shown. You can configure those settings using the following components as children:  - atomic-search-box-query-suggestions  - atomic-search-box-recent-queries
         */
        "numberOfQueries": number;
        /**
          * Defining this option makes the search box standalone (see [Use a Standalone Search Box](https://docs.coveo.com/en/atomic/latest/usage/ssb/)).  This option defines the default URL the user should be redirected to, when a query is submitted. If a query pipeline redirect is triggered, it will redirect to that URL instead (see [query pipeline triggers](https://docs.coveo.com/en/1458)).
         */
        "redirectionUrl"?: string;
        /**
          * The delay for suggestion queries on input, in milliseconds.  The suggestion request will be delayed until the end user stops typing for at least the specified amount of time.  This delay is used to avoid sending too many requests to the Coveo Platform when the user is typing, as well as reducing potential input lag on low end devices. A higher delay will reduce input lag, at the cost of suggestions freshness.
         */
        "suggestionDelay": number;
        /**
          * The timeout for suggestion queries, in milliseconds. If a suggestion query times out, the suggestions from that particular query won't be shown.
         */
        "suggestionTimeout": number;
        /**
          * Whether to render the search box using a [textarea](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea) element. The resulting component will expand to support multi-line queries. When customizing the dimensions of the textarea element using the `"textarea"` CSS part, it is important to also apply the styling to its container's ::after pseudo-element as well as the `"textarea-spacer"` part. The buttons within the search box are likely to need adjusting as well.  Example: ```css <style>   atomic-search-box::part(textarea),   atomic-search-box::part(textarea-expander)::after,   atomic-search-box::part(textarea-spacer) {     font-size: x-large;   }    atomic-search-box::part(submit-button-wrapper),   atomic-search-box::part(clear-button-wrapper) {     padding-top: 0.75rem;   } </style> ```  NB: The textarea functionality will be enforced on the next major version of Atomic (3.0.0)
         */
        "textarea": boolean;
    }
    /**
     * The `atomic-search-box-instant-results` component can be added as a child of an `atomic-search-box` component, allowing for the configuration of instant results behavior.
     * This component does not support accessibility out-of-the-box. To do so, see [Instant Results Accessibility](https://docs.coveo.com/en/atomic/latest/usage/accessibility/#instant-results-accessibility).
     * This component is not supported on mobile.
     */
    interface AtomicSearchBoxInstantResults {
        /**
          * The callback to generate an [`aria-label`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-label) for a given result so that accessibility tools can fully describe what's visually rendered by a result.  By default, or if an empty string is returned, `result.title` is used.
         */
        "ariaLabelGenerator"?: AriaLabelGenerator;
        /**
          * The spacing of various elements in the result list, including the gap between results, the gap between parts of a result, and the font sizes of different parts in a result.
         */
        "density": ItemDisplayDensity;
        /**
          * The expected size of the image displayed in the results.
         */
        "imageSize": ItemDisplayImageSize;
        /**
          * The maximum number of results to show.
         */
        "maxResultsPerQuery": number;
        /**
          * Sets a rendering function to bypass the standard HTML template mechanism for rendering results. You can use this function while working with web frameworks that don't use plain HTML syntax, e.g., React, Angular or Vue.  Do not use this method if you integrate Atomic in a plain HTML deployment.
          * @param resultRenderingFunction
         */
        "setRenderFunction": (resultRenderingFunction: ItemRenderingFunction) => Promise<void>;
    }
    /**
     * The `atomic-search-box-query-suggestions` component can be added as a child of an `atomic-search-box` component, allowing for the configuration of query suggestion behavior.
     */
    interface AtomicSearchBoxQuerySuggestions {
        /**
          * The SVG icon to display.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly.
         */
        "icon"?: string;
        /**
          * The maximum number of suggestions that will be displayed if the user has typed something into the input field.
         */
        "maxWithQuery"?: number;
        /**
          * The maximum number of suggestions that will be displayed initially when the input field is empty.
         */
        "maxWithoutQuery"?: number;
    }
    /**
     * The `atomic-search-box-recent-queries` component can be added as a child of an `atomic-search-box` component, allowing for the configuration of recent query suggestions.
     */
    interface AtomicSearchBoxRecentQueries {
        /**
          * The SVG icon to display.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly.
         */
        "icon"?: string;
        /**
          * The maximum number of suggestions that will be displayed if the user has typed something into the input field.
         */
        "maxWithQuery": number;
        /**
          * The maximum number of suggestions that will be displayed initially when the input field is empty.
         */
        "maxWithoutQuery"?: number;
    }
    /**
     * The `atomic-search-interface` component is the parent to all other atomic components in a search page. It handles the headless search engine and localization configurations.
     */
    interface AtomicSearchInterface {
        /**
          * The value to set the [nonce](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce) attribute to on inline script and style elements generated by this interface and its child components. If your application is served with a Content Security Policy (CSP) that doesn't include the `script-src: 'unsafe-inline'` or `style-src: 'unsafe-inline'` directives, you should ensure that your application server generates a new nonce on every page load and uses the generated value to set this prop and serve the corresponding CSP response headers (i.e., script-src 'nonce-<YOUR_GENERATED_NONCE>' and style-src 'nonce-<YOUR_GENERATED_NONCE>'). Otherwise you may see console errors such as  - Refused to execute inline script because it violates the following Content Security Policy directive: [...]  - Refused to apply inline style because it violates the following Content Security Policy directive: [...].
          * @example : ```html <script nonce="<YOUR_GENERATED_NONCE>"> import {setNonce} from '@coveo/atomic'; setNonce('<YOUR_GENERATED_NONCE>'); </script> ```
         */
        "CspNonce"?: string;
        /**
          * Whether analytics should be enabled.
         */
        "analytics": boolean;
        /**
          * Whether the relevance inspector shortcut should be enabled for this interface.  The relevance inspector can be opened by holding the Alt key (Option on Mac) while over the interface, and performing a double click.  The relevance inspector allows to troubleshoot and debug queries.
         */
        "enableRelevanceInspector": boolean;
        /**
          * The search interface headless engine.
         */
        "engine"?: SearchEngine;
        /**
          * Executes the first search and logs the interface load event to analytics, after initializing connection to the headless search engine.
         */
        "executeFirstSearch": () => Promise<void>;
        /**
          * A list of non-default fields to include in the query results.  Specify the property as an array using a JSON string representation: ```html <atomic-search-interface fields-to-include='["fieldA", "fieldB"]'></atomic-search-interface> ```
         */
        "fieldsToInclude": string[] | string;
        /**
          * Returns the unique, organization-specific endpoint(s).
          * @param organizationId
          * @param env
         */
        "getOrganizationEndpoints": (organizationId: string, env?: PlatformEnvironment2) => Promise<{ platform: string; analytics: string; search: string; admin: string; }>;
        /**
          * The search interface i18next instance.
         */
        "i18n": i18n;
        /**
          * The icon assets path. By default, this will be a relative URL pointing to `./assets`.  Example: "/mypublicpath/icons"
         */
        "iconAssetsPath": string;
        /**
          * Initializes the connection with the headless search engine using options for accessToken (required), organizationId (required), renewAccessToken, organizationEndpoints (recommended), and platformUrl (deprecated).
         */
        "initialize": (options: InitializationOptions) => Promise<void>;
        /**
          * Initializes the connection with an already preconfigured [headless search engine](https://docs.coveo.com/en/headless/latest/reference/search/), as opposed to the `initialize` method, which will internally create a new search engine instance. This bypasses the properties set on the component, such as analytics, searchHub, pipeline, language, timezone & logLevel.
         */
        "initializeWithSearchEngine": (engine: SearchEngine) => Promise<void>;
        /**
          * The search interface language.
         */
        "language": string;
        /**
          * The language assets path. By default, this will be a relative URL pointing to `./lang`.  Example: "/mypublicpath/languages"
         */
        "languageAssetsPath": string;
        /**
          * The compatibility JSON version for i18next to use (see [i18next Migration Guide](https://www.i18next.com/misc/migration-guide#v20.x.x-to-v21.0.0)).
         */
        "localizationCompatibilityVersion": i18nCompatibilityVersion;
        /**
          * The severity level of the messages to log in the console.
         */
        "logLevel"?: LogLevel1;
        /**
          * The search interface [query pipeline](https://docs.coveo.com/en/180/).  If the search interface is initialized using [`initializeWithSearchEngine`](https://docs.coveo.com/en/atomic/latest/reference/components/atomic-search-interface/#initializewithsearchengine), the query pipeline should instead be configured in the target engine.
         */
        "pipeline"?: string;
        /**
          * Whether the state should be reflected in the URL parameters.
         */
        "reflectStateInUrl": boolean;
        /**
          * The CSS selector for the container where the interface will scroll back to.
         */
        "scrollContainer": string;
        /**
          * The search interface [search hub](https://docs.coveo.com/en/1342/).  If the search interface is initialized using [`initializeWithSearchEngine`](https://docs.coveo.com/en/atomic/latest/reference/components/atomic-search-interface/#initializewithsearchengine, the search hub should instead be configured in the target engine.
         */
        "searchHub"?: string;
        /**
          * The [tz database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) identifier of the time zone to use to correctly interpret dates in the query expression, facets, and result items. By default, the timezone will be [guessed](https://day.js.org/docs/en/timezone/guessing-user-timezone).  Example: "America/Montreal"
         */
        "timezone"?: string;
    }
    /**
     * The `atomic-search-layout` helps organize elements in the page.
     */
    interface AtomicSearchLayout {
        /**
          * CSS value that defines where the layout goes from mobile to desktop. e.g., 800px, 65rem.
         */
        "mobileBreakpoint": string;
    }
    /**
     * The `atomic-segmented-facet` displays a horizontal facet of the results for the current query.
     */
    interface AtomicSegmentedFacet {
        /**
          * Specifies an explicit list of `allowedValues` in the Search API request. This list is in the form of a JSON string.  If you specify a list of values for this option, the facet only uses these values (if they are available in the current result set).  Example:  The following facet only uses the `Contact`, `Account`, and `File` values of the `objecttype` field. Even if the current result set contains other `objecttype` values, such as `Message` or `Product`, the facet does not use them.  ```html <atomic-segmented-facet field="objecttype" allowed-values='["Contact","Account","File"]'></atomic-segmented-facet> ```  The maximum amount of allowed values is 25.  The default value is `undefined`, and the facet uses all available values for its `field` in the current result set.
         */
        "allowedValues": string[] | string;
        /**
          * Identifies the facet values that must appear at the top, in this order. This parameter can be used in conjunction with the `sortCriteria` parameter.  Facet values not part of the `customSort` list will be sorted according to the `sortCriteria`.  Example:  The following facet will sort the `Contact`, `Account`, and `File` values at the top of the list for the `objecttype` field.  If there are more than these 3 values available, the rest of the list will be sorted using `occurrences`.  ```html <atomic-segmented-facet field="objecttype" custom-sort='["Contact","Account","File"]' sort-criteria='occurrences'></atomic-segmented-facet> ``` The maximum amount of custom sort values is 25.  The default value is `undefined`, and the facet values will be sorted using only the `sortCriteria`.
         */
        "customSort": string[] | string;
        /**
          * The required facets and values for this facet to be displayed. Examples: ```html <atomic-segmented-facet facet-id="abc" field="objecttype" ...></atomic-segmented-facet>  <!-- To show the facet when any value is selected in the facet with id "abc": --> <atomic-segmented-facet   depends-on-abc   ... ></atomic-segmented-facet>  <!-- To show the facet when value "doc" is selected in the facet with id "abc": --> <atomic-facet   depends-on-abc="doc"   ... ></atomic-segmented-facet> ```
         */
        "dependsOn": Record<string, string>;
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Whether to exclude the parents of folded results when estimating the result count for each facet value.
         */
        "filterFacetCount": boolean;
        /**
          * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values. Note: A high injectionDepth may negatively impact the facet request performance. Minimum: `0` Default: `1000`
         */
        "injectionDepth": number;
        /**
          * The non-localized label for the facet. Used in the `atomic-breadbox` component through the bindings store.
         */
        "label"?: string;
        /**
          * The number of values to request for this facet. Also determines the number of additional values to request each time more values are shown.
         */
        "numberOfValues": number;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are 'score', 'alphanumeric', 'occurrences', and 'automatic'.
         */
        "sortCriteria": FacetSortCriterion;
    }
    /**
     * The 'atomic-segmented-facet-scrollable' component wraps around one or several 'atomic-segmented-facet' to provide horizontal scrolling capabilities.
     */
    interface AtomicSegmentedFacetScrollable {
    }
    /**
     * The `atomic-smart-snippet` component displays the excerpt of a document that would be most likely to answer a particular query.
     * You can style the snippet by inserting a template element as follows:
     * ```html
     * <atomic-smart-snippet>
     *   <template>
     *     <style>
     *       b {
     *         color: blue;
     *       }
     *     </style>
     *   </template>
     * </atomic-smart-snippet>
     * ```
     */
    interface AtomicSmartSnippet {
        /**
          * When the answer is partly hidden, how much of its height (in pixels) should be visible.
         */
        "collapsedHeight": number;
        /**
          * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the question at the top of the snippet, from 1 to 5.
         */
        "headingLevel": number;
        /**
          * The maximum height (in pixels) a snippet can have before the component truncates it and displays a "show more" button.
         */
        "maximumHeight": number;
        "snippetCollapsedHeight"?: number;
        "snippetMaximumHeight"?: number;
        /**
          * Sets the style of the snippet.  Example: ```ts smartSnippet.snippetStyle = `   b {     color: blue;   } `; ```
         */
        "snippetStyle"?: string;
    }
    interface AtomicSmartSnippetAnswer {
        "htmlContent": string;
        "innerStyle"?: string;
    }
    interface AtomicSmartSnippetCollapseWrapper {
        "collapsedHeight"?: number;
        "maximumHeight"?: number;
    }
    interface AtomicSmartSnippetExpandableAnswer {
        /**
          * When the answer is partly hidden, how much of its height (in pixels) should be visible.
         */
        "collapsedHeight": number;
        "expanded": boolean;
        "htmlContent": string;
        /**
          * The maximum height (in pixels) a snippet can have before the component truncates it and displays a "show more" button.
         */
        "maximumHeight": number;
        /**
          * Sets the style of the snippet.  Example: ```ts expandableAnswer.snippetStyle = `   b {     color: blue;   } `; ```
         */
        "snippetStyle"?: string;
    }
    /**
     * The `atomic-smart-snippet-feedback-modal` is automatically created as a child of the `atomic-search-interface` when the `atomic-smart-snippet` is initialized.
     * When the modal is opened, the class `atomic-modal-opened` is added to the body, allowing further customization.
     */
    interface AtomicSmartSnippetFeedbackModal {
        "isOpen": boolean;
        "source"?: HTMLElement;
    }
    interface AtomicSmartSnippetSource {
        "anchorAttributes"?: Attr[];
        "source": Result;
    }
    /**
     * The `atomic-smart-snippet-suggestions-suggestions` component displays an accordion of questions related to the query with their corresponding answers.
     * You can style the snippets by inserting a template element like this:
     * ```html
     * <atomic-smart-snippet-suggestions>
     *   <template>
     *     <style>
     *       b {
     *         color: blue;
     *       }
     *     </style>
     *   </template>
     * </atomic-smart-snippet-suggestions>
     * ```
     */
    interface AtomicSmartSnippetSuggestions {
        /**
          * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the "People also ask" heading over the snippets, from 1 to 5.
         */
        "headingLevel": number;
        /**
          * Sets the style of the snippets.  Example: ```ts smartSnippet.snippetStyle = `   b {     color: blue;   } `; ```
         */
        "snippetStyle"?: string;
    }
    /**
     * The `atomic-sort-dropdown` component renders a dropdown that the end user can interact with to select the criteria to use when sorting query results.
     */
    interface AtomicSortDropdown {
    }
    /**
     * The `atomic-sort-expression` component defines a sort expression. This component must be inside an `atomic-sort-dropdown` component.
     */
    interface AtomicSortExpression {
        /**
          * One or more sort criteria that the end user can select or toggle between.  The available sort criteria are:  * `relevancy` * `date ascending`/`date descending` * `qre` * `<FIELD> ascending`/`<FIELD> descending`, where you replace `<FIELD>` with the name of a sortable field in your index (e.g., `criteria="size ascending"`).  You can specify multiple sort criteria to be used in the same request by separating them with a comma (e.g., `criteria="size ascending, date ascending"`).
         */
        "expression": string;
        /**
          * The non-localized label to display for this expression.
         */
        "label": string;
    }
    /**
     * The `atomic-table-element` element defines a table column in a result list.
     */
    interface AtomicTableElement {
        /**
          * The label to display in the header of this column.
         */
        "label": string;
    }
    /**
     * The `atomic-text` component leverages the I18n translation module through the atomic-search-interface.
     */
    interface AtomicText {
        /**
          * The count value used for plurals.
         */
        "count"?: number;
        /**
          * The string key value.
         */
        "value": string;
    }
    /**
     * The `atomic-timeframe` component defines a timeframe of an `atomic-timeframe-facet`, and therefore must be defined within an `atomic-timeframe-facet` component.
     * A timeframe is a span of time from now to a specific time in the past.
     */
    interface AtomicTimeframe {
        /**
          * The amount of units from which to count.  E.g., 10 days, 1 year, etc.
         */
        "amount": number;
        /**
          * The non-localized label for the timeframe. When defined, it will appear instead of the formatted value. Used in the `atomic-breadbox` component through the bindings store.
         */
        "label"?: string;
        /**
          * The relative period of time to now.
         */
        "period": 'past' | 'next';
        /**
          * The unit used to define: - the start date of the timeframe, if the period is `past` - the end date of the timeframe, if the period is `future`
         */
        "unit": RelativeDateUnit;
    }
    /**
     * A facet is a list of values for a certain field occurring in the results.
     * An `atomic-timeframe-facet` displays a facet of the results for the current query as date intervals.
     */
    interface AtomicTimeframeFacet {
        /**
          * The required facets and values for this facet to be displayed. Examples: ```html <atomic-facet facet-id="abc" field="objecttype" ...></atomic-facet>  <!-- To show the facet when any value is selected in the facet with id "abc": --> <atomic-timeframe-facet   depends-on-abc   ... ></atomic-timeframe-facet>  <!-- To show the facet when value "doc" is selected in the facet with id "abc": --> <atomic-timeframe-facet   depends-on-abc="doc"   ... ></atomic-timeframe-facet> ```
         */
        "dependsOn": Record<string, string>;
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Whether to exclude the parents of folded results when estimating the result count for each facet value.
         */
        "filterFacetCount": boolean;
        /**
          * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.
         */
        "headingLevel": number;
        /**
          * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values. Note: A high injectionDepth may negatively impact the facet request performance. Minimum: `0` Default: `1000`
         */
        "injectionDepth": number;
        /**
          * Specifies whether the facet is collapsed. When the facet is the child of an `atomic-facet-manager` component, the facet manager controls this property.
         */
        "isCollapsed": boolean;
        /**
          * The non-localized label for the facet. Used in the atomic-breadbox component through the bindings store.
         */
        "label": string;
        /**
          * The latest date to accept from user input when the `withDatepicker` option is enabled.  This value must be a valid date string in the format `YYYY-MM-DD`.  If this format is not respected, the date picker ignores this property, behaving as if no `max` value had been set.  See also [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date#max).
         */
        "max"?: string;
        /**
          * The earliest date to accept from user input when the `withDatepicker` option is enabled.  This value must be a valid date string in the format `YYYY-MM-DD`.  If this format is not respected, the date picker ignores this property, behaving as if no `min` value had been set.  See also [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date#min).
         */
        "min"?: string;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are 'ascending' and 'descending'.
         */
        "sortCriteria": RangeFacetSortCriterion;
        /**
          * Whether this facet should contain an datepicker allowing users to set custom ranges.
         */
        "withDatePicker": boolean;
    }
    interface TabBar {
    }
    interface TabPopover {
        "setButtonVisibility": (isVisible: boolean) => Promise<void>;
        "togglePopover": () => Promise<void>;
    }
}
export interface AtomicCommercePagerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtomicCommercePagerElement;
}
export interface AtomicCommerceSearchBoxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtomicCommerceSearchBoxElement;
}
export interface AtomicFacetDateInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtomicFacetDateInputElement;
}
export interface AtomicFacetNumberInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtomicFacetNumberInputElement;
}
export interface AtomicFocusDetectorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtomicFocusDetectorElement;
}
export interface AtomicGeneratedAnswerFeedbackModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtomicGeneratedAnswerFeedbackModalElement;
}
export interface AtomicInsightPagerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtomicInsightPagerElement;
}
export interface AtomicInsightResultActionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtomicInsightResultActionElement;
}
export interface AtomicInsightSmartSnippetFeedbackModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtomicInsightSmartSnippetFeedbackModalElement;
}
export interface AtomicIpxBodyCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtomicIpxBodyElement;
}
export interface AtomicIpxEmbeddedCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtomicIpxEmbeddedElement;
}
export interface AtomicIpxModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtomicIpxModalElement;
}
export interface AtomicModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtomicModalElement;
}
export interface AtomicPagerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtomicPagerElement;
}
export interface AtomicQuickviewModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtomicQuickviewModalElement;
}
export interface AtomicRelevanceInspectorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtomicRelevanceInspectorElement;
}
export interface AtomicResultsPerPageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtomicResultsPerPageElement;
}
export interface AtomicSearchBoxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtomicSearchBoxElement;
}
export interface AtomicSmartSnippetAnswerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtomicSmartSnippetAnswerElement;
}
export interface AtomicSmartSnippetExpandableAnswerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtomicSmartSnippetExpandableAnswerElement;
}
export interface AtomicSmartSnippetFeedbackModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtomicSmartSnippetFeedbackModalElement;
}
export interface AtomicSmartSnippetSourceCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtomicSmartSnippetSourceElement;
}
declare global {
    /**
     * The `atomic-aria-live` component notifies screen readers of changes in the search interface.
     */
    interface HTMLAtomicAriaLiveElement extends Components.AtomicAriaLive, HTMLStencilElement {
    }
    var HTMLAtomicAriaLiveElement: {
        prototype: HTMLAtomicAriaLiveElement;
        new (): HTMLAtomicAriaLiveElement;
    };
    /**
     * An automatic facet is a special type of facet generated by the automatic facets feature.
     * Unlike regular facets, which need to be explicitly defined and requested in the query,
     * automatic facets are dynamically generated by the index in response to the query.
     * **Note:** This component should never be used on its own. It is used internally by the `atomic-automatic-facet-generator`
     * component to automatically render updated facets. However, you can use the shadow parts to style the automatically generated facets.
     * To learn more about the automatic facet generator feature, see: [About the Facet Generator](https://docs.coveo.com/en/n9sd0159/).
     */
    interface HTMLAtomicAutomaticFacetElement extends Components.AtomicAutomaticFacet, HTMLStencilElement {
    }
    var HTMLAtomicAutomaticFacetElement: {
        prototype: HTMLAtomicAutomaticFacetElement;
        new (): HTMLAtomicAutomaticFacetElement;
    };
    /**
     * The `atomic-automatic-facet-generator` is a component that renders the facets from
     * the automatic facets feature. Unlike regular facets, which need to be explicitly defined
     * and requested in the query, automatic facets are dynamically generated by the index
     * in response to the search query.
     * **Note:** This component renders one or more [automatic facets](https://docs.coveo.com/en/atomic/latest/reference/components/atomic-automatic-facet/) based on the `desiredCount` property.
     * To learn more about the automatic facet generator feature, see: [About the Facet Generator](https://docs.coveo.com/en/n9sd0159/).
     */
    interface HTMLAtomicAutomaticFacetGeneratorElement extends Components.AtomicAutomaticFacetGenerator, HTMLStencilElement {
    }
    var HTMLAtomicAutomaticFacetGeneratorElement: {
        prototype: HTMLAtomicAutomaticFacetGeneratorElement;
        new (): HTMLAtomicAutomaticFacetGeneratorElement;
    };
    /**
     * The `atomic-breadbox` component creates breadcrumbs that display a summary of the currently active facet values.
     */
    interface HTMLAtomicBreadboxElement extends Components.AtomicBreadbox, HTMLStencilElement {
    }
    var HTMLAtomicBreadboxElement: {
        prototype: HTMLAtomicBreadboxElement;
        new (): HTMLAtomicBreadboxElement;
    };
    /**
     * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., number of occurrences).
     * An `atomic-category-facet` displays a facet of values in a browsable, hierarchical fashion.
     */
    interface HTMLAtomicCategoryFacetElement extends Components.AtomicCategoryFacet, HTMLStencilElement {
    }
    var HTMLAtomicCategoryFacetElement: {
        prototype: HTMLAtomicCategoryFacetElement;
        new (): HTMLAtomicCategoryFacetElement;
    };
    interface HTMLAtomicCitationElement extends Components.AtomicCitation, HTMLStencilElement {
    }
    var HTMLAtomicCitationElement: {
        prototype: HTMLAtomicCitationElement;
        new (): HTMLAtomicCitationElement;
    };
    /**
     * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., number of occurrences).
     * An `atomic-color-facet` displays a facet of the results for the current query as colors.
     */
    interface HTMLAtomicColorFacetElement extends Components.AtomicColorFacet, HTMLStencilElement {
    }
    var HTMLAtomicColorFacetElement: {
        prototype: HTMLAtomicColorFacetElement;
        new (): HTMLAtomicColorFacetElement;
    };
    interface HTMLAtomicCommerceInterfaceElement extends Components.AtomicCommerceInterface, HTMLStencilElement {
    }
    var HTMLAtomicCommerceInterfaceElement: {
        prototype: HTMLAtomicCommerceInterfaceElement;
        new (): HTMLAtomicCommerceInterfaceElement;
    };
    interface HTMLAtomicCommercePagerElementEventMap {
        "atomic/scrollToTop": any;
    }
    /**
     * The `atomic-pager` provides buttons that allow the end user to navigate through the different product pages.
     */
    interface HTMLAtomicCommercePagerElement extends Components.AtomicCommercePager, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtomicCommercePagerElementEventMap>(type: K, listener: (this: HTMLAtomicCommercePagerElement, ev: AtomicCommercePagerCustomEvent<HTMLAtomicCommercePagerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtomicCommercePagerElementEventMap>(type: K, listener: (this: HTMLAtomicCommercePagerElement, ev: AtomicCommercePagerCustomEvent<HTMLAtomicCommercePagerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtomicCommercePagerElement: {
        prototype: HTMLAtomicCommercePagerElement;
        new (): HTMLAtomicCommercePagerElement;
    };
    interface HTMLAtomicCommerceResultListElement extends Components.AtomicCommerceResultList, HTMLStencilElement {
    }
    var HTMLAtomicCommerceResultListElement: {
        prototype: HTMLAtomicCommerceResultListElement;
        new (): HTMLAtomicCommerceResultListElement;
    };
    interface HTMLAtomicCommerceSearchBoxElementEventMap {
        "redirect": RedirectionPayload;
    }
    /**
     * The `atomic-commerce-search-box` component creates a search box with built-in support for suggestions.
     */
    interface HTMLAtomicCommerceSearchBoxElement extends Components.AtomicCommerceSearchBox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtomicCommerceSearchBoxElementEventMap>(type: K, listener: (this: HTMLAtomicCommerceSearchBoxElement, ev: AtomicCommerceSearchBoxCustomEvent<HTMLAtomicCommerceSearchBoxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtomicCommerceSearchBoxElementEventMap>(type: K, listener: (this: HTMLAtomicCommerceSearchBoxElement, ev: AtomicCommerceSearchBoxCustomEvent<HTMLAtomicCommerceSearchBoxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtomicCommerceSearchBoxElement: {
        prototype: HTMLAtomicCommerceSearchBoxElement;
        new (): HTMLAtomicCommerceSearchBoxElement;
    };
    /**
     * The `atomic-component-error` is used by other components to return errors. This doesn't require any configuration.
     */
    interface HTMLAtomicComponentErrorElement extends Components.AtomicComponentError, HTMLStencilElement {
    }
    var HTMLAtomicComponentErrorElement: {
        prototype: HTMLAtomicComponentErrorElement;
        new (): HTMLAtomicComponentErrorElement;
    };
    /**
     * The `atomic-did-you-mean` component is responsible for handling query corrections. When a query returns no result but finds a possible query correction, the component either suggests the correction or automatically triggers a new query with the suggested term.
     */
    interface HTMLAtomicDidYouMeanElement extends Components.AtomicDidYouMean, HTMLStencilElement {
    }
    var HTMLAtomicDidYouMeanElement: {
        prototype: HTMLAtomicDidYouMeanElement;
        new (): HTMLAtomicDidYouMeanElement;
    };
    /**
     * The `atomic-external` component allows components defined outside of the `atomic-search-interface` to initialize.
     */
    interface HTMLAtomicExternalElement extends Components.AtomicExternal, HTMLStencilElement {
    }
    var HTMLAtomicExternalElement: {
        prototype: HTMLAtomicExternalElement;
        new (): HTMLAtomicExternalElement;
    };
    /**
     * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., number of occurrences).
     * An `atomic-facet` displays a facet of the results for the current query.
     */
    interface HTMLAtomicFacetElement extends Components.AtomicFacet, HTMLStencilElement {
    }
    var HTMLAtomicFacetElement: {
        prototype: HTMLAtomicFacetElement;
        new (): HTMLAtomicFacetElement;
    };
    interface HTMLAtomicFacetDateInputElementEventMap {
        "atomic/dateInputApply": any;
    }
    /**
     * Internal component made to be integrated in a TimeframeFacet.
     */
    interface HTMLAtomicFacetDateInputElement extends Components.AtomicFacetDateInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtomicFacetDateInputElementEventMap>(type: K, listener: (this: HTMLAtomicFacetDateInputElement, ev: AtomicFacetDateInputCustomEvent<HTMLAtomicFacetDateInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtomicFacetDateInputElementEventMap>(type: K, listener: (this: HTMLAtomicFacetDateInputElement, ev: AtomicFacetDateInputCustomEvent<HTMLAtomicFacetDateInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtomicFacetDateInputElement: {
        prototype: HTMLAtomicFacetDateInputElement;
        new (): HTMLAtomicFacetDateInputElement;
    };
    /**
     * The `atomic-facet-manager` helps reorder facets and their values to match the most recent search response with the most relevant results. A facet component is slotted within an `atomic-facet-manager` to leverage this functionality.
     */
    interface HTMLAtomicFacetManagerElement extends Components.AtomicFacetManager, HTMLStencilElement {
    }
    var HTMLAtomicFacetManagerElement: {
        prototype: HTMLAtomicFacetManagerElement;
        new (): HTMLAtomicFacetManagerElement;
    };
    interface HTMLAtomicFacetNumberInputElementEventMap {
        "atomic/numberInputApply": any;
    }
    /**
     * Internal component made to be integrated in a NumericFacet.
     */
    interface HTMLAtomicFacetNumberInputElement extends Components.AtomicFacetNumberInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtomicFacetNumberInputElementEventMap>(type: K, listener: (this: HTMLAtomicFacetNumberInputElement, ev: AtomicFacetNumberInputCustomEvent<HTMLAtomicFacetNumberInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtomicFacetNumberInputElementEventMap>(type: K, listener: (this: HTMLAtomicFacetNumberInputElement, ev: AtomicFacetNumberInputCustomEvent<HTMLAtomicFacetNumberInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtomicFacetNumberInputElement: {
        prototype: HTMLAtomicFacetNumberInputElement;
        new (): HTMLAtomicFacetNumberInputElement;
    };
    /**
     * The `atomic-field-condition` component takes a list of conditions that, if fulfilled, apply the template in which it's defined.
     * The condition properties can be based on any top-level result property of the `result` object, not restricted to fields (e.g., `isRecommendation`).
     * @MapProp name: mustMatch;attr: must-match;docs: The field and values that define which result items the condition must be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is `lithiummessage` or `YouTubePlaylist`: `must-match-filetype="lithiummessage,YouTubePlaylist"`;type: Record<string, string[]> ;default: {}
     * @MapProp name: mustNotMatch;attr: must-not-match;docs: The field and values that define which result items the condition must not be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is not `lithiummessage`: `must-not-match-filetype="lithiummessage";type: Record<string, string[]> ;default: {}
     */
    interface HTMLAtomicFieldConditionElement extends Components.AtomicFieldCondition, HTMLStencilElement {
    }
    var HTMLAtomicFieldConditionElement: {
        prototype: HTMLAtomicFieldConditionElement;
        new (): HTMLAtomicFieldConditionElement;
    };
    interface HTMLAtomicFocusDetectorElementEventMap {
        "focusEnter": any;
        "focusExit": any;
    }
    interface HTMLAtomicFocusDetectorElement extends Components.AtomicFocusDetector, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtomicFocusDetectorElementEventMap>(type: K, listener: (this: HTMLAtomicFocusDetectorElement, ev: AtomicFocusDetectorCustomEvent<HTMLAtomicFocusDetectorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtomicFocusDetectorElementEventMap>(type: K, listener: (this: HTMLAtomicFocusDetectorElement, ev: AtomicFocusDetectorCustomEvent<HTMLAtomicFocusDetectorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtomicFocusDetectorElement: {
        prototype: HTMLAtomicFocusDetectorElement;
        new (): HTMLAtomicFocusDetectorElement;
    };
    interface HTMLAtomicFocusTrapElement extends Components.AtomicFocusTrap, HTMLStencilElement {
    }
    var HTMLAtomicFocusTrapElement: {
        prototype: HTMLAtomicFocusTrapElement;
        new (): HTMLAtomicFocusTrapElement;
    };
    /**
     * The `atomic-folded-result-list` component is responsible for displaying folded query results, by applying one or more result templates for up to three layers (i.e., to the result, child and grandchild).
     */
    interface HTMLAtomicFoldedResultListElement extends Components.AtomicFoldedResultList, HTMLStencilElement {
    }
    var HTMLAtomicFoldedResultListElement: {
        prototype: HTMLAtomicFoldedResultListElement;
        new (): HTMLAtomicFoldedResultListElement;
    };
    /**
     * The `atomic-format-currency` component is used for formatting currencies.
     * The numerical format of compatible parents will be set according to the currency property of this component.
     */
    interface HTMLAtomicFormatCurrencyElement extends Components.AtomicFormatCurrency, HTMLStencilElement {
    }
    var HTMLAtomicFormatCurrencyElement: {
        prototype: HTMLAtomicFormatCurrencyElement;
        new (): HTMLAtomicFormatCurrencyElement;
    };
    /**
     * The `atomic-format-number` component is used for number formatting.
     * The numerical format of compatible parents will be set according to the properties of this component.
     */
    interface HTMLAtomicFormatNumberElement extends Components.AtomicFormatNumber, HTMLStencilElement {
    }
    var HTMLAtomicFormatNumberElement: {
        prototype: HTMLAtomicFormatNumberElement;
        new (): HTMLAtomicFormatNumberElement;
    };
    /**
     * The `atomic-format-unit` component is used for formatting numbers with units.
     * The numerical format of compatible parents will be set according to the properties of this component.
     */
    interface HTMLAtomicFormatUnitElement extends Components.AtomicFormatUnit, HTMLStencilElement {
    }
    var HTMLAtomicFormatUnitElement: {
        prototype: HTMLAtomicFormatUnitElement;
        new (): HTMLAtomicFormatUnitElement;
    };
    /**
     * The `atomic-frequently-bought-together` component suggests products frequently bought with the current product based on the shopping cart of other users.
     */
    interface HTMLAtomicFrequentlyBoughtTogetherElement extends Components.AtomicFrequentlyBoughtTogether, HTMLStencilElement {
    }
    var HTMLAtomicFrequentlyBoughtTogetherElement: {
        prototype: HTMLAtomicFrequentlyBoughtTogetherElement;
        new (): HTMLAtomicFrequentlyBoughtTogetherElement;
    };
    /**
     * The `atomic-generated-answer` component uses Coveo Machine Learning (Coveo ML) models to automatically generate an answer to a query executed by the user.
     * For more information, see [About Relevance Generative Answering (RGA)](https://docs.coveo.com/en/n9de0370/)
     */
    interface HTMLAtomicGeneratedAnswerElement extends Components.AtomicGeneratedAnswer, HTMLStencilElement {
    }
    var HTMLAtomicGeneratedAnswerElement: {
        prototype: HTMLAtomicGeneratedAnswerElement;
        new (): HTMLAtomicGeneratedAnswerElement;
    };
    interface HTMLAtomicGeneratedAnswerFeedbackModalElementEventMap {
        "feedbackSent": any;
    }
    interface HTMLAtomicGeneratedAnswerFeedbackModalElement extends Components.AtomicGeneratedAnswerFeedbackModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtomicGeneratedAnswerFeedbackModalElementEventMap>(type: K, listener: (this: HTMLAtomicGeneratedAnswerFeedbackModalElement, ev: AtomicGeneratedAnswerFeedbackModalCustomEvent<HTMLAtomicGeneratedAnswerFeedbackModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtomicGeneratedAnswerFeedbackModalElementEventMap>(type: K, listener: (this: HTMLAtomicGeneratedAnswerFeedbackModalElement, ev: AtomicGeneratedAnswerFeedbackModalCustomEvent<HTMLAtomicGeneratedAnswerFeedbackModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtomicGeneratedAnswerFeedbackModalElement: {
        prototype: HTMLAtomicGeneratedAnswerFeedbackModalElement;
        new (): HTMLAtomicGeneratedAnswerFeedbackModalElement;
    };
    /**
     * The `atomic-html` component renders the HTML value of a string.
     * There is an inherent XSS security concern associated with the usage of this component.
     * Use only with values for which you are certain the content is harmless.
     */
    interface HTMLAtomicHtmlElement extends Components.AtomicHtml, HTMLStencilElement {
    }
    var HTMLAtomicHtmlElement: {
        prototype: HTMLAtomicHtmlElement;
        new (): HTMLAtomicHtmlElement;
    };
    /**
     * The `atomic-icon` component displays an SVG icon with a 1:1 aspect ratio.
     * This component can display an icon from those available in the Atomic package, from a specific location, or as an inline SVG element.
     */
    interface HTMLAtomicIconElement extends Components.AtomicIcon, HTMLStencilElement {
    }
    var HTMLAtomicIconElement: {
        prototype: HTMLAtomicIconElement;
        new (): HTMLAtomicIconElement;
    };
    interface HTMLAtomicInsightEditToggleElement extends Components.AtomicInsightEditToggle, HTMLStencilElement {
    }
    var HTMLAtomicInsightEditToggleElement: {
        prototype: HTMLAtomicInsightEditToggleElement;
        new (): HTMLAtomicInsightEditToggleElement;
    };
    interface HTMLAtomicInsightFacetElement extends Components.AtomicInsightFacet, HTMLStencilElement {
    }
    var HTMLAtomicInsightFacetElement: {
        prototype: HTMLAtomicInsightFacetElement;
        new (): HTMLAtomicInsightFacetElement;
    };
    interface HTMLAtomicInsightFoldedResultListElement extends Components.AtomicInsightFoldedResultList, HTMLStencilElement {
    }
    var HTMLAtomicInsightFoldedResultListElement: {
        prototype: HTMLAtomicInsightFoldedResultListElement;
        new (): HTMLAtomicInsightFoldedResultListElement;
    };
    interface HTMLAtomicInsightFullSearchButtonElement extends Components.AtomicInsightFullSearchButton, HTMLStencilElement {
    }
    var HTMLAtomicInsightFullSearchButtonElement: {
        prototype: HTMLAtomicInsightFullSearchButtonElement;
        new (): HTMLAtomicInsightFullSearchButtonElement;
    };
    interface HTMLAtomicInsightGeneratedAnswerElement extends Components.AtomicInsightGeneratedAnswer, HTMLStencilElement {
    }
    var HTMLAtomicInsightGeneratedAnswerElement: {
        prototype: HTMLAtomicInsightGeneratedAnswerElement;
        new (): HTMLAtomicInsightGeneratedAnswerElement;
    };
    interface HTMLAtomicInsightHistoryToggleElement extends Components.AtomicInsightHistoryToggle, HTMLStencilElement {
    }
    var HTMLAtomicInsightHistoryToggleElement: {
        prototype: HTMLAtomicInsightHistoryToggleElement;
        new (): HTMLAtomicInsightHistoryToggleElement;
    };
    interface HTMLAtomicInsightInterfaceElement extends Components.AtomicInsightInterface, HTMLStencilElement {
    }
    var HTMLAtomicInsightInterfaceElement: {
        prototype: HTMLAtomicInsightInterfaceElement;
        new (): HTMLAtomicInsightInterfaceElement;
    };
    interface HTMLAtomicInsightLayoutElement extends Components.AtomicInsightLayout, HTMLStencilElement {
    }
    var HTMLAtomicInsightLayoutElement: {
        prototype: HTMLAtomicInsightLayoutElement;
        new (): HTMLAtomicInsightLayoutElement;
    };
    interface HTMLAtomicInsightNoResultsElement extends Components.AtomicInsightNoResults, HTMLStencilElement {
    }
    var HTMLAtomicInsightNoResultsElement: {
        prototype: HTMLAtomicInsightNoResultsElement;
        new (): HTMLAtomicInsightNoResultsElement;
    };
    interface HTMLAtomicInsightNumericFacetElement extends Components.AtomicInsightNumericFacet, HTMLStencilElement {
    }
    var HTMLAtomicInsightNumericFacetElement: {
        prototype: HTMLAtomicInsightNumericFacetElement;
        new (): HTMLAtomicInsightNumericFacetElement;
    };
    interface HTMLAtomicInsightPagerElementEventMap {
        "atomic/scrollToTop": any;
    }
    interface HTMLAtomicInsightPagerElement extends Components.AtomicInsightPager, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtomicInsightPagerElementEventMap>(type: K, listener: (this: HTMLAtomicInsightPagerElement, ev: AtomicInsightPagerCustomEvent<HTMLAtomicInsightPagerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtomicInsightPagerElementEventMap>(type: K, listener: (this: HTMLAtomicInsightPagerElement, ev: AtomicInsightPagerCustomEvent<HTMLAtomicInsightPagerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtomicInsightPagerElement: {
        prototype: HTMLAtomicInsightPagerElement;
        new (): HTMLAtomicInsightPagerElement;
    };
    interface HTMLAtomicInsightQueryErrorElement extends Components.AtomicInsightQueryError, HTMLStencilElement {
    }
    var HTMLAtomicInsightQueryErrorElement: {
        prototype: HTMLAtomicInsightQueryErrorElement;
        new (): HTMLAtomicInsightQueryErrorElement;
    };
    interface HTMLAtomicInsightQuerySummaryElement extends Components.AtomicInsightQuerySummary, HTMLStencilElement {
    }
    var HTMLAtomicInsightQuerySummaryElement: {
        prototype: HTMLAtomicInsightQuerySummaryElement;
        new (): HTMLAtomicInsightQuerySummaryElement;
    };
    interface HTMLAtomicInsightRefineModalElement extends Components.AtomicInsightRefineModal, HTMLStencilElement {
    }
    var HTMLAtomicInsightRefineModalElement: {
        prototype: HTMLAtomicInsightRefineModalElement;
        new (): HTMLAtomicInsightRefineModalElement;
    };
    interface HTMLAtomicInsightRefineToggleElement extends Components.AtomicInsightRefineToggle, HTMLStencilElement {
    }
    var HTMLAtomicInsightRefineToggleElement: {
        prototype: HTMLAtomicInsightRefineToggleElement;
        new (): HTMLAtomicInsightRefineToggleElement;
    };
    interface HTMLAtomicInsightResultElement extends Components.AtomicInsightResult, HTMLStencilElement {
    }
    var HTMLAtomicInsightResultElement: {
        prototype: HTMLAtomicInsightResultElement;
        new (): HTMLAtomicInsightResultElement;
    };
    interface HTMLAtomicInsightResultActionElementEventMap {
        "atomicInsightResultActionClicked": InsightResultActionClickedEvent;
    }
    interface HTMLAtomicInsightResultActionElement extends Components.AtomicInsightResultAction, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtomicInsightResultActionElementEventMap>(type: K, listener: (this: HTMLAtomicInsightResultActionElement, ev: AtomicInsightResultActionCustomEvent<HTMLAtomicInsightResultActionElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtomicInsightResultActionElementEventMap>(type: K, listener: (this: HTMLAtomicInsightResultActionElement, ev: AtomicInsightResultActionCustomEvent<HTMLAtomicInsightResultActionElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtomicInsightResultActionElement: {
        prototype: HTMLAtomicInsightResultActionElement;
        new (): HTMLAtomicInsightResultActionElement;
    };
    interface HTMLAtomicInsightResultActionBarElement extends Components.AtomicInsightResultActionBar, HTMLStencilElement {
    }
    var HTMLAtomicInsightResultActionBarElement: {
        prototype: HTMLAtomicInsightResultActionBarElement;
        new (): HTMLAtomicInsightResultActionBarElement;
    };
    interface HTMLAtomicInsightResultChildrenElement extends Components.AtomicInsightResultChildren, HTMLStencilElement {
    }
    var HTMLAtomicInsightResultChildrenElement: {
        prototype: HTMLAtomicInsightResultChildrenElement;
        new (): HTMLAtomicInsightResultChildrenElement;
    };
    interface HTMLAtomicInsightResultChildrenTemplateElement extends Components.AtomicInsightResultChildrenTemplate, HTMLStencilElement {
    }
    var HTMLAtomicInsightResultChildrenTemplateElement: {
        prototype: HTMLAtomicInsightResultChildrenTemplateElement;
        new (): HTMLAtomicInsightResultChildrenTemplateElement;
    };
    interface HTMLAtomicInsightResultListElement extends Components.AtomicInsightResultList, HTMLStencilElement {
    }
    var HTMLAtomicInsightResultListElement: {
        prototype: HTMLAtomicInsightResultListElement;
        new (): HTMLAtomicInsightResultListElement;
    };
    interface HTMLAtomicInsightResultTemplateElement extends Components.AtomicInsightResultTemplate, HTMLStencilElement {
    }
    var HTMLAtomicInsightResultTemplateElement: {
        prototype: HTMLAtomicInsightResultTemplateElement;
        new (): HTMLAtomicInsightResultTemplateElement;
    };
    interface HTMLAtomicInsightSearchBoxElement extends Components.AtomicInsightSearchBox, HTMLStencilElement {
    }
    var HTMLAtomicInsightSearchBoxElement: {
        prototype: HTMLAtomicInsightSearchBoxElement;
        new (): HTMLAtomicInsightSearchBoxElement;
    };
    interface HTMLAtomicInsightSmartSnippetElement extends Components.AtomicInsightSmartSnippet, HTMLStencilElement {
    }
    var HTMLAtomicInsightSmartSnippetElement: {
        prototype: HTMLAtomicInsightSmartSnippetElement;
        new (): HTMLAtomicInsightSmartSnippetElement;
    };
    interface HTMLAtomicInsightSmartSnippetFeedbackModalElementEventMap {
        "feedbackSent": any;
    }
    interface HTMLAtomicInsightSmartSnippetFeedbackModalElement extends Components.AtomicInsightSmartSnippetFeedbackModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtomicInsightSmartSnippetFeedbackModalElementEventMap>(type: K, listener: (this: HTMLAtomicInsightSmartSnippetFeedbackModalElement, ev: AtomicInsightSmartSnippetFeedbackModalCustomEvent<HTMLAtomicInsightSmartSnippetFeedbackModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtomicInsightSmartSnippetFeedbackModalElementEventMap>(type: K, listener: (this: HTMLAtomicInsightSmartSnippetFeedbackModalElement, ev: AtomicInsightSmartSnippetFeedbackModalCustomEvent<HTMLAtomicInsightSmartSnippetFeedbackModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtomicInsightSmartSnippetFeedbackModalElement: {
        prototype: HTMLAtomicInsightSmartSnippetFeedbackModalElement;
        new (): HTMLAtomicInsightSmartSnippetFeedbackModalElement;
    };
    interface HTMLAtomicInsightSmartSnippetSuggestionsElement extends Components.AtomicInsightSmartSnippetSuggestions, HTMLStencilElement {
    }
    var HTMLAtomicInsightSmartSnippetSuggestionsElement: {
        prototype: HTMLAtomicInsightSmartSnippetSuggestionsElement;
        new (): HTMLAtomicInsightSmartSnippetSuggestionsElement;
    };
    interface HTMLAtomicInsightTabElement extends Components.AtomicInsightTab, HTMLStencilElement {
    }
    var HTMLAtomicInsightTabElement: {
        prototype: HTMLAtomicInsightTabElement;
        new (): HTMLAtomicInsightTabElement;
    };
    interface HTMLAtomicInsightTabsElement extends Components.AtomicInsightTabs, HTMLStencilElement {
    }
    var HTMLAtomicInsightTabsElement: {
        prototype: HTMLAtomicInsightTabsElement;
        new (): HTMLAtomicInsightTabsElement;
    };
    interface HTMLAtomicInsightTimeframeFacetElement extends Components.AtomicInsightTimeframeFacet, HTMLStencilElement {
    }
    var HTMLAtomicInsightTimeframeFacetElement: {
        prototype: HTMLAtomicInsightTimeframeFacetElement;
        new (): HTMLAtomicInsightTimeframeFacetElement;
    };
    interface HTMLAtomicIpxBodyElementEventMap {
        "animationEnded": never;
    }
    interface HTMLAtomicIpxBodyElement extends Components.AtomicIpxBody, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtomicIpxBodyElementEventMap>(type: K, listener: (this: HTMLAtomicIpxBodyElement, ev: AtomicIpxBodyCustomEvent<HTMLAtomicIpxBodyElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtomicIpxBodyElementEventMap>(type: K, listener: (this: HTMLAtomicIpxBodyElement, ev: AtomicIpxBodyCustomEvent<HTMLAtomicIpxBodyElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtomicIpxBodyElement: {
        prototype: HTMLAtomicIpxBodyElement;
        new (): HTMLAtomicIpxBodyElement;
    };
    interface HTMLAtomicIpxButtonElement extends Components.AtomicIpxButton, HTMLStencilElement {
    }
    var HTMLAtomicIpxButtonElement: {
        prototype: HTMLAtomicIpxButtonElement;
        new (): HTMLAtomicIpxButtonElement;
    };
    interface HTMLAtomicIpxEmbeddedElementEventMap {
        "animationEnded": never;
    }
    interface HTMLAtomicIpxEmbeddedElement extends Components.AtomicIpxEmbedded, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtomicIpxEmbeddedElementEventMap>(type: K, listener: (this: HTMLAtomicIpxEmbeddedElement, ev: AtomicIpxEmbeddedCustomEvent<HTMLAtomicIpxEmbeddedElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtomicIpxEmbeddedElementEventMap>(type: K, listener: (this: HTMLAtomicIpxEmbeddedElement, ev: AtomicIpxEmbeddedCustomEvent<HTMLAtomicIpxEmbeddedElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtomicIpxEmbeddedElement: {
        prototype: HTMLAtomicIpxEmbeddedElement;
        new (): HTMLAtomicIpxEmbeddedElement;
    };
    interface HTMLAtomicIpxModalElementEventMap {
        "animationEnded": never;
    }
    interface HTMLAtomicIpxModalElement extends Components.AtomicIpxModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtomicIpxModalElementEventMap>(type: K, listener: (this: HTMLAtomicIpxModalElement, ev: AtomicIpxModalCustomEvent<HTMLAtomicIpxModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtomicIpxModalElementEventMap>(type: K, listener: (this: HTMLAtomicIpxModalElement, ev: AtomicIpxModalCustomEvent<HTMLAtomicIpxModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtomicIpxModalElement: {
        prototype: HTMLAtomicIpxModalElement;
        new (): HTMLAtomicIpxModalElement;
    };
    interface HTMLAtomicIpxRefineModalElement extends Components.AtomicIpxRefineModal, HTMLStencilElement {
    }
    var HTMLAtomicIpxRefineModalElement: {
        prototype: HTMLAtomicIpxRefineModalElement;
        new (): HTMLAtomicIpxRefineModalElement;
    };
    interface HTMLAtomicIpxRefineToggleElement extends Components.AtomicIpxRefineToggle, HTMLStencilElement {
    }
    var HTMLAtomicIpxRefineToggleElement: {
        prototype: HTMLAtomicIpxRefineToggleElement;
        new (): HTMLAtomicIpxRefineToggleElement;
    };
    /**
     * The `atomic-ipx-result-link` component automatically transforms a search result title into a clickable link that points to the original item. It is an experimental internal component not intended for general use.
     */
    interface HTMLAtomicIpxResultLinkElement extends Components.AtomicIpxResultLink, HTMLStencilElement {
    }
    var HTMLAtomicIpxResultLinkElement: {
        prototype: HTMLAtomicIpxResultLinkElement;
        new (): HTMLAtomicIpxResultLinkElement;
    };
    interface HTMLAtomicIpxTabElement extends Components.AtomicIpxTab, HTMLStencilElement {
    }
    var HTMLAtomicIpxTabElement: {
        prototype: HTMLAtomicIpxTabElement;
        new (): HTMLAtomicIpxTabElement;
    };
    interface HTMLAtomicIpxTabsElement extends Components.AtomicIpxTabs, HTMLStencilElement {
    }
    var HTMLAtomicIpxTabsElement: {
        prototype: HTMLAtomicIpxTabsElement;
        new (): HTMLAtomicIpxTabsElement;
    };
    /**
     * The `atomic-layout-section` lets you identify various sections for the related `atomic-layout` component.
     */
    interface HTMLAtomicLayoutSectionElement extends Components.AtomicLayoutSection, HTMLStencilElement {
    }
    var HTMLAtomicLayoutSectionElement: {
        prototype: HTMLAtomicLayoutSectionElement;
        new (): HTMLAtomicLayoutSectionElement;
    };
    /**
     * The `atomic-load-more-children-results` component allows to load the full collection for a folded result.
     */
    interface HTMLAtomicLoadMoreChildrenResultsElement extends Components.AtomicLoadMoreChildrenResults, HTMLStencilElement {
    }
    var HTMLAtomicLoadMoreChildrenResultsElement: {
        prototype: HTMLAtomicLoadMoreChildrenResultsElement;
        new (): HTMLAtomicLoadMoreChildrenResultsElement;
    };
    /**
     * The `atomic-load-more-results` component allows the user to load additional results if more are available.
     */
    interface HTMLAtomicLoadMoreResultsElement extends Components.AtomicLoadMoreResults, HTMLStencilElement {
    }
    var HTMLAtomicLoadMoreResultsElement: {
        prototype: HTMLAtomicLoadMoreResultsElement;
        new (): HTMLAtomicLoadMoreResultsElement;
    };
    interface HTMLAtomicModalElementEventMap {
        "animationEnded": never;
    }
    /**
     * When the modal is opened, the class `atomic-modal-opened` is added to the interfaceElement and the body, allowing further customization.
     */
    interface HTMLAtomicModalElement extends Components.AtomicModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtomicModalElementEventMap>(type: K, listener: (this: HTMLAtomicModalElement, ev: AtomicModalCustomEvent<HTMLAtomicModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtomicModalElementEventMap>(type: K, listener: (this: HTMLAtomicModalElement, ev: AtomicModalCustomEvent<HTMLAtomicModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtomicModalElement: {
        prototype: HTMLAtomicModalElement;
        new (): HTMLAtomicModalElement;
    };
    /**
     * The `atomic-no-results` component displays search tips and a "Cancel last action" button when there are no results. Any additional content slotted inside of its element will be displayed as well.
     */
    interface HTMLAtomicNoResultsElement extends Components.AtomicNoResults, HTMLStencilElement {
    }
    var HTMLAtomicNoResultsElement: {
        prototype: HTMLAtomicNoResultsElement;
        new (): HTMLAtomicNoResultsElement;
    };
    /**
     * The `atomic-notifications` component is responsible for displaying notifications generated by the Coveo Search API (see [Trigger](https://docs.coveo.com/en/1458)).
     */
    interface HTMLAtomicNotificationsElement extends Components.AtomicNotifications, HTMLStencilElement {
    }
    var HTMLAtomicNotificationsElement: {
        prototype: HTMLAtomicNotificationsElement;
        new (): HTMLAtomicNotificationsElement;
    };
    /**
     * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., ascending, descending).
     * An `atomic-numeric-facet` displays a facet of the results for the current query as numeric ranges.
     */
    interface HTMLAtomicNumericFacetElement extends Components.AtomicNumericFacet, HTMLStencilElement {
    }
    var HTMLAtomicNumericFacetElement: {
        prototype: HTMLAtomicNumericFacetElement;
        new (): HTMLAtomicNumericFacetElement;
    };
    /**
     * The `atomic-numeric-range` component defines the range of an `atomic-numeric-facet`, and therefore must be defined within an `atomic-numeric-facet` component.
     */
    interface HTMLAtomicNumericRangeElement extends Components.AtomicNumericRange, HTMLStencilElement {
    }
    var HTMLAtomicNumericRangeElement: {
        prototype: HTMLAtomicNumericRangeElement;
        new (): HTMLAtomicNumericRangeElement;
    };
    interface HTMLAtomicPagerElementEventMap {
        "atomic/scrollToTop": any;
    }
    /**
     * The `atomic-pager` provides buttons that allow the end user to navigate through the different result pages.
     */
    interface HTMLAtomicPagerElement extends Components.AtomicPager, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtomicPagerElementEventMap>(type: K, listener: (this: HTMLAtomicPagerElement, ev: AtomicPagerCustomEvent<HTMLAtomicPagerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtomicPagerElementEventMap>(type: K, listener: (this: HTMLAtomicPagerElement, ev: AtomicPagerCustomEvent<HTMLAtomicPagerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtomicPagerElement: {
        prototype: HTMLAtomicPagerElement;
        new (): HTMLAtomicPagerElement;
    };
    /**
     * The `atomic-popover` component displays any facet as a popover menu.
     */
    interface HTMLAtomicPopoverElement extends Components.AtomicPopover, HTMLStencilElement {
    }
    var HTMLAtomicPopoverElement: {
        prototype: HTMLAtomicPopoverElement;
        new (): HTMLAtomicPopoverElement;
    };
    /**
     * The `atomic-query-error` component handles fatal errors when performing a query on the index or Search API. When the error is known, it displays a link to relevant documentation link for debugging purposes. When the error is unknown, it displays a small text area with the JSON content of the error.
     */
    interface HTMLAtomicQueryErrorElement extends Components.AtomicQueryError, HTMLStencilElement {
    }
    var HTMLAtomicQueryErrorElement: {
        prototype: HTMLAtomicQueryErrorElement;
        new (): HTMLAtomicQueryErrorElement;
    };
    /**
     * The `atomic-query-summary` component displays information about the current range of results and the request duration (e.g., "Results 1-10 of 123 in 0.47 seconds").
     */
    interface HTMLAtomicQuerySummaryElement extends Components.AtomicQuerySummary, HTMLStencilElement {
    }
    var HTMLAtomicQuerySummaryElement: {
        prototype: HTMLAtomicQuerySummaryElement;
        new (): HTMLAtomicQuerySummaryElement;
    };
    /**
     * The `atomic-quickview` component renders a button which the end user can click to open a modal box containing a preview
     * about a result.
     * The `atomic-quickview` is not meant to replace the `atomic-result-link` to access an item in a result template; it has certain limitations (e.g., custom styles and embedded
     * images/links may not work as expected in an `atomic-quickview`).
     */
    interface HTMLAtomicQuickviewElement extends Components.AtomicQuickview, HTMLStencilElement {
    }
    var HTMLAtomicQuickviewElement: {
        prototype: HTMLAtomicQuickviewElement;
        new (): HTMLAtomicQuickviewElement;
    };
    interface HTMLAtomicQuickviewModalElementEventMap {
        "atomic/quickview/next": any;
        "atomic/quickview/previous": any;
    }
    interface HTMLAtomicQuickviewModalElement extends Components.AtomicQuickviewModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtomicQuickviewModalElementEventMap>(type: K, listener: (this: HTMLAtomicQuickviewModalElement, ev: AtomicQuickviewModalCustomEvent<HTMLAtomicQuickviewModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtomicQuickviewModalElementEventMap>(type: K, listener: (this: HTMLAtomicQuickviewModalElement, ev: AtomicQuickviewModalCustomEvent<HTMLAtomicQuickviewModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtomicQuickviewModalElement: {
        prototype: HTMLAtomicQuickviewModalElement;
        new (): HTMLAtomicQuickviewModalElement;
    };
    /**
     * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., number of occurrences).
     * An `atomic-rating-facet` displays a facet of the results for the current query as ratings.
     * It only supports numeric fields.
     */
    interface HTMLAtomicRatingFacetElement extends Components.AtomicRatingFacet, HTMLStencilElement {
    }
    var HTMLAtomicRatingFacetElement: {
        prototype: HTMLAtomicRatingFacetElement;
        new (): HTMLAtomicRatingFacetElement;
    };
    /**
     * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., number of occurrences).
     * An `atomic-rating-range-facet` displays a facet of the results for the current query as ratings.
     * It only supports numeric fields.
     */
    interface HTMLAtomicRatingRangeFacetElement extends Components.AtomicRatingRangeFacet, HTMLStencilElement {
    }
    var HTMLAtomicRatingRangeFacetElement: {
        prototype: HTMLAtomicRatingRangeFacetElement;
        new (): HTMLAtomicRatingRangeFacetElement;
    };
    /**
     * The `atomic-recs-error` component handles fatal errors when performing a recommendations request on the index or Search API. When the error is known, it displays a link to relevant documentation link for debugging purposes. When the error is unknown, it displays a small text area with the JSON content of the error.
     */
    interface HTMLAtomicRecsErrorElement extends Components.AtomicRecsError, HTMLStencilElement {
    }
    var HTMLAtomicRecsErrorElement: {
        prototype: HTMLAtomicRecsErrorElement;
        new (): HTMLAtomicRecsErrorElement;
    };
    /**
     * The `atomic-recs-interface` component is the parent to all other atomic components in a recommendation interface. It handles the headless recommendation engine and localization configurations.
     */
    interface HTMLAtomicRecsInterfaceElement extends Components.AtomicRecsInterface, HTMLStencilElement {
    }
    var HTMLAtomicRecsInterfaceElement: {
        prototype: HTMLAtomicRecsInterfaceElement;
        new (): HTMLAtomicRecsInterfaceElement;
    };
    /**
     * The `atomic-recs-list` component displays recommendations by applying one or more result templates.
     */
    interface HTMLAtomicRecsListElement extends Components.AtomicRecsList, HTMLStencilElement {
    }
    var HTMLAtomicRecsListElement: {
        prototype: HTMLAtomicRecsListElement;
        new (): HTMLAtomicRecsListElement;
    };
    /**
     * The `atomic-recs-result` component is used internally by the `atomic-recs-list` component.
     */
    interface HTMLAtomicRecsResultElement extends Components.AtomicRecsResult, HTMLStencilElement {
    }
    var HTMLAtomicRecsResultElement: {
        prototype: HTMLAtomicRecsResultElement;
        new (): HTMLAtomicRecsResultElement;
    };
    /**
     * A [result template](https://docs.coveo.com/en/atomic/latest/usage/displaying-results#defining-a-result-template) determines the format of the query results, depending on the conditions that are defined for each template.
     * A `template` element must be the child of an `atomic-recs-result-template`, and an `atomic-recs-list` must be the parent of each `atomic-recs-result-template`.
     * **Note:** Any `<script>` tags that are defined inside a `<template>` element will not be executed when the results are being rendered.
     * @MapProp name: mustMatch;attr: must-match;docs: The field and values that define which result items the condition must be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is `lithiummessage` or `YouTubePlaylist`: `must-match-filetype="lithiummessage,YouTubePlaylist"`;type: Record<string, string[]> ;default: {}
     * @MapProp name: mustNotMatch;attr: must-not-match;docs: The field and values that define which result items the condition must not be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is not `lithiummessage`: `must-not-match-filetype="lithiummessage";type: Record<string, string[]> ;default: {}
     */
    interface HTMLAtomicRecsResultTemplateElement extends Components.AtomicRecsResultTemplate, HTMLStencilElement {
    }
    var HTMLAtomicRecsResultTemplateElement: {
        prototype: HTMLAtomicRecsResultTemplateElement;
        new (): HTMLAtomicRecsResultTemplateElement;
    };
    /**
     * The `atomic-refine-modal` is automatically created as a child of the `atomic-search-interface` when the `atomic-refine-toggle` is initialized.
     * When the modal is opened, the class `atomic-modal-opened` is added to the interface element and the body, allowing further customization.
     */
    interface HTMLAtomicRefineModalElement extends Components.AtomicRefineModal, HTMLStencilElement {
    }
    var HTMLAtomicRefineModalElement: {
        prototype: HTMLAtomicRefineModalElement;
        new (): HTMLAtomicRefineModalElement;
    };
    /**
     * The `atomic-refine-toggle` component displays a button that opens a modal containing the facets and the sort components.
     * When this component is added to the `atomic-search-interface`, an `atomic-refine-modal` component is automatically created.
     */
    interface HTMLAtomicRefineToggleElement extends Components.AtomicRefineToggle, HTMLStencilElement {
    }
    var HTMLAtomicRefineToggleElement: {
        prototype: HTMLAtomicRefineToggleElement;
        new (): HTMLAtomicRefineToggleElement;
    };
    interface HTMLAtomicRelevanceInspectorElementEventMap {
        "atomic/relevanceInspector/close": any;
    }
    /**
     * The `atomic-relevance-inspector` component is used internally to offer insight on search page relevance, as well as information to help troubleshoot issues during development.
     */
    interface HTMLAtomicRelevanceInspectorElement extends Components.AtomicRelevanceInspector, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtomicRelevanceInspectorElementEventMap>(type: K, listener: (this: HTMLAtomicRelevanceInspectorElement, ev: AtomicRelevanceInspectorCustomEvent<HTMLAtomicRelevanceInspectorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtomicRelevanceInspectorElementEventMap>(type: K, listener: (this: HTMLAtomicRelevanceInspectorElement, ev: AtomicRelevanceInspectorCustomEvent<HTMLAtomicRelevanceInspectorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtomicRelevanceInspectorElement: {
        prototype: HTMLAtomicRelevanceInspectorElement;
        new (): HTMLAtomicRelevanceInspectorElement;
    };
    /**
     * The `atomic-result` component is used internally by the `atomic-result-list` component.
     */
    interface HTMLAtomicResultElement extends Components.AtomicResult, HTMLStencilElement {
    }
    var HTMLAtomicResultElement: {
        prototype: HTMLAtomicResultElement;
        new (): HTMLAtomicResultElement;
    };
    /**
     * The `atomic-result-badge` element renders a badge to highlight special features of a result.
     * A badge can either display:
     * * Text:
     * ```html
     * <atomic-result-badge label="trending"></atomic-result-badge>
     * ```
     * * The contents of a single-value field:
     * ```html
     * <atomic-result-badge field="objecttype"></atomic-result-badge>
     * ```
     * * An icon:
     * ```html
     * <atomic-result-badge icon="https://my-website.fake/star.svg"></atomic-result-badge>
     * ```
     * * Slotted elements:
     * ```html
     * <atomic-result-badge icon="https://my-website.fake/stopwatch.svg">
     *     Deal ends in <my-dynamic-countdown></my-dynamic-countdown>
     * </atomic-result-badge>
     * ```
     * The contents of a multi-value field can be displayed as in the following example:
     * ```html
     * <atomic-result-badge icon="https://my-website.fake/language.svg">
     *    <atomic-result-multi-value-text field="language"></atomic-result-multi-value-text>
     * </atomic-result-badge>
     * ```
     */
    interface HTMLAtomicResultBadgeElement extends Components.AtomicResultBadge, HTMLStencilElement {
    }
    var HTMLAtomicResultBadgeElement: {
        prototype: HTMLAtomicResultBadgeElement;
        new (): HTMLAtomicResultBadgeElement;
    };
    /**
     * The `atomic-result-children` component is responsible for displaying child results by applying one or more child result templates.
     * Includes two slots, "before-children" and "after-children", which allow for rendering content before and after the list of children,
     * only when children exist.
     */
    interface HTMLAtomicResultChildrenElement extends Components.AtomicResultChildren, HTMLStencilElement {
    }
    var HTMLAtomicResultChildrenElement: {
        prototype: HTMLAtomicResultChildrenElement;
        new (): HTMLAtomicResultChildrenElement;
    };
    /**
     * The `atomic-result-children-template` component determines the format of the child results, depending on the conditions that are defined for each template. A `template` element must be the child of an `atomic-result-children-template`, and an `atomic-result-children` must be the parent of each `atomic-result-children-template`.
     * Note: Any `<script>` tags defined inside of a `<template>` element will not be executed when results are being rendered.
     * @MapProp name: mustMatch;attr: must-match;docs: The field and values that define which result items the condition must be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is `lithiummessage` or `YouTubePlaylist`: `must-match-filetype="lithiummessage,YouTubePlaylist"`;type: Record<string, string[]> ;default: {}
     * @MapProp name: mustNotMatch;attr: must-not-match;docs: The field and values that define which result items the condition must not be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is not `lithiummessage`: `must-not-match-filetype="lithiummessage";type: Record<string, string[]> ;default: {}
     */
    interface HTMLAtomicResultChildrenTemplateElement extends Components.AtomicResultChildrenTemplate, HTMLStencilElement {
    }
    var HTMLAtomicResultChildrenTemplateElement: {
        prototype: HTMLAtomicResultChildrenTemplateElement;
        new (): HTMLAtomicResultChildrenTemplateElement;
    };
    /**
     * The `atomic-result-date` component renders the value of a date result field.
     */
    interface HTMLAtomicResultDateElement extends Components.AtomicResultDate, HTMLStencilElement {
    }
    var HTMLAtomicResultDateElement: {
        prototype: HTMLAtomicResultDateElement;
        new (): HTMLAtomicResultDateElement;
    };
    /**
     * The `atomic-result-fields-list` component selectively renders its children to ensure they fit the parent element and adds dividers between them.
     */
    interface HTMLAtomicResultFieldsListElement extends Components.AtomicResultFieldsList, HTMLStencilElement {
    }
    var HTMLAtomicResultFieldsListElement: {
        prototype: HTMLAtomicResultFieldsListElement;
        new (): HTMLAtomicResultFieldsListElement;
    };
    /**
     * The `atomic-result-html` component renders the HTML value of a string result field.
     * There is an inherent XSS security concern associated with the usage of this component.
     * Use only with fields for which you are certain the data is harmless.
     */
    interface HTMLAtomicResultHtmlElement extends Components.AtomicResultHtml, HTMLStencilElement {
    }
    var HTMLAtomicResultHtmlElement: {
        prototype: HTMLAtomicResultHtmlElement;
        new (): HTMLAtomicResultHtmlElement;
    };
    /**
     * The `atomic-result-icon` component outputs the corresponding icon for a given file type.
     * The component searches for a suitable icon, or outputs a generic icon if the search is unsuccessful.
     */
    interface HTMLAtomicResultIconElement extends Components.AtomicResultIcon, HTMLStencilElement {
    }
    var HTMLAtomicResultIconElement: {
        prototype: HTMLAtomicResultIconElement;
        new (): HTMLAtomicResultIconElement;
    };
    /**
     * The `atomic-result-image` component renders an image from a result field.
     */
    interface HTMLAtomicResultImageElement extends Components.AtomicResultImage, HTMLStencilElement {
    }
    var HTMLAtomicResultImageElement: {
        prototype: HTMLAtomicResultImageElement;
        new (): HTMLAtomicResultImageElement;
    };
    /**
     * The `atomic-result-link` component automatically transforms a search result title into a clickable link that points to the original item.
     */
    interface HTMLAtomicResultLinkElement extends Components.AtomicResultLink, HTMLStencilElement {
    }
    var HTMLAtomicResultLinkElement: {
        prototype: HTMLAtomicResultLinkElement;
        new (): HTMLAtomicResultLinkElement;
    };
    /**
     * The `atomic-result-list` component is responsible for displaying query results by applying one or more result templates.
     */
    interface HTMLAtomicResultListElement extends Components.AtomicResultList, HTMLStencilElement {
    }
    var HTMLAtomicResultListElement: {
        prototype: HTMLAtomicResultListElement;
        new (): HTMLAtomicResultListElement;
    };
    /**
     * The `atomic-result-localized-text` component renders a target i18n localized string using the values of a target field.
     * Given this i18n configuration:
     * ```
     * searchInterface.i18n.addResourceBundle('en', 'translation', {
     *    classic_book_advert: 'Classic book from {{name}}',
     * });
     * ```
     * The component could be configured in such a way to replace `{{name}}` with the `author` field value from the result item:
     * ```
     * <atomic-result-localized-text locale-key="classic_book_advert" field-author="name"></atomic-result-localized-text>
     * ```
     * @MapProp name: field;attr: field;docs: The field from which to extract the target string and the variable used to map it to the target i18n parameter. For example, the following configuration extracts the value of `author` from a result, and assign it to the i18n parameter `name`: `field-author="name"`;type: Record<string, string> ;default: {}
     */
    interface HTMLAtomicResultLocalizedTextElement extends Components.AtomicResultLocalizedText, HTMLStencilElement {
    }
    var HTMLAtomicResultLocalizedTextElement: {
        prototype: HTMLAtomicResultLocalizedTextElement;
        new (): HTMLAtomicResultLocalizedTextElement;
    };
    /**
     * The `atomic-result-multi-value-text` component renders the values of a multi-value string field.
     */
    interface HTMLAtomicResultMultiValueTextElement extends Components.AtomicResultMultiValueText, HTMLStencilElement {
    }
    var HTMLAtomicResultMultiValueTextElement: {
        prototype: HTMLAtomicResultMultiValueTextElement;
        new (): HTMLAtomicResultMultiValueTextElement;
    };
    /**
     * The `atomic-result-number` component renders the value of a number result field.
     * The number can be formatted by adding a `atomic-format-number`, `atomic-format-currency` or `atomic-format-unit` component into this component.
     */
    interface HTMLAtomicResultNumberElement extends Components.AtomicResultNumber, HTMLStencilElement {
    }
    var HTMLAtomicResultNumberElement: {
        prototype: HTMLAtomicResultNumberElement;
        new (): HTMLAtomicResultNumberElement;
    };
    /**
     * The `atomic-result-placeholder` component provides an intermediate visual state that is rendered before the first results are available.
     */
    interface HTMLAtomicResultPlaceholderElement extends Components.AtomicResultPlaceholder, HTMLStencilElement {
    }
    var HTMLAtomicResultPlaceholderElement: {
        prototype: HTMLAtomicResultPlaceholderElement;
        new (): HTMLAtomicResultPlaceholderElement;
    };
    /**
     * The `atomic-result-printable-uri` component displays the URI, or path, to access a result.
     */
    interface HTMLAtomicResultPrintableUriElement extends Components.AtomicResultPrintableUri, HTMLStencilElement {
    }
    var HTMLAtomicResultPrintableUriElement: {
        prototype: HTMLAtomicResultPrintableUriElement;
        new (): HTMLAtomicResultPrintableUriElement;
    };
    /**
     * The `atomic-result-rating` element renders a star rating.
     */
    interface HTMLAtomicResultRatingElement extends Components.AtomicResultRating, HTMLStencilElement {
    }
    var HTMLAtomicResultRatingElement: {
        prototype: HTMLAtomicResultRatingElement;
        new (): HTMLAtomicResultRatingElement;
    };
    /**
     * This section allows the information seeker to perform an action on an item without having to view its details.
     * For example, in Commerce you can add an item to the cart directly or add it to a wish list to view at a later time.
     * Behavior:
     * * Exposes the `--line-height` CSS variable so child elements can adjust to the current line height.
     * ** You should ensure that elements inside of it have `height: var(--line-height)`.
     * * Is a wrapping flexbox with a gap.
     * * May appear over, next to, or beneath the visual section.
     */
    interface HTMLAtomicResultSectionActionsElement extends Components.AtomicResultSectionActions, HTMLStencilElement {
    }
    var HTMLAtomicResultSectionActionsElement: {
        prototype: HTMLAtomicResultSectionActionsElement;
        new (): HTMLAtomicResultSectionActionsElement;
    };
    /**
     * This section provides badges that highlight special features of the item.
     * Behavior:
     * * Exposes the `--line-height` CSS variable so child elements can adjust to the current line height.
     * ** You should ensure that elements inside of it have `height: var(--line-height)`.
     * * Is a wrapping flexbox with a gap.
     * * May appear over, next to, or beneath the visual section.
     */
    interface HTMLAtomicResultSectionBadgesElement extends Components.AtomicResultSectionBadges, HTMLStencilElement {
    }
    var HTMLAtomicResultSectionBadgesElement: {
        prototype: HTMLAtomicResultSectionBadgesElement;
        new (): HTMLAtomicResultSectionBadgesElement;
    };
    /**
     * This section displays additional descriptive information about the item.
     * Behavior:
     * * Has a maximum height of two lines.
     * ** We recommend that you use `atomic-result-fields-list` to ensure that the fields in this section don’t overflow.
     * * Exposes the `--line-height` variable so child elements can adjust to the current line height.
     * * Has a defined CSS `color` property for text.
     * * Has a font weight.
     */
    interface HTMLAtomicResultSectionBottomMetadataElement extends Components.AtomicResultSectionBottomMetadata, HTMLStencilElement {
    }
    var HTMLAtomicResultSectionBottomMetadataElement: {
        prototype: HTMLAtomicResultSectionBottomMetadataElement;
        new (): HTMLAtomicResultSectionBottomMetadataElement;
    };
    /**
     * This section displays the folded results, available when using the <atomic-result-children> component.
     * Behavior:
     * * Shows children at the bottom of the result, indented and wrapped in a border.
     */
    interface HTMLAtomicResultSectionChildrenElement extends Components.AtomicResultSectionChildren, HTMLStencilElement {
    }
    var HTMLAtomicResultSectionChildrenElement: {
        prototype: HTMLAtomicResultSectionChildrenElement;
        new (): HTMLAtomicResultSectionChildrenElement;
    };
    /**
     * This section displays the field that's important for its search criteria.
     * For example, in Commerce, a product's cost is often more important than the title itself.
     * Behavior:
     * * Has a very large font size.
     * * Is the second closest element beneath the title section.
     */
    interface HTMLAtomicResultSectionEmphasizedElement extends Components.AtomicResultSectionEmphasized, HTMLStencilElement {
    }
    var HTMLAtomicResultSectionEmphasizedElement: {
        prototype: HTMLAtomicResultSectionEmphasizedElement;
        new (): HTMLAtomicResultSectionEmphasizedElement;
    };
    /**
     * This section contains an informative summary of the item's content.
     * Behavior:
     * * Has a fixed height of one to three lines, depending on the layout and density.
     * * Ellipses overflowing text.
     * * Exposes the `--line-height` CSS variable so child elements can adjust to the current line height.
     * * Has a defined CSS `color` property for text.
     */
    interface HTMLAtomicResultSectionExcerptElement extends Components.AtomicResultSectionExcerpt, HTMLStencilElement {
    }
    var HTMLAtomicResultSectionExcerptElement: {
        prototype: HTMLAtomicResultSectionExcerptElement;
        new (): HTMLAtomicResultSectionExcerptElement;
    };
    /**
     * This section identifies the item by its name, and its main use is to make the result list scannable.
     * This is usually the page title.
     * Behavior:
     * * Has a fixed height of two lines on grid layouts.
     * * Exposes the `--line-height` CSS variable so child elements can adjust to the current line height.
     * * Has a defined CSS `color` property for text.
     */
    interface HTMLAtomicResultSectionTitleElement extends Components.AtomicResultSectionTitle, HTMLStencilElement {
    }
    var HTMLAtomicResultSectionTitleElement: {
        prototype: HTMLAtomicResultSectionTitleElement;
        new (): HTMLAtomicResultSectionTitleElement;
    };
    /**
     * This section surfaces some fields that are directly related to the title of the item.
     * For example, in Commerce, this could be the item's rating, which is tied to the nature of the product itself,
     * rather than to the product's description.
     * Behavior:
     * * Has a very small font size.
     * * Is the closest element beneath the title section.
     */
    interface HTMLAtomicResultSectionTitleMetadataElement extends Components.AtomicResultSectionTitleMetadata, HTMLStencilElement {
    }
    var HTMLAtomicResultSectionTitleMetadataElement: {
        prototype: HTMLAtomicResultSectionTitleMetadataElement;
        new (): HTMLAtomicResultSectionTitleMetadataElement;
    };
    /**
     * This section provides visual information about the item.
     * For example, in Commerce, an image is a great shorthand for a product category.
     * An icon can quickly show the item type, or an avatar can help identify to whom it is related.
     * Behavior:
     * * Has a fixed size that depends on the specified image size, the layout, the density, and the screen size.
     * ** When the image size is set to `icon`, this section stays very small.
     * ** You should ensure that elements inside of it take the available space.
     * * Always has a 1:1 aspect ratio.
     */
    interface HTMLAtomicResultSectionVisualElement extends Components.AtomicResultSectionVisual, HTMLStencilElement {
    }
    var HTMLAtomicResultSectionVisualElement: {
        prototype: HTMLAtomicResultSectionVisualElement;
        new (): HTMLAtomicResultSectionVisualElement;
    };
    /**
     * The `atomic-result-table-placeholder` component provides an intermediate visual state that is rendered before the first results are available.
     */
    interface HTMLAtomicResultTablePlaceholderElement extends Components.AtomicResultTablePlaceholder, HTMLStencilElement {
    }
    var HTMLAtomicResultTablePlaceholderElement: {
        prototype: HTMLAtomicResultTablePlaceholderElement;
        new (): HTMLAtomicResultTablePlaceholderElement;
    };
    /**
     * A [result template](https://docs.coveo.com/en/atomic/latest/usage/displaying-results#defining-a-result-template) determines the format of the query results, depending on the conditions that are defined for each template.
     * A `template` element must be the child of an `atomic-result-template`, and either an `atomic-result-list` or `atomic-folded-result-list` must be the parent of each `atomic-result-template`.
     * **Note:** Any `<script>` tags that are defined inside a `<template>` element will not be executed when the results are being rendered.
     * @MapProp name: mustMatch;attr: must-match;docs: The field and values that define which result items the condition must be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is `lithiummessage` or `YouTubePlaylist`: `must-match-filetype="lithiummessage,YouTubePlaylist"`;type: Record<string, string[]> ;default: {}
     * @MapProp name: mustNotMatch;attr: must-not-match;docs: The field and values that define which result items the condition must not be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is not `lithiummessage`: `must-not-match-filetype="lithiummessage";type: Record<string, string[]> ;default: {}
     */
    interface HTMLAtomicResultTemplateElement extends Components.AtomicResultTemplate, HTMLStencilElement {
    }
    var HTMLAtomicResultTemplateElement: {
        prototype: HTMLAtomicResultTemplateElement;
        new (): HTMLAtomicResultTemplateElement;
    };
    /**
     * The `atomic-result-text` component renders the value of a string result field.
     */
    interface HTMLAtomicResultTextElement extends Components.AtomicResultText, HTMLStencilElement {
    }
    var HTMLAtomicResultTextElement: {
        prototype: HTMLAtomicResultTextElement;
        new (): HTMLAtomicResultTextElement;
    };
    /**
     * The `atomic-result-timespan` component renders a target result number field value as a duration.
     */
    interface HTMLAtomicResultTimespanElement extends Components.AtomicResultTimespan, HTMLStencilElement {
    }
    var HTMLAtomicResultTimespanElement: {
        prototype: HTMLAtomicResultTimespanElement;
        new (): HTMLAtomicResultTimespanElement;
    };
    interface HTMLAtomicResultsPerPageElementEventMap {
        "atomic/scrollToTop": any;
    }
    /**
     * The `atomic-results-per-page` component determines how many results to display per page.
     */
    interface HTMLAtomicResultsPerPageElement extends Components.AtomicResultsPerPage, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtomicResultsPerPageElementEventMap>(type: K, listener: (this: HTMLAtomicResultsPerPageElement, ev: AtomicResultsPerPageCustomEvent<HTMLAtomicResultsPerPageElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtomicResultsPerPageElementEventMap>(type: K, listener: (this: HTMLAtomicResultsPerPageElement, ev: AtomicResultsPerPageCustomEvent<HTMLAtomicResultsPerPageElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtomicResultsPerPageElement: {
        prototype: HTMLAtomicResultsPerPageElement;
        new (): HTMLAtomicResultsPerPageElement;
    };
    interface HTMLAtomicSearchBoxElementEventMap {
        "redirect": RedirectionPayload;
    }
    /**
     * The `atomic-search-box` component creates a search box with built-in support for suggestions.
     */
    interface HTMLAtomicSearchBoxElement extends Components.AtomicSearchBox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtomicSearchBoxElementEventMap>(type: K, listener: (this: HTMLAtomicSearchBoxElement, ev: AtomicSearchBoxCustomEvent<HTMLAtomicSearchBoxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtomicSearchBoxElementEventMap>(type: K, listener: (this: HTMLAtomicSearchBoxElement, ev: AtomicSearchBoxCustomEvent<HTMLAtomicSearchBoxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtomicSearchBoxElement: {
        prototype: HTMLAtomicSearchBoxElement;
        new (): HTMLAtomicSearchBoxElement;
    };
    /**
     * The `atomic-search-box-instant-results` component can be added as a child of an `atomic-search-box` component, allowing for the configuration of instant results behavior.
     * This component does not support accessibility out-of-the-box. To do so, see [Instant Results Accessibility](https://docs.coveo.com/en/atomic/latest/usage/accessibility/#instant-results-accessibility).
     * This component is not supported on mobile.
     */
    interface HTMLAtomicSearchBoxInstantResultsElement extends Components.AtomicSearchBoxInstantResults, HTMLStencilElement {
    }
    var HTMLAtomicSearchBoxInstantResultsElement: {
        prototype: HTMLAtomicSearchBoxInstantResultsElement;
        new (): HTMLAtomicSearchBoxInstantResultsElement;
    };
    /**
     * The `atomic-search-box-query-suggestions` component can be added as a child of an `atomic-search-box` component, allowing for the configuration of query suggestion behavior.
     */
    interface HTMLAtomicSearchBoxQuerySuggestionsElement extends Components.AtomicSearchBoxQuerySuggestions, HTMLStencilElement {
    }
    var HTMLAtomicSearchBoxQuerySuggestionsElement: {
        prototype: HTMLAtomicSearchBoxQuerySuggestionsElement;
        new (): HTMLAtomicSearchBoxQuerySuggestionsElement;
    };
    /**
     * The `atomic-search-box-recent-queries` component can be added as a child of an `atomic-search-box` component, allowing for the configuration of recent query suggestions.
     */
    interface HTMLAtomicSearchBoxRecentQueriesElement extends Components.AtomicSearchBoxRecentQueries, HTMLStencilElement {
    }
    var HTMLAtomicSearchBoxRecentQueriesElement: {
        prototype: HTMLAtomicSearchBoxRecentQueriesElement;
        new (): HTMLAtomicSearchBoxRecentQueriesElement;
    };
    /**
     * The `atomic-search-interface` component is the parent to all other atomic components in a search page. It handles the headless search engine and localization configurations.
     */
    interface HTMLAtomicSearchInterfaceElement extends Components.AtomicSearchInterface, HTMLStencilElement {
    }
    var HTMLAtomicSearchInterfaceElement: {
        prototype: HTMLAtomicSearchInterfaceElement;
        new (): HTMLAtomicSearchInterfaceElement;
    };
    /**
     * The `atomic-search-layout` helps organize elements in the page.
     */
    interface HTMLAtomicSearchLayoutElement extends Components.AtomicSearchLayout, HTMLStencilElement {
    }
    var HTMLAtomicSearchLayoutElement: {
        prototype: HTMLAtomicSearchLayoutElement;
        new (): HTMLAtomicSearchLayoutElement;
    };
    /**
     * The `atomic-segmented-facet` displays a horizontal facet of the results for the current query.
     */
    interface HTMLAtomicSegmentedFacetElement extends Components.AtomicSegmentedFacet, HTMLStencilElement {
    }
    var HTMLAtomicSegmentedFacetElement: {
        prototype: HTMLAtomicSegmentedFacetElement;
        new (): HTMLAtomicSegmentedFacetElement;
    };
    /**
     * The 'atomic-segmented-facet-scrollable' component wraps around one or several 'atomic-segmented-facet' to provide horizontal scrolling capabilities.
     */
    interface HTMLAtomicSegmentedFacetScrollableElement extends Components.AtomicSegmentedFacetScrollable, HTMLStencilElement {
    }
    var HTMLAtomicSegmentedFacetScrollableElement: {
        prototype: HTMLAtomicSegmentedFacetScrollableElement;
        new (): HTMLAtomicSegmentedFacetScrollableElement;
    };
    /**
     * The `atomic-smart-snippet` component displays the excerpt of a document that would be most likely to answer a particular query.
     * You can style the snippet by inserting a template element as follows:
     * ```html
     * <atomic-smart-snippet>
     *   <template>
     *     <style>
     *       b {
     *         color: blue;
     *       }
     *     </style>
     *   </template>
     * </atomic-smart-snippet>
     * ```
     */
    interface HTMLAtomicSmartSnippetElement extends Components.AtomicSmartSnippet, HTMLStencilElement {
    }
    var HTMLAtomicSmartSnippetElement: {
        prototype: HTMLAtomicSmartSnippetElement;
        new (): HTMLAtomicSmartSnippetElement;
    };
    interface HTMLAtomicSmartSnippetAnswerElementEventMap {
        "answerSizeUpdated": {height: number};
        "selectInlineLink": InlineLink;
        "beginDelayedSelectInlineLink": InlineLink;
        "cancelPendingSelectInlineLink": InlineLink;
    }
    interface HTMLAtomicSmartSnippetAnswerElement extends Components.AtomicSmartSnippetAnswer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtomicSmartSnippetAnswerElementEventMap>(type: K, listener: (this: HTMLAtomicSmartSnippetAnswerElement, ev: AtomicSmartSnippetAnswerCustomEvent<HTMLAtomicSmartSnippetAnswerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtomicSmartSnippetAnswerElementEventMap>(type: K, listener: (this: HTMLAtomicSmartSnippetAnswerElement, ev: AtomicSmartSnippetAnswerCustomEvent<HTMLAtomicSmartSnippetAnswerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtomicSmartSnippetAnswerElement: {
        prototype: HTMLAtomicSmartSnippetAnswerElement;
        new (): HTMLAtomicSmartSnippetAnswerElement;
    };
    interface HTMLAtomicSmartSnippetCollapseWrapperElement extends Components.AtomicSmartSnippetCollapseWrapper, HTMLStencilElement {
    }
    var HTMLAtomicSmartSnippetCollapseWrapperElement: {
        prototype: HTMLAtomicSmartSnippetCollapseWrapperElement;
        new (): HTMLAtomicSmartSnippetCollapseWrapperElement;
    };
    interface HTMLAtomicSmartSnippetExpandableAnswerElementEventMap {
        "expand": any;
        "collapse": any;
        "selectInlineLink": InlineLink;
        "beginDelayedSelectInlineLink": InlineLink;
        "cancelPendingSelectInlineLink": InlineLink;
    }
    interface HTMLAtomicSmartSnippetExpandableAnswerElement extends Components.AtomicSmartSnippetExpandableAnswer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtomicSmartSnippetExpandableAnswerElementEventMap>(type: K, listener: (this: HTMLAtomicSmartSnippetExpandableAnswerElement, ev: AtomicSmartSnippetExpandableAnswerCustomEvent<HTMLAtomicSmartSnippetExpandableAnswerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtomicSmartSnippetExpandableAnswerElementEventMap>(type: K, listener: (this: HTMLAtomicSmartSnippetExpandableAnswerElement, ev: AtomicSmartSnippetExpandableAnswerCustomEvent<HTMLAtomicSmartSnippetExpandableAnswerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtomicSmartSnippetExpandableAnswerElement: {
        prototype: HTMLAtomicSmartSnippetExpandableAnswerElement;
        new (): HTMLAtomicSmartSnippetExpandableAnswerElement;
    };
    interface HTMLAtomicSmartSnippetFeedbackModalElementEventMap {
        "feedbackSent": any;
    }
    /**
     * The `atomic-smart-snippet-feedback-modal` is automatically created as a child of the `atomic-search-interface` when the `atomic-smart-snippet` is initialized.
     * When the modal is opened, the class `atomic-modal-opened` is added to the body, allowing further customization.
     */
    interface HTMLAtomicSmartSnippetFeedbackModalElement extends Components.AtomicSmartSnippetFeedbackModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtomicSmartSnippetFeedbackModalElementEventMap>(type: K, listener: (this: HTMLAtomicSmartSnippetFeedbackModalElement, ev: AtomicSmartSnippetFeedbackModalCustomEvent<HTMLAtomicSmartSnippetFeedbackModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtomicSmartSnippetFeedbackModalElementEventMap>(type: K, listener: (this: HTMLAtomicSmartSnippetFeedbackModalElement, ev: AtomicSmartSnippetFeedbackModalCustomEvent<HTMLAtomicSmartSnippetFeedbackModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtomicSmartSnippetFeedbackModalElement: {
        prototype: HTMLAtomicSmartSnippetFeedbackModalElement;
        new (): HTMLAtomicSmartSnippetFeedbackModalElement;
    };
    interface HTMLAtomicSmartSnippetSourceElementEventMap {
        "selectSource": any;
        "beginDelayedSelectSource": any;
        "cancelPendingSelectSource": any;
    }
    interface HTMLAtomicSmartSnippetSourceElement extends Components.AtomicSmartSnippetSource, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtomicSmartSnippetSourceElementEventMap>(type: K, listener: (this: HTMLAtomicSmartSnippetSourceElement, ev: AtomicSmartSnippetSourceCustomEvent<HTMLAtomicSmartSnippetSourceElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtomicSmartSnippetSourceElementEventMap>(type: K, listener: (this: HTMLAtomicSmartSnippetSourceElement, ev: AtomicSmartSnippetSourceCustomEvent<HTMLAtomicSmartSnippetSourceElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtomicSmartSnippetSourceElement: {
        prototype: HTMLAtomicSmartSnippetSourceElement;
        new (): HTMLAtomicSmartSnippetSourceElement;
    };
    /**
     * The `atomic-smart-snippet-suggestions-suggestions` component displays an accordion of questions related to the query with their corresponding answers.
     * You can style the snippets by inserting a template element like this:
     * ```html
     * <atomic-smart-snippet-suggestions>
     *   <template>
     *     <style>
     *       b {
     *         color: blue;
     *       }
     *     </style>
     *   </template>
     * </atomic-smart-snippet-suggestions>
     * ```
     */
    interface HTMLAtomicSmartSnippetSuggestionsElement extends Components.AtomicSmartSnippetSuggestions, HTMLStencilElement {
    }
    var HTMLAtomicSmartSnippetSuggestionsElement: {
        prototype: HTMLAtomicSmartSnippetSuggestionsElement;
        new (): HTMLAtomicSmartSnippetSuggestionsElement;
    };
    /**
     * The `atomic-sort-dropdown` component renders a dropdown that the end user can interact with to select the criteria to use when sorting query results.
     */
    interface HTMLAtomicSortDropdownElement extends Components.AtomicSortDropdown, HTMLStencilElement {
    }
    var HTMLAtomicSortDropdownElement: {
        prototype: HTMLAtomicSortDropdownElement;
        new (): HTMLAtomicSortDropdownElement;
    };
    /**
     * The `atomic-sort-expression` component defines a sort expression. This component must be inside an `atomic-sort-dropdown` component.
     */
    interface HTMLAtomicSortExpressionElement extends Components.AtomicSortExpression, HTMLStencilElement {
    }
    var HTMLAtomicSortExpressionElement: {
        prototype: HTMLAtomicSortExpressionElement;
        new (): HTMLAtomicSortExpressionElement;
    };
    /**
     * The `atomic-table-element` element defines a table column in a result list.
     */
    interface HTMLAtomicTableElementElement extends Components.AtomicTableElement, HTMLStencilElement {
    }
    var HTMLAtomicTableElementElement: {
        prototype: HTMLAtomicTableElementElement;
        new (): HTMLAtomicTableElementElement;
    };
    /**
     * The `atomic-text` component leverages the I18n translation module through the atomic-search-interface.
     */
    interface HTMLAtomicTextElement extends Components.AtomicText, HTMLStencilElement {
    }
    var HTMLAtomicTextElement: {
        prototype: HTMLAtomicTextElement;
        new (): HTMLAtomicTextElement;
    };
    /**
     * The `atomic-timeframe` component defines a timeframe of an `atomic-timeframe-facet`, and therefore must be defined within an `atomic-timeframe-facet` component.
     * A timeframe is a span of time from now to a specific time in the past.
     */
    interface HTMLAtomicTimeframeElement extends Components.AtomicTimeframe, HTMLStencilElement {
    }
    var HTMLAtomicTimeframeElement: {
        prototype: HTMLAtomicTimeframeElement;
        new (): HTMLAtomicTimeframeElement;
    };
    /**
     * A facet is a list of values for a certain field occurring in the results.
     * An `atomic-timeframe-facet` displays a facet of the results for the current query as date intervals.
     */
    interface HTMLAtomicTimeframeFacetElement extends Components.AtomicTimeframeFacet, HTMLStencilElement {
    }
    var HTMLAtomicTimeframeFacetElement: {
        prototype: HTMLAtomicTimeframeFacetElement;
        new (): HTMLAtomicTimeframeFacetElement;
    };
    interface HTMLTabBarElement extends Components.TabBar, HTMLStencilElement {
    }
    var HTMLTabBarElement: {
        prototype: HTMLTabBarElement;
        new (): HTMLTabBarElement;
    };
    interface HTMLTabPopoverElement extends Components.TabPopover, HTMLStencilElement {
    }
    var HTMLTabPopoverElement: {
        prototype: HTMLTabPopoverElement;
        new (): HTMLTabPopoverElement;
    };
    interface HTMLElementTagNameMap {
        "atomic-aria-live": HTMLAtomicAriaLiveElement;
        "atomic-automatic-facet": HTMLAtomicAutomaticFacetElement;
        "atomic-automatic-facet-generator": HTMLAtomicAutomaticFacetGeneratorElement;
        "atomic-breadbox": HTMLAtomicBreadboxElement;
        "atomic-category-facet": HTMLAtomicCategoryFacetElement;
        "atomic-citation": HTMLAtomicCitationElement;
        "atomic-color-facet": HTMLAtomicColorFacetElement;
        "atomic-commerce-interface": HTMLAtomicCommerceInterfaceElement;
        "atomic-commerce-pager": HTMLAtomicCommercePagerElement;
        "atomic-commerce-result-list": HTMLAtomicCommerceResultListElement;
        "atomic-commerce-search-box": HTMLAtomicCommerceSearchBoxElement;
        "atomic-component-error": HTMLAtomicComponentErrorElement;
        "atomic-did-you-mean": HTMLAtomicDidYouMeanElement;
        "atomic-external": HTMLAtomicExternalElement;
        "atomic-facet": HTMLAtomicFacetElement;
        "atomic-facet-date-input": HTMLAtomicFacetDateInputElement;
        "atomic-facet-manager": HTMLAtomicFacetManagerElement;
        "atomic-facet-number-input": HTMLAtomicFacetNumberInputElement;
        "atomic-field-condition": HTMLAtomicFieldConditionElement;
        "atomic-focus-detector": HTMLAtomicFocusDetectorElement;
        "atomic-focus-trap": HTMLAtomicFocusTrapElement;
        "atomic-folded-result-list": HTMLAtomicFoldedResultListElement;
        "atomic-format-currency": HTMLAtomicFormatCurrencyElement;
        "atomic-format-number": HTMLAtomicFormatNumberElement;
        "atomic-format-unit": HTMLAtomicFormatUnitElement;
        "atomic-frequently-bought-together": HTMLAtomicFrequentlyBoughtTogetherElement;
        "atomic-generated-answer": HTMLAtomicGeneratedAnswerElement;
        "atomic-generated-answer-feedback-modal": HTMLAtomicGeneratedAnswerFeedbackModalElement;
        "atomic-html": HTMLAtomicHtmlElement;
        "atomic-icon": HTMLAtomicIconElement;
        "atomic-insight-edit-toggle": HTMLAtomicInsightEditToggleElement;
        "atomic-insight-facet": HTMLAtomicInsightFacetElement;
        "atomic-insight-folded-result-list": HTMLAtomicInsightFoldedResultListElement;
        "atomic-insight-full-search-button": HTMLAtomicInsightFullSearchButtonElement;
        "atomic-insight-generated-answer": HTMLAtomicInsightGeneratedAnswerElement;
        "atomic-insight-history-toggle": HTMLAtomicInsightHistoryToggleElement;
        "atomic-insight-interface": HTMLAtomicInsightInterfaceElement;
        "atomic-insight-layout": HTMLAtomicInsightLayoutElement;
        "atomic-insight-no-results": HTMLAtomicInsightNoResultsElement;
        "atomic-insight-numeric-facet": HTMLAtomicInsightNumericFacetElement;
        "atomic-insight-pager": HTMLAtomicInsightPagerElement;
        "atomic-insight-query-error": HTMLAtomicInsightQueryErrorElement;
        "atomic-insight-query-summary": HTMLAtomicInsightQuerySummaryElement;
        "atomic-insight-refine-modal": HTMLAtomicInsightRefineModalElement;
        "atomic-insight-refine-toggle": HTMLAtomicInsightRefineToggleElement;
        "atomic-insight-result": HTMLAtomicInsightResultElement;
        "atomic-insight-result-action": HTMLAtomicInsightResultActionElement;
        "atomic-insight-result-action-bar": HTMLAtomicInsightResultActionBarElement;
        "atomic-insight-result-children": HTMLAtomicInsightResultChildrenElement;
        "atomic-insight-result-children-template": HTMLAtomicInsightResultChildrenTemplateElement;
        "atomic-insight-result-list": HTMLAtomicInsightResultListElement;
        "atomic-insight-result-template": HTMLAtomicInsightResultTemplateElement;
        "atomic-insight-search-box": HTMLAtomicInsightSearchBoxElement;
        "atomic-insight-smart-snippet": HTMLAtomicInsightSmartSnippetElement;
        "atomic-insight-smart-snippet-feedback-modal": HTMLAtomicInsightSmartSnippetFeedbackModalElement;
        "atomic-insight-smart-snippet-suggestions": HTMLAtomicInsightSmartSnippetSuggestionsElement;
        "atomic-insight-tab": HTMLAtomicInsightTabElement;
        "atomic-insight-tabs": HTMLAtomicInsightTabsElement;
        "atomic-insight-timeframe-facet": HTMLAtomicInsightTimeframeFacetElement;
        "atomic-ipx-body": HTMLAtomicIpxBodyElement;
        "atomic-ipx-button": HTMLAtomicIpxButtonElement;
        "atomic-ipx-embedded": HTMLAtomicIpxEmbeddedElement;
        "atomic-ipx-modal": HTMLAtomicIpxModalElement;
        "atomic-ipx-refine-modal": HTMLAtomicIpxRefineModalElement;
        "atomic-ipx-refine-toggle": HTMLAtomicIpxRefineToggleElement;
        "atomic-ipx-result-link": HTMLAtomicIpxResultLinkElement;
        "atomic-ipx-tab": HTMLAtomicIpxTabElement;
        "atomic-ipx-tabs": HTMLAtomicIpxTabsElement;
        "atomic-layout-section": HTMLAtomicLayoutSectionElement;
        "atomic-load-more-children-results": HTMLAtomicLoadMoreChildrenResultsElement;
        "atomic-load-more-results": HTMLAtomicLoadMoreResultsElement;
        "atomic-modal": HTMLAtomicModalElement;
        "atomic-no-results": HTMLAtomicNoResultsElement;
        "atomic-notifications": HTMLAtomicNotificationsElement;
        "atomic-numeric-facet": HTMLAtomicNumericFacetElement;
        "atomic-numeric-range": HTMLAtomicNumericRangeElement;
        "atomic-pager": HTMLAtomicPagerElement;
        "atomic-popover": HTMLAtomicPopoverElement;
        "atomic-query-error": HTMLAtomicQueryErrorElement;
        "atomic-query-summary": HTMLAtomicQuerySummaryElement;
        "atomic-quickview": HTMLAtomicQuickviewElement;
        "atomic-quickview-modal": HTMLAtomicQuickviewModalElement;
        "atomic-rating-facet": HTMLAtomicRatingFacetElement;
        "atomic-rating-range-facet": HTMLAtomicRatingRangeFacetElement;
        "atomic-recs-error": HTMLAtomicRecsErrorElement;
        "atomic-recs-interface": HTMLAtomicRecsInterfaceElement;
        "atomic-recs-list": HTMLAtomicRecsListElement;
        "atomic-recs-result": HTMLAtomicRecsResultElement;
        "atomic-recs-result-template": HTMLAtomicRecsResultTemplateElement;
        "atomic-refine-modal": HTMLAtomicRefineModalElement;
        "atomic-refine-toggle": HTMLAtomicRefineToggleElement;
        "atomic-relevance-inspector": HTMLAtomicRelevanceInspectorElement;
        "atomic-result": HTMLAtomicResultElement;
        "atomic-result-badge": HTMLAtomicResultBadgeElement;
        "atomic-result-children": HTMLAtomicResultChildrenElement;
        "atomic-result-children-template": HTMLAtomicResultChildrenTemplateElement;
        "atomic-result-date": HTMLAtomicResultDateElement;
        "atomic-result-fields-list": HTMLAtomicResultFieldsListElement;
        "atomic-result-html": HTMLAtomicResultHtmlElement;
        "atomic-result-icon": HTMLAtomicResultIconElement;
        "atomic-result-image": HTMLAtomicResultImageElement;
        "atomic-result-link": HTMLAtomicResultLinkElement;
        "atomic-result-list": HTMLAtomicResultListElement;
        "atomic-result-localized-text": HTMLAtomicResultLocalizedTextElement;
        "atomic-result-multi-value-text": HTMLAtomicResultMultiValueTextElement;
        "atomic-result-number": HTMLAtomicResultNumberElement;
        "atomic-result-placeholder": HTMLAtomicResultPlaceholderElement;
        "atomic-result-printable-uri": HTMLAtomicResultPrintableUriElement;
        "atomic-result-rating": HTMLAtomicResultRatingElement;
        "atomic-result-section-actions": HTMLAtomicResultSectionActionsElement;
        "atomic-result-section-badges": HTMLAtomicResultSectionBadgesElement;
        "atomic-result-section-bottom-metadata": HTMLAtomicResultSectionBottomMetadataElement;
        "atomic-result-section-children": HTMLAtomicResultSectionChildrenElement;
        "atomic-result-section-emphasized": HTMLAtomicResultSectionEmphasizedElement;
        "atomic-result-section-excerpt": HTMLAtomicResultSectionExcerptElement;
        "atomic-result-section-title": HTMLAtomicResultSectionTitleElement;
        "atomic-result-section-title-metadata": HTMLAtomicResultSectionTitleMetadataElement;
        "atomic-result-section-visual": HTMLAtomicResultSectionVisualElement;
        "atomic-result-table-placeholder": HTMLAtomicResultTablePlaceholderElement;
        "atomic-result-template": HTMLAtomicResultTemplateElement;
        "atomic-result-text": HTMLAtomicResultTextElement;
        "atomic-result-timespan": HTMLAtomicResultTimespanElement;
        "atomic-results-per-page": HTMLAtomicResultsPerPageElement;
        "atomic-search-box": HTMLAtomicSearchBoxElement;
        "atomic-search-box-instant-results": HTMLAtomicSearchBoxInstantResultsElement;
        "atomic-search-box-query-suggestions": HTMLAtomicSearchBoxQuerySuggestionsElement;
        "atomic-search-box-recent-queries": HTMLAtomicSearchBoxRecentQueriesElement;
        "atomic-search-interface": HTMLAtomicSearchInterfaceElement;
        "atomic-search-layout": HTMLAtomicSearchLayoutElement;
        "atomic-segmented-facet": HTMLAtomicSegmentedFacetElement;
        "atomic-segmented-facet-scrollable": HTMLAtomicSegmentedFacetScrollableElement;
        "atomic-smart-snippet": HTMLAtomicSmartSnippetElement;
        "atomic-smart-snippet-answer": HTMLAtomicSmartSnippetAnswerElement;
        "atomic-smart-snippet-collapse-wrapper": HTMLAtomicSmartSnippetCollapseWrapperElement;
        "atomic-smart-snippet-expandable-answer": HTMLAtomicSmartSnippetExpandableAnswerElement;
        "atomic-smart-snippet-feedback-modal": HTMLAtomicSmartSnippetFeedbackModalElement;
        "atomic-smart-snippet-source": HTMLAtomicSmartSnippetSourceElement;
        "atomic-smart-snippet-suggestions": HTMLAtomicSmartSnippetSuggestionsElement;
        "atomic-sort-dropdown": HTMLAtomicSortDropdownElement;
        "atomic-sort-expression": HTMLAtomicSortExpressionElement;
        "atomic-table-element": HTMLAtomicTableElementElement;
        "atomic-text": HTMLAtomicTextElement;
        "atomic-timeframe": HTMLAtomicTimeframeElement;
        "atomic-timeframe-facet": HTMLAtomicTimeframeFacetElement;
        "tab-bar": HTMLTabBarElement;
        "tab-popover": HTMLTabPopoverElement;
    }
}
declare namespace LocalJSX {
    /**
     * The `atomic-aria-live` component notifies screen readers of changes in the search interface.
     */
    interface AtomicAriaLive {
    }
    /**
     * An automatic facet is a special type of facet generated by the automatic facets feature.
     * Unlike regular facets, which need to be explicitly defined and requested in the query,
     * automatic facets are dynamically generated by the index in response to the query.
     * **Note:** This component should never be used on its own. It is used internally by the `atomic-automatic-facet-generator`
     * component to automatically render updated facets. However, you can use the shadow parts to style the automatically generated facets.
     * To learn more about the automatic facet generator feature, see: [About the Facet Generator](https://docs.coveo.com/en/n9sd0159/).
     */
    interface AtomicAutomaticFacet {
        "facet": AutomaticFacet;
        "facetId": string;
        "field": string;
        "isCollapsed": boolean;
        "searchStatus": SearchStatus;
    }
    /**
     * The `atomic-automatic-facet-generator` is a component that renders the facets from
     * the automatic facets feature. Unlike regular facets, which need to be explicitly defined
     * and requested in the query, automatic facets are dynamically generated by the index
     * in response to the search query.
     * **Note:** This component renders one or more [automatic facets](https://docs.coveo.com/en/atomic/latest/reference/components/atomic-automatic-facet/) based on the `desiredCount` property.
     * To learn more about the automatic facet generator feature, see: [About the Facet Generator](https://docs.coveo.com/en/n9sd0159/).
     */
    interface AtomicAutomaticFacetGenerator {
        /**
          * The desired count of automatic facets.  Minimum: `1` Maximum: `20`
          * @defaultValue `5`
         */
        "desiredCount"?: number;
        /**
          * The desired number of automatically generated facet values.  Minimum: `1`
          * @defaultValue `8`
         */
        "numberOfValues"?: number;
    }
    /**
     * The `atomic-breadbox` component creates breadcrumbs that display a summary of the currently active facet values.
     */
    interface AtomicBreadbox {
        /**
          * This prop allows you to control the display depth of the path by specifying the number of parent or ancestor breadcrumbs links relative to the currently selected value.  If the path size is equal to or less than the pathLimit, all values in the path will be displayed without truncation.  If the path size exceeds the pathLimit, it will truncate the path by replacing the middle values with ellipses ('...').  Minimum: `1`
          * @defaultValue `3`
         */
        "pathLimit"?: number;
    }
    /**
     * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., number of occurrences).
     * An `atomic-category-facet` displays a facet of values in a browsable, hierarchical fashion.
     */
    interface AtomicCategoryFacet {
        /**
          * The base path shared by all values for the facet.  Specify the property as an array using a JSON string representation: ```html  <atomic-category-facet base-path='["first value", "second value"]' ></atomic-category-facet> ```
         */
        "basePath"?: string[] | string;
        /**
          * The character that separates values of a multi-value field.  *Note:* If you use the [example formatting](https://docs.coveo.com/en/atomic/latest/reference/components/atomic-category-facet/#usage-notes) for the associated multi-value field, you must set this value to `|` or the facet won't display properly.
         */
        "delimitingCharacter"?: string;
        /**
          * The required facets and values for this facet to be displayed. Examples: ```html <atomic-facet facet-id="abc" field="objecttype" ...></atomic-facet>  <!-- To show the facet when any value is selected in the facet with id "abc": --> <atomic-category-facet   depends-on-abc   ... ></atomic-category-facet>  <!-- To show the facet when value "doc" is selected in the facet with id "abc": --> <atomic-category-facet   depends-on-abc="doc"   ... ></atomic-category-facet> ```
         */
        "dependsOn"?: Record<string, string>;
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Whether to use basePath as a filter for the results.
         */
        "filterByBasePath"?: boolean;
        /**
          * Whether to exclude the parents of folded results when estimating the result count for each facet value.
         */
        "filterFacetCount"?: boolean;
        /**
          * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.
         */
        "headingLevel"?: number;
        /**
          * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values. Note: A high injectionDepth may negatively impact the facet request performance. Minimum: `0` Default: `1000`
         */
        "injectionDepth"?: number;
        /**
          * Specifies whether the facet is collapsed. When the facet is the child of an `atomic-facet-manager` component, the facet manager controls this property.
         */
        "isCollapsed"?: boolean;
        /**
          * The non-localized label for the facet. Used in the `atomic-breadbox` component through the bindings store.
         */
        "label"?: string;
        /**
          * The number of values to request for this facet. Also determines the number of additional values to request each time more values are shown.
         */
        "numberOfValues"?: number;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are 'alphanumeric' and 'occurrences'. For this criterion to apply to the top-layer facet values, disable [facet value ordering](https://docs.coveo.com/en/l1qf4156/#facet-value-ordering) in your Dynamic Navigation Experience configuration.
         */
        "sortCriteria"?: CategoryFacetSortCriterion;
        /**
          * Whether this facet should contain a search box.
         */
        "withSearch"?: boolean;
    }
    interface AtomicCitation {
        /**
          * The citation item information.
         */
        "citation": GeneratedAnswerCitation;
        /**
          * The citation index.
         */
        "index": number;
        /**
          * An `InteractiveCitation` controller instance. It is used when the user interacts with the citation by selecting or hovering over it.
         */
        "interactiveCitation": InteractiveCitation;
        /**
          * Callback function invoked when the user stops hovering over a citation. `citationHoverTimeMs` is the amount of time over which the citation has been hovered.
         */
        "sendHoverEndEvent": (citationHoverTimeMs: number) => void;
    }
    /**
     * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., number of occurrences).
     * An `atomic-color-facet` displays a facet of the results for the current query as colors.
     */
    interface AtomicColorFacet {
        /**
          * Specifies an explicit list of `allowedValues` in the Search API request. This list is in the form of a JSON string.  If you specify a list of values for this option, the facet only uses these values (if they are available in the current result set).  Example:  The following facet only uses the `Contact`, `Account`, and `File` values of the `objecttype` field. Even if the current result set contains other `objecttype` values, such as `Message` or `Product`, the facet does not use them.  ```html <atomic-color-facet field="objecttype" allowed-values='["Contact","Account","File"]'></atomic-color-facet> ```  The maximum amount of allowed values is 25.  The default value is `undefined`, and the facet uses all available values for its `field` in the current result set.
         */
        "allowedValues"?: string[] | string;
        /**
          * Identifies the facet values that must appear at the top, in this order. This parameter can be used in conjunction with the `sortCriteria` parameter.  Facet values not part of the `customSort` list will be sorted according to the `sortCriteria`.  Example:  The following facet will sort the `Contact`, `Account`, and `File` values at the top of the list for the `objecttype` field.  If there are more than these 3 values available, the rest of the list will be sorted using `occurrences`.  ```html <atomic-color-facet field="objecttype" custom-sort='["Contact","Account","File"]' sort-criteria='occurrences'></atomic-color-facet> ``` The maximum amount of custom sort values is 25.  The default value is `undefined`, and the facet values will be sorted using only the `sortCriteria`.
         */
        "customSort"?: string[] | string;
        /**
          * The required facets and values for this facet to be displayed. Examples: ```html <atomic-facet facet-id="abc" field="objecttype" ...></atomic-facet>  <!-- To show the facet when any value is selected in the facet with id "abc": --> <atomic-color-facet   depends-on-abc   ... ></atomic-color-facet>  <!-- To show the facet when value "doc" is selected in the facet with id "abc": --> <atomic-color-facet   depends-on-abc="doc"   ... ></atomic-color-facet> ```
         */
        "dependsOn"?: Record<string, string>;
        /**
          * Whether to display the facet values as checkboxes (multiple selection) or boxes (multiple selection). Possible values are 'checkbox', and 'box'.
         */
        "displayValuesAs"?: 'checkbox' | 'box';
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Whether to exclude the parents of folded results when estimating the result count for each facet value.
         */
        "filterFacetCount"?: boolean;
        /**
          * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.
         */
        "headingLevel"?: number;
        /**
          * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values. Note: A high injectionDepth may negatively impact the facet request performance. Minimum: `0` Default: `1000`
         */
        "injectionDepth"?: number;
        /**
          * Specifies whether the facet is collapsed. When the facet is the child of an `atomic-facet-manager` component, the facet manager controls this property.
         */
        "isCollapsed"?: boolean;
        /**
          * The non-localized label for the facet. Used in the `atomic-breadbox` component through the bindings store.
         */
        "label"?: string;
        /**
          * The number of values to request for this facet. Also determines the number of additional values to request each time more values are shown.
         */
        "numberOfValues"?: number;
        /**
          * Specifies how a result must match the selected facet values. Allowed values: - `atLeastOneValue`: A result will match if at least one of the corresponding facet values is selected. - `allValues`: A result will match if all corresponding facet values are selected.
         */
        "resultsMustMatch"?: FacetResultsMustMatch;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are 'score', 'alphanumeric', 'occurrences', and 'automatic'.
         */
        "sortCriteria"?: FacetSortCriterion;
        /**
          * Whether this facet should contain a search box.
         */
        "withSearch"?: boolean;
    }
    interface AtomicCommerceInterface {
        /**
          * The value to set the [nonce](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce) attribute to on inline script and style elements generated by this interface and its child components. If your application is served with a Content Security Policy (CSP) that doesn't include the `script-src: 'unsafe-inline'` or `style-src: 'unsafe-inline'` directives, you should ensure that your application server generates a new nonce on every page load and uses the generated value to set this prop and serve the corresponding CSP response headers (i.e., script-src 'nonce-<YOUR_GENERATED_NONCE>' and style-src 'nonce-<YOUR_GENERATED_NONCE>'). Otherwise you may see console errors such as  - Refused to execute inline script because it violates the following Content Security Policy directive: [...]  - Refused to apply inline style because it violates the following Content Security Policy directive: [...].
          * @example : ```html <script nonce="<YOUR_GENERATED_NONCE>"> import {setNonce} from '@coveo/atomic'; setNonce('<YOUR_GENERATED_NONCE>'); </script> ```
         */
        "CspNonce"?: string;
        /**
          * Whether analytics should be enabled.
         */
        "analytics"?: boolean;
        /**
          * The commerce interface headless engine.
         */
        "engine"?: CommerceEngine;
        /**
          * the commerce interface i18next instance.
         */
        "i18n"?: i18n;
        /**
          * The icon assets path. By default, this will be a relative URL pointing to `./assets`.  Example: "/mypublicpath/icons"
         */
        "iconAssetsPath"?: string;
        /**
          * the commerce interface language.
         */
        "language"?: string;
        /**
          * The language assets path. By default, this will be a relative URL pointing to `./lang`.  Example: "/mypublicpath/languages"
         */
        "languageAssetsPath"?: string;
        /**
          * The severity level of the messages to log in the console.
         */
        "logLevel"?: LogLevel;
        /**
          * Whether the state should be reflected in the URL parameters.
         */
        "reflectStateInUrl"?: boolean;
        /**
          * The CSS selector for the container where the interface will scroll back to.
         */
        "scrollContainer"?: string;
        /**
          * The type of the interface. - 'search': Indicates that the interface is used for Search. - 'product-listing': Indicates that the interface is used for Product listing.
         */
        "type"?: | 'search'
    | 'product-listing';
    }
    /**
     * The `atomic-pager` provides buttons that allow the end user to navigate through the different product pages.
     */
    interface AtomicCommercePager {
        /**
          * The SVG icon to use to display the Next button.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly.
         */
        "nextButtonIcon"?: string;
        /**
          * Specifies how many page buttons to display in the pager.
         */
        "numberOfPages"?: number;
        "onAtomic/scrollToTop"?: (event: AtomicCommercePagerCustomEvent<any>) => void;
        /**
          * The SVG icon to use to display the Previous button.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly.
         */
        "previousButtonIcon"?: string;
    }
    interface AtomicCommerceResultList {
        /**
          * The spacing of various elements in the result list, including the gap between results, the gap between parts of a result, and the font sizes of different parts in a result.
         */
        "density"?: 'normal' | 'compact';
        /**
          * The desired layout to use when displaying results. Layouts affect how many results to display per row and how visually distinct they are from each other.
         */
        "display"?: 'grid' | 'list';
        /**
          * The expected size of the image displayed in the results.
         */
        "imageSize"?: number;
    }
    /**
     * The `atomic-commerce-search-box` component creates a search box with built-in support for suggestions.
     */
    interface AtomicCommerceSearchBox {
        /**
          * Whether to clear all active query filters when the end user submits a new query from the search box. Setting this option to "false" is not recommended & can lead to an increasing number of queries returning no results.
         */
        "clearFilters"?: boolean;
        /**
          * Whether to prevent the user from triggering searches and query suggestions from the component. Perfect for use cases where you need to disable the search conditionally. For the specific case when you need to disable the search based on the length of the query, refer to {@link minimumQueryLength}.
         */
        "disableSearch"?: boolean;
        /**
          * Whether to interpret advanced [Coveo Cloud query syntax](https://docs.coveo.com/en/1814/) in the query. You should only enable query syntax in the search box if you have good reasons to do so, as it requires end users to be familiar with Coveo Cloud query syntax, otherwise they will likely be surprised by the search box behaviour.  When the `redirection-url` property is set and redirects to a page with more `atomic-commerce-search-box` components, all `atomic-commerce-search-box` components need to have the same `enable-query-syntax` value.
         */
        "enableQuerySyntax"?: boolean;
        /**
          * The minimum query length required to enable search. For example, to disable the search for empty queries, set this to `1`.
         */
        "minimumQueryLength"?: number;
        /**
          * The amount of queries displayed when the user interacts with the search box. By default, a mix of query suggestions and recent queries will be shown. You can configure those settings using the following components as children:  - atomic-commerce-search-box-query-suggestions  - atomic-commerce-search-box-recent-queries
         */
        "numberOfQueries"?: number;
        /**
          * Event that is emitted when a standalone search box redirection is triggered. By default, the search box will directly change the URL and redirect accordingly, so if you want to handle the redirection differently, use this event.  Example: ```html <script>   document.querySelector('atomic-commerce-search-box').addEventListener((e) => {     e.preventDefault();     // handle redirection   }); </script> ... <atomic-commerce-search-box redirection-url="/search"></atomic-commerce-search-box> ```
         */
        "onRedirect"?: (event: AtomicCommerceSearchBoxCustomEvent<RedirectionPayload>) => void;
        /**
          * Defining this option makes the search box standalone (see [Use a Standalone Search Box](https://docs.coveo.com/en/atomic/latest/usage/ssb/)).  This option defines the default URL the user should be redirected to, when a query is submitted. If a query pipeline redirect is triggered, it will redirect to that URL instead (see [query pipeline triggers](https://docs.coveo.com/en/1458)).
         */
        "redirectionUrl"?: string;
        /**
          * The delay for suggestion queries on input, in milliseconds.  The suggestion request will be delayed until the end user stops typing for at least the specified amount of time.  This delay is used to avoid sending too many requests to the Coveo Platform when the user is typing, as well as reducing potential input lag on low end devices. A higher delay will reduce input lag, at the cost of suggestions freshness.
         */
        "suggestionDelay"?: number;
        /**
          * The timeout for suggestion queries, in milliseconds. If a suggestion query times out, the suggestions from that particular query won't be shown.
         */
        "suggestionTimeout"?: number;
    }
    /**
     * The `atomic-component-error` is used by other components to return errors. This doesn't require any configuration.
     */
    interface AtomicComponentError {
        "element": HTMLElement;
        "error": Error;
    }
    /**
     * The `atomic-did-you-mean` component is responsible for handling query corrections. When a query returns no result but finds a possible query correction, the component either suggests the correction or automatically triggers a new query with the suggested term.
     */
    interface AtomicDidYouMean {
        /**
          * Whether to automatically apply corrections for queries that would otherwise return no results. When `automaticallyCorrectQuery` is `true`, the component automatically triggers a new query using the suggested term. When `automaticallyCorrectQuery` is `false`, the component returns the suggested term without triggering a new query.  The default value is `true`.
         */
        "automaticallyCorrectQuery"?: boolean;
        /**
          * Define which query correction system to use  `legacy`: Query correction is powered by the legacy index system. This system relies on an algorithm using solely the index content to compute the suggested terms. `next`: Query correction is powered by a machine learning system, requiring a valid query suggestion model configured in your Coveo environment to function properly. This system relies on machine learning algorithms to compute the suggested terms.  Default value is `legacy`. In the next major version of Atomic, the default value will be `next`.
         */
        "queryCorrectionMode"?: 'legacy' | 'next';
    }
    /**
     * The `atomic-external` component allows components defined outside of the `atomic-search-interface` to initialize.
     */
    interface AtomicExternal {
        /**
          * The CSS selector that identifies the `atomic-search-interface` component with which to initialize the external components.
         */
        "selector"?: string;
    }
    /**
     * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., number of occurrences).
     * An `atomic-facet` displays a facet of the results for the current query.
     */
    interface AtomicFacet {
        /**
          * Specifies an explicit list of `allowedValues` in the Search API request, as a JSON string representation.  If you specify a list of values for this option, the facet uses only these values (if they are available in the current result set).  Example:  The following facet only uses the `Contact`, `Account`, and `File` values of the `objecttype` field. Even if the current result set contains other `objecttype` values, such as `Message`, or `Product`, the facet does not use those other values.  ```html <atomic-facet field="objecttype" allowed-values='["Contact","Account","File"]'></atomic-facet> ```  The maximum amount of allowed values is 25.  Default value is `undefined`, and the facet uses all available values for its `field` in the current result set.
         */
        "allowedValues"?: string[] | string;
        /**
          * Identifies the facet values that must appear at the top, in this order. This parameter can be used in conjunction with the `sortCriteria` parameter.  Facet values not part of the `customSort` list will be sorted according to the `sortCriteria`.  Example:  The following facet will sort the `Contact`, `Account`, and `File` values at the top of the list for the `objecttype` field.  If there are more than these 3 values available, the rest of the list will be sorted using `occurrences`.  ```html <atomic-facet field="objecttype" custom-sort='["Contact","Account","File"]' sort-criteria='occurrences'></atomic-facet> ``` The maximum amount of custom sort values is 25.  The default value is `undefined`, and the facet values will be sorted using only the `sortCriteria`.
         */
        "customSort"?: string[] | string;
        /**
          * The required facets and values for this facet to be displayed. Examples: ```html <atomic-facet facet-id="abc" field="objecttype" ...></atomic-facet>  <!-- To show the facet when any value is selected in the facet with id "abc": --> <atomic-facet   depends-on-abc   ... ></atomic-facet>  <!-- To show the facet when value "doc" is selected in the facet with id "abc": --> <atomic-facet   depends-on-abc="doc"   ... ></atomic-facet> ```
         */
        "dependsOn"?: Record<string, string>;
        /**
          * Whether to display the facet values as checkboxes (multiple selection), links (single selection) or boxes (multiple selection). Possible values are 'checkbox', 'link', and 'box'.
         */
        "displayValuesAs"?: 'checkbox' | 'link' | 'box';
        /**
          * Whether to allow excluding values from the facet.
         */
        "enableExclusion"?: boolean;
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Whether to exclude the parents of folded results when estimating the result count for each facet value.
         */
        "filterFacetCount"?: boolean;
        /**
          * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.
         */
        "headingLevel"?: number;
        /**
          * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values. Note: A high injectionDepth may negatively impact the facet request performance. Minimum: `0` Default: `1000`
         */
        "injectionDepth"?: number;
        /**
          * Specifies whether the facet is collapsed. When the facet is the child of an `atomic-facet-manager` component, the facet manager controls this property.
         */
        "isCollapsed"?: boolean;
        /**
          * The non-localized label for the facet. Used in the `atomic-breadbox` component through the bindings store.
         */
        "label"?: string;
        /**
          * The number of values to request for this facet. Also determines the number of additional values to request each time more values are shown.
         */
        "numberOfValues"?: number;
        /**
          * Specifies how a result must match the selected facet values. Allowed values: - `atLeastOneValue`: A result will match if at least one of the corresponding facet values is selected. - `allValues`: A result will match if all corresponding facet values are selected.
         */
        "resultsMustMatch"?: FacetResultsMustMatch;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are 'score', 'alphanumeric', 'alphanumericDescending', 'occurrences', and 'automatic'.
         */
        "sortCriteria"?: FacetSortCriterion;
        /**
          * Whether this facet should contain a search box.
         */
        "withSearch"?: boolean;
    }
    /**
     * Internal component made to be integrated in a TimeframeFacet.
     */
    interface AtomicFacetDateInput {
        "bindings": AnyBindings;
        "filter": DateFilter;
        "filterState": DateFilterState;
        "label": string;
        "max"?: string;
        "min"?: string;
        "onAtomic/dateInputApply"?: (event: AtomicFacetDateInputCustomEvent<any>) => void;
    }
    /**
     * The `atomic-facet-manager` helps reorder facets and their values to match the most recent search response with the most relevant results. A facet component is slotted within an `atomic-facet-manager` to leverage this functionality.
     */
    interface AtomicFacetManager {
        /**
          * The number of expanded facets inside the manager. Remaining facets are automatically collapsed.  Using the value `0` collapses all facets. Using the value `-1` disables the feature and keeps all facets expanded. Useful when you want to set the collapse state for each facet individually.
         */
        "collapseFacetsAfter"?: number;
    }
    /**
     * Internal component made to be integrated in a NumericFacet.
     */
    interface AtomicFacetNumberInput {
        "bindings": AnyBindings;
        "filter": NumericFilter;
        "filterState": NumericFilterState;
        "label": string;
        "onAtomic/numberInputApply"?: (event: AtomicFacetNumberInputCustomEvent<any>) => void;
        "type": NumberInputType;
    }
    /**
     * The `atomic-field-condition` component takes a list of conditions that, if fulfilled, apply the template in which it's defined.
     * The condition properties can be based on any top-level result property of the `result` object, not restricted to fields (e.g., `isRecommendation`).
     * @MapProp name: mustMatch;attr: must-match;docs: The field and values that define which result items the condition must be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is `lithiummessage` or `YouTubePlaylist`: `must-match-filetype="lithiummessage,YouTubePlaylist"`;type: Record<string, string[]> ;default: {}
     * @MapProp name: mustNotMatch;attr: must-not-match;docs: The field and values that define which result items the condition must not be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is not `lithiummessage`: `must-not-match-filetype="lithiummessage";type: Record<string, string[]> ;default: {}
     */
    interface AtomicFieldCondition {
        /**
          * Verifies whether the specified fields are defined.
         */
        "ifDefined"?: string;
        /**
          * Verifies whether the specified fields are not defined.
         */
        "ifNotDefined"?: string;
    }
    interface AtomicFocusDetector {
        "onFocusEnter"?: (event: AtomicFocusDetectorCustomEvent<any>) => void;
        "onFocusExit"?: (event: AtomicFocusDetectorCustomEvent<any>) => void;
    }
    interface AtomicFocusTrap {
        "active"?: boolean;
        /**
          * The container to hide from the tabindex and accessibility DOM when the focus trap is inactive.
         */
        "container"?: HTMLElement;
        /**
          * The common ancestor of the focus trap and of all the elements that should be inaccessible when inside the focus trap.
         */
        "scope"?: HTMLElement;
        /**
          * Whether the element should be hidden from screen readers & not interactive with the tab, when not active.
         */
        "shouldHideSelf"?: boolean;
        /**
          * The source to focus when the focus trap becomes inactive.
         */
        "source"?: HTMLElement;
    }
    /**
     * The `atomic-folded-result-list` component is responsible for displaying folded query results, by applying one or more result templates for up to three layers (i.e., to the result, child and grandchild).
     */
    interface AtomicFoldedResultList {
        /**
          * The name of the field that uniquely identifies a result within a collection.
          * @defaultValue `foldingchild`
         */
        "childField"?: string;
        /**
          * The name of the field on which to do the folding. The folded result list component will use the values of this field to resolve the collections of result items.
          * @defaultValue `foldingcollection`
         */
        "collectionField"?: string;
        /**
          * The spacing of various elements in the result list, including the gap between results, the gap between parts of a result, and the font sizes of different parts in a result.
         */
        "density"?: ItemDisplayDensity;
        /**
          * The expected size of the image displayed in the results.
         */
        "imageSize"?: ItemDisplayImageSize;
        /**
          * The initial number of child results to request for each folded collection, before expansion.
          * @defaultValue `2`
          * @example For an email thread with a total of 20 messages, using the default value of `2` will request the top two child messages, based on the current sort criteria and query, to be returned as children of the parent message. The user can then click to expand the collection and see the remaining messages that match the current query (i.e., not necessarily all remaining 18 messages). Those messages will be sorted based on the current sort criteria (i.e., not necessarily by date). See the `atomic-load-more-children-results` component. For more info on Result Folding, see [Result Folding](https://docs.coveo.com/en/1884).
         */
        "numberOfFoldedResults"?: number;
        /**
          * The name of the field that determines whether a certain result is a top result containing other child results within a collection.
          * @defaultValue `foldingparent`
         */
        "parentField"?: string;
    }
    /**
     * The `atomic-format-currency` component is used for formatting currencies.
     * The numerical format of compatible parents will be set according to the currency property of this component.
     */
    interface AtomicFormatCurrency {
        /**
          * The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as "USD" for the US dollar, "EUR" for the euro, or "CNY" for the Chinese RMB. See the current [currency & funds code list](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency).
         */
        "currency": string;
    }
    /**
     * The `atomic-format-number` component is used for number formatting.
     * The numerical format of compatible parents will be set according to the properties of this component.
     */
    interface AtomicFormatNumber {
        /**
          * The maximum number of fraction digits to use.
         */
        "maximumFractionDigits"?: number;
        /**
          * The maximum number of significant digits to use.
         */
        "maximumSignificantDigits"?: number;
        /**
          * The minimum number of fraction digits to use.
         */
        "minimumFractionDigits"?: number;
        /**
          * The minimum number of integer digits to use.
         */
        "minimumIntegerDigits"?: number;
        /**
          * The minimum number of significant digits to use.
         */
        "minimumSignificantDigits"?: number;
    }
    /**
     * The `atomic-format-unit` component is used for formatting numbers with units.
     * The numerical format of compatible parents will be set according to the properties of this component.
     */
    interface AtomicFormatUnit {
        /**
          * The unit to use in unit formatting. Leverages the [Intl.NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat) constructor. The unit must be [sanctioned unit identifier](https://tc39.es/proposal-unified-intl-numberformat/section6/locales-currencies-tz_proposed_out.html#sec-issanctionedsimpleunitidentifier)
         */
        "unit": string;
        /**
          * The unit formatting style to use in unit formatting.  * "long" (e.g., 16 litres) * "short" (e.g., 16 l) * "narrow" (e.g., 16l)
         */
        "unitDisplay"?: 'long' | 'short' | 'narrow';
    }
    /**
     * The `atomic-frequently-bought-together` component suggests products frequently bought with the current product based on the shopping cart of other users.
     */
    interface AtomicFrequentlyBoughtTogether {
    }
    /**
     * The `atomic-generated-answer` component uses Coveo Machine Learning (Coveo ML) models to automatically generate an answer to a query executed by the user.
     * For more information, see [About Relevance Generative Answering (RGA)](https://docs.coveo.com/en/n9de0370/)
     */
    interface AtomicGeneratedAnswer {
        /**
          * The answer style to apply when the component first loads. Options:   - `default`: Generate the answer without specific formatting instructions.   - `bullet`: Generate the answer as a bulleted list.   - `step`: Generate the answer as step-by-step instructions.   - `concise`: Generate the answer as briefly as possible.
         */
        "answerStyle"?: GeneratedAnswerStyle;
        /**
          * Whether to allow the answer to be collapsed when the text is taller than 250px.
         */
        "collapsible"?: boolean;
    }
    interface AtomicGeneratedAnswerFeedbackModal {
        /**
          * A `GeneratedAnswer` controller instance. It is used when the user interacts with the modal.
         */
        "generatedAnswer": GeneratedAnswer;
        /**
          * Indicates whether the modal is open.
         */
        "isOpen"?: boolean;
        "onFeedbackSent"?: (event: AtomicGeneratedAnswerFeedbackModalCustomEvent<any>) => void;
    }
    /**
     * The `atomic-html` component renders the HTML value of a string.
     * There is an inherent XSS security concern associated with the usage of this component.
     * Use only with values for which you are certain the content is harmless.
     */
    interface AtomicHtml {
        /**
          * Specify if the content should be sanitized, using [`DOMPurify`](https://www.npmjs.com/package/dompurify).
         */
        "sanitize"?: boolean;
        /**
          * The string value containing HTML to display;
         */
        "value": string;
    }
    /**
     * The `atomic-icon` component displays an SVG icon with a 1:1 aspect ratio.
     * This component can display an icon from those available in the Atomic package, from a specific location, or as an inline SVG element.
     */
    interface AtomicIcon {
        /**
          * The SVG icon to display.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly.
         */
        "icon": string;
    }
    interface AtomicInsightEditToggle {
        "clickCallback"?: () => void;
        "tooltip"?: string;
    }
    interface AtomicInsightFacet {
        /**
          * Whether to display the facet values as checkboxes (multiple selection), links (single selection) or boxes (multiple selection). Possible values are 'checkbox', 'link', and 'box'.
         */
        "displayValuesAs"?: 'checkbox' | 'link' | 'box';
        /**
          * Whether to allow excluding values from the facet.
         */
        "enableExclusion"?: boolean;
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Whether to exclude the parents of folded results when estimating the result count for each facet value.
         */
        "filterFacetCount"?: boolean;
        /**
          * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.
         */
        "headingLevel"?: number;
        /**
          * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values. Note: A high injectionDepth may negatively impact the facet request performance. Minimum: `0` Default: `1000`
         */
        "injectionDepth"?: number;
        /**
          * Specifies if the facet is collapsed.
         */
        "isCollapsed"?: boolean;
        /**
          * The non-localized label for the facet.
         */
        "label"?: string;
        /**
          * The number of values to request for this facet. Also determines the number of additional values to request each time more values are shown.
         */
        "numberOfValues"?: number;
        /**
          * Specifies how a result must match the selected facet values. Allowed values: - `atLeastOneValue`: A result will match if at least one of the corresponding facet values is selected. - `allValues`: A result will match if all corresponding facet values are selected.
         */
        "resultsMustMatch"?: FacetResultsMustMatch;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are 'score', 'alphanumeric', 'occurrences', and 'automatic'.
         */
        "sortCriteria"?: InsightFacetSortCriterion;
    }
    interface AtomicInsightFoldedResultList {
        /**
          * The name of the field that uniquely identifies a result within a collection.
          * @defaultValue `foldingchild`
         */
        "childField"?: string;
        /**
          * The name of the field on which to do the folding. The folded result list component will use the values of this field to resolve the collections of result items.
          * @defaultValue `foldingcollection`
         */
        "collectionField"?: string;
        /**
          * The spacing of various elements in the result list, including the gap between results, the gap between parts of a result, and the font sizes of different parts in a result.
         */
        "density"?: ItemDisplayDensity;
        /**
          * The expected size of the image displayed in the results.
         */
        "imageSize"?: ItemDisplayImageSize;
        /**
          * The name of the field that determines whether a certain result is a top result containing other child results within a collection.
          * @defaultValue `foldingparent`
         */
        "parentField"?: string;
    }
    interface AtomicInsightFullSearchButton {
        "tooltip"?: string;
    }
    interface AtomicInsightGeneratedAnswer {
        /**
          * The answer style to apply when the component first loads. Options:   - `default`: Generate the answer without specific formatting instructions.   - `bullet`: Generate the answer as a bulleted list.   - `step`: Generate the answer as step-by-step instructions.   - `concise`: Generate the answer as briefly as possible.
         */
        "answerStyle"?: InsightGeneratedAnswerStyle;
        /**
          * Whether to allow the answer to be collapsed when the text is taller than 250px.
         */
        "collapsible"?: boolean;
    }
    interface AtomicInsightHistoryToggle {
        "clickCallback"?: () => void;
        "tooltip"?: string;
    }
    interface AtomicInsightInterface {
        /**
          * The value to set the [nonce](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce) attribute to on inline script and style elements generated by this interface and its child components. If your application is served with a Content Security Policy (CSP) that doesn't include the `script-src: 'unsafe-inline'` or `style-src: 'unsafe-inline'` directives, you should ensure that your application server generates a new nonce on every page load and uses the generated value to set this prop and serve the corresponding CSP response headers (i.e., script-src 'nonce-<YOUR_GENERATED_NONCE>' and style-src 'nonce-<YOUR_GENERATED_NONCE>'). Otherwise you may see console errors such as  - Refused to execute inline script because it violates the following Content Security Policy directive: [...]  - Refused to apply inline style because it violates the following Content Security Policy directive: [...]. When using a nonce, the first import of Atomic should be to import & call the `setNonce` function with the generated nonce value.
          * @example : ```html <script nonce="<YOUR_GENERATED_NONCE>"> import {setNonce} from '@coveo/atomic'; setNonce('<YOUR_GENERATED_NONCE>'); </script> ```
         */
        "CspNonce"?: string;
        /**
          * Whether analytics should be enabled.
         */
        "analytics"?: boolean;
        /**
          * The service insight interface headless engine.
         */
        "engine"?: InsightEngine;
        /**
          * A list of non-default fields to include in the query results.  Specify the property as an array using a JSON string representation: ```html <atomic-insight-interface fields-to-include='["fieldA", "fieldB"]'></atomic-insight-interface> ```
         */
        "fieldsToInclude"?: string[] | string;
        /**
          * The service insight interface i18next instance.
         */
        "i18n"?: i18n;
        /**
          * The icon assets path. By default, this will be a relative URL pointing to `./assets`.  Example: "/mypublicpath/icons"
         */
        "iconAssetsPath"?: string;
        /**
          * The service insight interface language.
         */
        "language"?: string;
        /**
          * The language assets path. By default, this will be a relative URL pointing to `./lang`.  Example: "/mypublicpath/languages"
         */
        "languageAssetsPath"?: string;
        /**
          * The compatibility JSON version for i18next to use (see [i18next Migration Guide](https://www.i18next.com/misc/migration-guide#v20.x.x-to-v21.0.0)).
         */
        "localizationCompatibilityVersion"?: i18nCompatibilityVersion;
        /**
          * The severity level of the messages to log in the console.
         */
        "logLevel"?: InsightLogLevel;
        /**
          * The number of results per page. By default, this is set to `5`.
         */
        "resultsPerPage"?: number;
    }
    interface AtomicInsightLayout {
        /**
          * Whether the interface should be shown in widget format.
         */
        "widget"?: boolean;
    }
    interface AtomicInsightNoResults {
    }
    interface AtomicInsightNumericFacet {
        /**
          * The required facets and values for this facet to be displayed. Examples: ```html <atomic-insight-facet facet-id="abc" field="objecttype" ...></atomic-insight-facet>  <!-- To show the facet when any value is selected in the facet with id "abc": --> <atomic-insight-numeric-facet   depends-on-abc   ... ></atomic-insight-numeric-facet>  <!-- To show the facet when value "doc" is selected in the facet with id "abc": --> <atomic-insight-numeric-facet   depends-on-abc="doc"   ... ></atomic-insight-numeric-facet> ```
         */
        "dependsOn"?: Record<string, string>;
        /**
          * Whether to display the facet values as checkboxes (multiple selection) or links (single selection). Possible values are 'checkbox' and 'link'.
         */
        "displayValuesAs"?: 'checkbox' | 'link';
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Whether to exclude the parents of folded results when estimating the result count for each facet value.
         */
        "filterFacetCount"?: boolean;
        /**
          * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.
         */
        "headingLevel"?: number;
        /**
          * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values. Note: A high injectionDepth may negatively impact the facet request performance. Minimum: `0` Default: `1000`
         */
        "injectionDepth"?: number;
        /**
          * Specifies if the facet is collapsed.
         */
        "isCollapsed"?: boolean;
        /**
          * The non-localized label for the facet. Used in the `atomic-breadbox` component through the bindings store.
         */
        "label"?: string;
        /**
          * The number of values to request for this facet, when there are no manual ranges. If the number of values is 0, no ranges will be displayed.
         */
        "numberOfValues"?: number;
        /**
          * The algorithm that's used for generating the ranges of this facet when they aren't manually defined. The default value of `"equiprobable"` generates facet ranges which vary in size but have a more balanced number of results within each range. The value of `"even"` generates equally sized facet ranges across all of the results.
         */
        "rangeAlgorithm"?: InsightRangeFacetRangeAlgorithm;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are 'ascending' and 'descending'.
         */
        "sortCriteria"?: InsightRangeFacetSortCriterion;
        /**
          * Whether this facet should contain an input allowing users to set custom ranges. Depending on the field, the input can allow either decimal or integer values.
         */
        "withInput"?: NumberInputType;
    }
    interface AtomicInsightPager {
        /**
          * Specifies how many page buttons to display in the pager.
         */
        "numberOfPages"?: number;
        "onAtomic/scrollToTop"?: (event: AtomicInsightPagerCustomEvent<any>) => void;
    }
    interface AtomicInsightQueryError {
    }
    interface AtomicInsightQuerySummary {
    }
    interface AtomicInsightRefineModal {
        "isOpen"?: boolean;
        "openButton"?: HTMLElement;
    }
    interface AtomicInsightRefineToggle {
    }
    interface AtomicInsightResult {
        /**
          * The classes to add to the result element.
         */
        "classes"?: string;
        /**
          * The result content to display.
         */
        "content"?: ParentNode;
        /**
          * How large or small results should be.
         */
        "density"?: ItemDisplayDensity;
        /**
          * The size of the visual section in result list items.  This is overwritten by the image size defined in the result content, if it exists.
         */
        "imageSize"?: ItemDisplayImageSize;
        /**
          * The InteractiveResult item.
         */
        "interactiveResult": InsightInteractiveResult;
        "loadingFlag"?: string;
        /**
          * The result item.
         */
        "result": InsightResult | InsightFoldedResult;
        /**
          * Whether an atomic-result-link inside atomic-insight-result should stop click event propagation.
         */
        "stopPropagation"?: boolean;
        /**
          * Global Atomic state.
         */
        "store"?: AtomicInsightStore;
    }
    interface AtomicInsightResultAction {
        /**
          * The type of action to perform when the result action is clicked. This will be sent along the event fired when the button is clicked.
         */
        "action"?: Actions | string;
        /**
          * Specify the result action icon to display.
         */
        "icon"?: string;
        "onAtomicInsightResultActionClicked"?: (event: AtomicInsightResultActionCustomEvent<InsightResultActionClickedEvent>) => void;
        /**
          * The text tooltip to show on the result action icon.
         */
        "tooltip"?: string;
    }
    interface AtomicInsightResultActionBar {
    }
    interface AtomicInsightResultChildren {
        /**
          * The expected size of the image displayed in the children results.
         */
        "imageSize"?: ItemDisplayImageSize;
        /**
          * Whether to inherit templates defined in a parent atomic-result-children. Only works for the second level of child nesting.
         */
        "inheritTemplates"?: boolean;
        /**
          * The non-localized copy for an empty result state. An empty string will result in the component being hidden.
         */
        "noResultText"?: string;
    }
    interface AtomicInsightResultChildrenTemplate {
        /**
          * A function that must return true on results for the result template to apply. Set programmatically before initialization, not via attribute.  For example, the following targets a template and sets a condition to make it apply only to results whose `title` contains `singapore`: `document.querySelector('#target-template').conditions = [(result) => /singapore/i.test(result.title)];`
         */
        "conditions"?: ResultTemplateCondition[];
        /**
          * The field that, when defined on a result item, would allow the template to be applied.  For example, a template with the following attribute only applies to result items whose `filetype` and `sourcetype` fields are defined: `if-defined="filetype,sourcetype"`
         */
        "ifDefined"?: string;
        /**
          * The field that, when defined on a result item, would prevent the template from being applied.  For example, a template with the following attribute only applies to result items whose `filetype` and `sourcetype` fields are NOT defined: `if-not-defined="filetype,sourcetype"`
         */
        "ifNotDefined"?: string;
    }
    interface AtomicInsightResultList {
        /**
          * The spacing of various elements in the result list, including the gap between results, the gap between parts of a result, and the font sizes of different parts in a result.
         */
        "density"?: ItemDisplayDensity;
        /**
          * The expected size of the image displayed in the results.
         */
        "imageSize"?: ItemDisplayImageSize;
    }
    interface AtomicInsightResultTemplate {
        /**
          * A function that must return true on results for the result template to apply. Set programmatically before initialization, not via attribute.  For example, the following targets a template and sets a condition to make it apply only to results whose `title` contains `singapore`: `document.querySelector('#target-template').conditions = [(result) => /singapore/i.test(result.title)];`
         */
        "conditions"?: InsightResultTemplateCondition[];
        /**
          * The field that, when defined on a result item, would allow the template to be applied.  For example, a template with the following attribute only applies to result items whose `filetype` and `sourcetype` fields are defined: `if-defined="filetype,sourcetype"`
         */
        "ifDefined"?: string;
        /**
          * The field that, when defined on a result item, would prevent the template from being applied.  For example, a template with the following attribute only applies to result items whose `filetype` and `sourcetype` fields are NOT defined: `if-not-defined="filetype,sourcetype"`
         */
        "ifNotDefined"?: string;
    }
    interface AtomicInsightSearchBox {
        /**
          * Whether to prevent the user from triggering a search from the component. Perfect for use cases where you need to disable the search conditionally, like when the input is empty.
         */
        "disableSearch"?: boolean;
        /**
          * The number of query suggestions to display when interacting with the search box.
         */
        "numberOfSuggestions"?: number;
    }
    interface AtomicInsightSmartSnippet {
        /**
          * When the answer is partly hidden, how much of its height (in pixels) should be visible.
         */
        "collapsedHeight"?: number;
        /**
          * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the question at the top of the snippet, from 1 to 5.
         */
        "headingLevel"?: number;
        /**
          * The maximum height (in pixels) a snippet can have before the component truncates it and displays a "show more" button.
         */
        "maximumHeight"?: number;
        /**
          * Sets the style of the snippet.  Example: ```ts smartSnippet.snippetStyle = `   b {     color: blue;   } `; ```
         */
        "snippetStyle"?: string;
    }
    interface AtomicInsightSmartSnippetFeedbackModal {
        "isOpen"?: boolean;
        "onFeedbackSent"?: (event: AtomicInsightSmartSnippetFeedbackModalCustomEvent<any>) => void;
        "source"?: HTMLElement;
    }
    interface AtomicInsightSmartSnippetSuggestions {
        /**
          * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the "People also ask" heading over the snippets, from 1 to 5.
         */
        "headingLevel"?: number;
        /**
          * Sets the style of the snippets.  Example: ```ts smartSnippet.snippetStyle = `   b {     color: blue;   } `; ```
         */
        "snippetStyle"?: string;
    }
    interface AtomicInsightTab {
        /**
          * Whether this tab is active upon rendering. If multiple tabs are set to active on render, the last one to be rendered will override the others.
         */
        "active"?: boolean;
        /**
          * The expression that will be passed to the search as a `cq` paramenter upon being selected.
         */
        "expression": string;
        /**
          * The label that will be shown to the user.
         */
        "label"?: string;
    }
    interface AtomicInsightTabs {
    }
    interface AtomicInsightTimeframeFacet {
        /**
          * The required facets and values for this facet to be displayed. Examples: ```html <atomic-insight-facet facet-id="abc" field="objecttype" ...></atomic-insight-facet>  <!-- To show the facet when any value is selected in the facet with id "abc": --> <atomic-insight-timeframe-facet   depends-on-abc   ... ></atomic-insight-timeframe-facet>  <!-- To show the facet when value "doc" is selected in the facet with id "abc": --> <atomic-insight-timeframe-facet   depends-on-abc="doc"   ... ></atomic-insight-timeframe-facet> ```
         */
        "dependsOn"?: Record<string, string>;
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field"?: string;
        /**
          * Whether to exclude the parents of folded results when estimating the result count for each facet value.
         */
        "filterFacetCount"?: boolean;
        /**
          * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.
         */
        "headingLevel"?: number;
        /**
          * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values. Note: A high injectionDepth may negatively impact the facet request performance. Minimum: `0` Default: `1000`
         */
        "injectionDepth"?: number;
        /**
          * Specifies if the facet is collapsed.
         */
        "isCollapsed"?: boolean;
        /**
          * The non-localized label for the facet. Used in the atomic-breadbox component through the bindings store.
         */
        "label"?: string;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are 'ascending' and 'descending'.
         */
        "sortCriteria"?: InsightRangeFacetSortCriterion;
        /**
          * Whether this facet should contain an datepicker allowing users to set custom ranges.
         */
        "withDatePicker"?: boolean;
    }
    interface AtomicIpxBody {
        "displayFooterSlot"?: boolean;
        "isOpen"?: boolean;
        "onAnimationEnded"?: (event: AtomicIpxBodyCustomEvent<never>) => void;
    }
    interface AtomicIpxButton {
        /**
          * The close icon of the button.
         */
        "closeIcon"?: string;
        /**
          * Whether the IPX modal is open.
         */
        "isModalOpen"?: boolean;
        /**
          * The label that will be shown to the user.
         */
        "label"?: string;
        /**
          * The open icon of the button.
         */
        "openIcon"?: string;
    }
    interface AtomicIpxEmbedded {
        /**
          * The container to hide from the tabindex and accessibility DOM when the modal is closed.
         */
        "container"?: HTMLElement;
        "onAnimationEnded"?: (event: AtomicIpxEmbeddedCustomEvent<never>) => void;
    }
    interface AtomicIpxModal {
        /**
          * The container to hide from the tabindex and accessibility DOM when the modal is closed.
         */
        "container"?: HTMLElement;
        "isOpen"?: boolean;
        "onAnimationEnded"?: (event: AtomicIpxModalCustomEvent<never>) => void;
        "source"?: HTMLElement;
    }
    interface AtomicIpxRefineModal {
        /**
          * The number of expanded facets inside the refine modal. Remaining facets are automatically collapsed.  Using the value `0` collapses all facets.
         */
        "collapseFacetsAfter"?: number;
        "isOpen"?: boolean;
        "openButton"?: HTMLElement;
    }
    interface AtomicIpxRefineToggle {
        /**
          * The number of expanded facets inside the refine modal. Remaining facets are automatically collapsed.  Using the value `0` collapses all facets.
         */
        "collapseFacetsAfter"?: number;
    }
    /**
     * The `atomic-ipx-result-link` component automatically transforms a search result title into a clickable link that points to the original item. It is an experimental internal component not intended for general use.
     */
    interface AtomicIpxResultLink {
        /**
          * Specifies a template literal from which to generate the `href` attribute value (see [Template literals](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals)).  The template literal can reference any number of result properties from the parent result. It can also reference the window object.  For example, the following markup generates an `href` value such as `http://uri.com?id=itemTitle`, using the result's `clickUri` and `itemtitle` fields. ```html <atomic-ipx-result-link href-template='${clickUri}?id=${raw.itemtitle}'></atomic-ipx-result-link> ```
         */
        "hrefTemplate"?: string;
    }
    interface AtomicIpxTab {
        /**
          * Whether this tab is active upon rendering. If multiple tabs are set to active on render, the last one to be rendered will override the others.
         */
        "active"?: boolean;
        /**
          * The expression that will be passed to the search as a `cq` paramenter upon being selected.
         */
        "expression": string;
        /**
          * The label that will be shown to the user.
         */
        "label"?: string;
    }
    interface AtomicIpxTabs {
    }
    /**
     * The `atomic-layout-section` lets you identify various sections for the related `atomic-layout` component.
     */
    interface AtomicLayoutSection {
        /**
          * For column sections, the maximum horizontal space it should take. E.g. '300px'
         */
        "maxWidth"?: string;
        /**
          * For column sections, the minimum horizontal space it should take. E.g. '300px'
         */
        "minWidth"?: string;
        /**
          * The name of the layout section.
         */
        "section": Section;
    }
    /**
     * The `atomic-load-more-children-results` component allows to load the full collection for a folded result.
     */
    interface AtomicLoadMoreChildrenResults {
        /**
          * The non-localized label for the button used to load more results.
         */
        "label"?: string;
    }
    /**
     * The `atomic-load-more-results` component allows the user to load additional results if more are available.
     */
    interface AtomicLoadMoreResults {
    }
    /**
     * When the modal is opened, the class `atomic-modal-opened` is added to the interfaceElement and the body, allowing further customization.
     */
    interface AtomicModal {
        /**
          * Whether to display the open and close animations over the entire page or the atomic-modal only.
         */
        "boundary"?: 'page' | 'element';
        "close"?: () => void;
        /**
          * The container to hide from the tabindex and accessibility DOM when the modal is closed.
         */
        "container"?: HTMLElement;
        "fullscreen"?: boolean;
        "isOpen"?: boolean;
        "onAnimationEnded"?: (event: AtomicModalCustomEvent<never>) => void;
        "scope"?: HTMLElement;
        "source"?: HTMLElement;
    }
    /**
     * The `atomic-no-results` component displays search tips and a "Cancel last action" button when there are no results. Any additional content slotted inside of its element will be displayed as well.
     */
    interface AtomicNoResults {
        /**
          * Whether to display a button which cancels the last available action.
         */
        "enableCancelLastAction"?: boolean;
    }
    /**
     * The `atomic-notifications` component is responsible for displaying notifications generated by the Coveo Search API (see [Trigger](https://docs.coveo.com/en/1458)).
     */
    interface AtomicNotifications {
        /**
          * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use above the notifications, from 1 to 6.
         */
        "headingLevel"?: number;
        /**
          * Specifies an icon to display at the left-end of a notification.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly
         */
        "icon"?: string;
    }
    /**
     * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., ascending, descending).
     * An `atomic-numeric-facet` displays a facet of the results for the current query as numeric ranges.
     */
    interface AtomicNumericFacet {
        /**
          * The required facets and values for this facet to be displayed. Examples: ```html <atomic-facet facet-id="abc" field="objecttype" ...></atomic-facet>  <!-- To show the facet when any value is selected in the facet with id "abc": --> <atomic-numeric-facet   depends-on-abc   ... ></atomic-numeric-facet>  <!-- To show the facet when value "doc" is selected in the facet with id "abc": --> <atomic-numeric-facet   depends-on-abc="doc"   ... ></atomic-numeric-facet> ```
         */
        "dependsOn"?: Record<string, string>;
        /**
          * Whether to display the facet values as checkboxes (multiple selection) or links (single selection). Possible values are 'checkbox' and 'link'.
         */
        "displayValuesAs"?: 'checkbox' | 'link';
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Whether to exclude the parents of folded results when estimating the result count for each facet value.
         */
        "filterFacetCount"?: boolean;
        /**
          * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.
         */
        "headingLevel"?: number;
        /**
          * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values. Note: A high injectionDepth may negatively impact the facet request performance. Minimum: `0` Default: `1000`
         */
        "injectionDepth"?: number;
        /**
          * Specifies whether the facet is collapsed. When the facet is the child of an `atomic-facet-manager` component, the facet manager controls this property.
         */
        "isCollapsed"?: boolean;
        /**
          * The non-localized label for the facet. Used in the `atomic-breadbox` component through the bindings store.
         */
        "label"?: string;
        /**
          * The number of values to request for this facet, when there are no manual ranges. If the number of values is 0, no ranges will be displayed.
         */
        "numberOfValues"?: number;
        /**
          * The algorithm that's used for generating the ranges of this facet when they aren't manually defined. The default value of `"equiprobable"` generates facet ranges which vary in size but have a more balanced number of results within each range. The value of `"even"` generates equally sized facet ranges across all of the results.
         */
        "rangeAlgorithm"?: RangeFacetRangeAlgorithm;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are 'ascending' and 'descending'.
         */
        "sortCriteria"?: RangeFacetSortCriterion;
        /**
          * Whether this facet should contain an input allowing users to set custom ranges. Depending on the field, the input can allow either decimal or integer values.
         */
        "withInput"?: NumberInputType;
    }
    /**
     * The `atomic-numeric-range` component defines the range of an `atomic-numeric-facet`, and therefore must be defined within an `atomic-numeric-facet` component.
     */
    interface AtomicNumericRange {
        /**
          * The ending value for the numeric range.
         */
        "end": number;
        /**
          * Specifies whether the end value should be included in the range.
         */
        "endInclusive"?: boolean;
        /**
          * The non-localized label for the facet. When defined, it will appear instead of the formatted value. Used in the `atomic-breadbox` component through the bindings store.
         */
        "label"?: string;
        /**
          * The starting value for the numeric range.
         */
        "start": number;
    }
    /**
     * The `atomic-pager` provides buttons that allow the end user to navigate through the different result pages.
     */
    interface AtomicPager {
        /**
          * The SVG icon to use to display the Next button.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly.
         */
        "nextButtonIcon"?: string;
        /**
          * Specifies how many page buttons to display in the pager.
         */
        "numberOfPages"?: number;
        "onAtomic/scrollToTop"?: (event: AtomicPagerCustomEvent<any>) => void;
        /**
          * The SVG icon to use to display the Previous button.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly.
         */
        "previousButtonIcon"?: string;
    }
    /**
     * The `atomic-popover` component displays any facet as a popover menu.
     */
    interface AtomicPopover {
    }
    /**
     * The `atomic-query-error` component handles fatal errors when performing a query on the index or Search API. When the error is known, it displays a link to relevant documentation link for debugging purposes. When the error is unknown, it displays a small text area with the JSON content of the error.
     */
    interface AtomicQueryError {
    }
    /**
     * The `atomic-query-summary` component displays information about the current range of results and the request duration (e.g., "Results 1-10 of 123 in 0.47 seconds").
     */
    interface AtomicQuerySummary {
    }
    /**
     * The `atomic-quickview` component renders a button which the end user can click to open a modal box containing a preview
     * about a result.
     * The `atomic-quickview` is not meant to replace the `atomic-result-link` to access an item in a result template; it has certain limitations (e.g., custom styles and embedded
     * images/links may not work as expected in an `atomic-quickview`).
     */
    interface AtomicQuickview {
        /**
          * The `sandbox` attribute to apply to the quickview iframe.  The quickview is loaded inside an iframe with a [`sandbox`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-sandbox) attribute for security reasons.  This attribute exists primarily to protect against potential XSS attacks that could originate from the document being displayed.  By default, the sandbox attributes are: `allow-popups allow-top-navigation allow-same-origin`.  `allow-same-origin` is not optional, and must always be included in the list of allowed capabilities for the component to function properly.
         */
        "sandbox"?: string;
    }
    interface AtomicQuickviewModal {
        "content"?: string;
        "current"?: number;
        "modalCloseCallback"?: () => void;
        "onAtomic/quickview/next"?: (event: AtomicQuickviewModalCustomEvent<any>) => void;
        "onAtomic/quickview/previous"?: (event: AtomicQuickviewModalCustomEvent<any>) => void;
        "result"?: Result;
        "sandbox"?: string;
        "total"?: number;
    }
    /**
     * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., number of occurrences).
     * An `atomic-rating-facet` displays a facet of the results for the current query as ratings.
     * It only supports numeric fields.
     */
    interface AtomicRatingFacet {
        /**
          * The required facets and values for this facet to be displayed. Examples: ```html <atomic-facet facet-id="abc" field="objecttype" ...></atomic-facet>  <!-- To show the facet when any value is selected in the facet with id "abc": --> <atomic-rating-facet   depends-on-abc   ... ></atomic-rating-facet>  <!-- To show the facet when value "doc" is selected in the facet with id "abc": --> <atomic-rating-facet   depends-on-abc="doc"   ... ></atomic-rating-facet> ```
         */
        "dependsOn"?: Record<string, string>;
        /**
          * Whether to display the facet values as checkboxes (multiple selection) or links (single selection). Possible values are 'checkbox' and 'link'.
         */
        "displayValuesAs"?: 'checkbox' | 'link';
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Whether to exclude the parents of folded results when estimating the result count for each facet value.
         */
        "filterFacetCount"?: boolean;
        /**
          * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.
         */
        "headingLevel"?: number;
        /**
          * The SVG icon to use to display the rating.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly.  When using a custom icon, at least part of your icon should have the color set to `fill="currentColor"`. This part of the SVG will take on the colors set in the following [variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties):  - `--atomic-rating-icon-active-color` - `--atomic-rating-icon-inactive-color`
         */
        "icon"?: string;
        /**
          * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values. Note: A high injectionDepth may negatively impact the facet request performance. Minimum: `0`
         */
        "injectionDepth"?: number;
        /**
          * Specifies whether the facet is collapsed. When the facet is the child of an `atomic-facet-manager` component, the facet manager controls this property.
         */
        "isCollapsed"?: boolean;
        /**
          * The non-localized label for the facet. Used in the `atomic-breadbox` component through the bindings store.
         */
        "label"?: string;
        /**
          * The maximum value in the field's index and the number of rating icons to display in the facet. If not assigned a value, this property will default to the same value as `numberOfIntervals`.
         */
        "maxValueInIndex"?: number;
        /**
          * The minimum value of the field.
         */
        "minValueInIndex"?: number;
        /**
          * The number of options to display in the facet. If `maxValueInIndex` isn't specified, it will be assumed that this is also the maximum number of rating icons.
         */
        "numberOfIntervals"?: number;
    }
    /**
     * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., number of occurrences).
     * An `atomic-rating-range-facet` displays a facet of the results for the current query as ratings.
     * It only supports numeric fields.
     */
    interface AtomicRatingRangeFacet {
        /**
          * The required facets and values for this facet to be displayed. Examples: ```html <atomic-facet facet-id="abc" field="objecttype" ...></atomic-facet>  <!-- To show the facet when any value is selected in the facet with id "abc": --> <atomic-rating-range-facet   depends-on-abc   ... ></atomic-rating-range-facet>  <!-- To show the facet when value "doc" is selected in the facet with id "abc": --> <atomic-rating-range-facet   depends-on-abc="doc"   ... ></atomic-rating-range-facet> ```
         */
        "dependsOn"?: Record<string, string>;
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Whether to exclude the parents of folded results when estimating the result count for each facet value.
         */
        "filterFacetCount"?: boolean;
        /**
          * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.
         */
        "headingLevel"?: number;
        /**
          * The SVG icon to use to display the rating.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly.  When using a custom icon, at least part of your icon should have the color set to `fill="currentColor"`. This part of the SVG will take on the colors set in the following [variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties):  - `--atomic-rating-icon-active-color` - `--atomic-rating-icon-inactive-color`
         */
        "icon"?: string;
        /**
          * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values. Note: A high injectionDepth may negatively impact the facet request performance. Minimum: `0` Default: `1000`
         */
        "injectionDepth"?: number;
        /**
          * Specifies whether the facet is collapsed. When the facet is the child of an `atomic-facet-manager` component, the facet manager controls this property.
         */
        "isCollapsed"?: boolean;
        /**
          * The non-localized label for the facet. Used in the `atomic-breadbox` component through the bindings store.
         */
        "label"?: string;
        /**
          * The maximum value in the field's index and the number of rating icons to display in the facet. This property will default to the same value as `numberOfIntervals`, if not assigned a value.
         */
        "maxValueInIndex"?: number;
        /**
          * The minimum value of the field.
         */
        "minValueInIndex"?: number;
        /**
          * The number of options to display in the facet. If `maxValueInIndex` isn't specified, it will be assumed that this is also the maximum number of rating icons.
         */
        "numberOfIntervals"?: number;
    }
    /**
     * The `atomic-recs-error` component handles fatal errors when performing a recommendations request on the index or Search API. When the error is known, it displays a link to relevant documentation link for debugging purposes. When the error is unknown, it displays a small text area with the JSON content of the error.
     */
    interface AtomicRecsError {
    }
    /**
     * The `atomic-recs-interface` component is the parent to all other atomic components in a recommendation interface. It handles the headless recommendation engine and localization configurations.
     */
    interface AtomicRecsInterface {
        /**
          * The value to set the [nonce](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce) attribute to on inline script and style elements generated by this interface and its child components. If your application is served with a Content Security Policy (CSP) that doesn't include the `script-src: 'unsafe-inline'` or `style-src: 'unsafe-inline'` directives, you should ensure that your application server generates a new nonce on every page load and uses the generated value to set this prop and serve the corresponding CSP response headers (i.e., script-src 'nonce-<YOUR_GENERATED_NONCE>' and style-src 'nonce-<YOUR_GENERATED_NONCE>'). Otherwise you may see console errors such as  - Refused to execute inline script because it violates the following Content Security Policy directive: [...]  - Refused to apply inline style because it violates the following Content Security Policy directive: [...].
          * @example : ```html <script nonce="<YOUR_GENERATED_NONCE>"> import {setNonce} from '@coveo/atomic'; setNonce('<YOUR_GENERATED_NONCE>'); </script> ```
         */
        "CspNonce"?: string;
        /**
          * Whether analytics should be enabled.
         */
        "analytics"?: boolean;
        /**
          * The recommendation interface headless engine.
         */
        "engine"?: RecommendationEngine;
        /**
          * A list of non-default fields to include in the query results.  Specify the property as an array using a JSON string representation: ```html <atomic-recs-interface fields-to-include='["fieldA", "fieldB"]'></atomic-recs-interface> ```
         */
        "fieldsToInclude"?: string[] | string;
        /**
          * The recommendation interface i18next instance.
         */
        "i18n"?: i18n;
        /**
          * The icon assets path. By default, this will be a relative URL pointing to `./assets`.  Example: "/mypublicpath/icons"
         */
        "iconAssetsPath"?: string;
        /**
          * The recommendation interface language.
         */
        "language"?: string;
        /**
          * The language assets path. By default, this will be a relative URL pointing to `./lang`.  Example: "/mypublicpath/languages"
         */
        "languageAssetsPath"?: string;
        /**
          * The compatibility JSON version for i18next to use (see [i18next Migration Guide](https://www.i18next.com/misc/migration-guide#v20.x.x-to-v21.0.0)).
         */
        "localizationCompatibilityVersion"?: i18nCompatibilityVersion1;
        /**
          * The severity level of the messages to log in the console.
         */
        "logLevel"?: RecsLogLevel;
        /**
          * The recommendation interface [query pipeline](https://docs.coveo.com/en/180/).  If the recommendation interface is initialized using [`initializeWithRecommendationEngine`](https://docs.coveo.com/en/atomic/latest/reference/recommendation-components/atomic-recs-interface/#initializewithrecommendationengine), the query pipeline should instead be configured in the target engine.
         */
        "pipeline"?: string;
        /**
          * The recommendation interface [search hub](https://docs.coveo.com/en/1342/).  If the recommendation interface is initialized using [`initializeWithRecommendationEngine`](https://docs.coveo.com/en/atomic/latest/reference/recommendation-components/atomic-recs-interface/#initializewithrecommendationengine), the search hub should instead be configured in the target engine.
         */
        "searchHub"?: string;
        /**
          * The [tz database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) identifier of the time zone to use to correctly interpret dates in the query expression, facets, and result items. By default, the timezone will be [guessed](https://day.js.org/docs/en/timezone/guessing-user-timezone).  Example: "America/Montreal"
         */
        "timezone"?: string;
    }
    /**
     * The `atomic-recs-list` component displays recommendations by applying one or more result templates.
     */
    interface AtomicRecsList {
        /**
          * The spacing of various elements in the result list, including the gap between results, the gap between parts of a result, and the font sizes of different parts in a result.
         */
        "density"?: ItemDisplayDensity;
        /**
          * The layout to apply when displaying results themselves. This does not affect the display of the surrounding list itself. To modify the number of recommendations per column, modify the --atomic-recs-number-of-columns CSS variable.
         */
        "display"?: ItemDisplayBasicLayout;
        /**
          * The target location to open the result link (see [target](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#target)). This property is only leveraged when `display` is `grid`.
          * @defaultValue `_self`
         */
        "gridCellLinkTarget"?: ItemTarget;
        /**
          * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading label, from 1 to 6.
         */
        "headingLevel"?: number;
        /**
          * The expected size of the image displayed in the results.
         */
        "imageSize"?: ItemDisplayImageSize;
        /**
          * The non-localized label for the list of recommendations.
         */
        "label"?: string;
        /**
          * The total number of recommendations to display. This does not modify the number of recommendations per column. To do so, modify the --atomic-recs-number-of-columns CSS variable.
         */
        "numberOfRecommendations"?: number;
        /**
          * The number of recommendations to display, per page. Setting a value greater than and lower than the numberOfRecommendations value activates the carousel. This does not affect the display of the list itself, only the number of recommendation pages.
         */
        "numberOfRecommendationsPerPage"?: number;
        /**
          * The Recommendation identifier used by the Coveo platform to retrieve recommended documents. Make sure to set a different value for each atomic-recs-list in your page.
         */
        "recommendation"?: string;
    }
    /**
     * The `atomic-recs-result` component is used internally by the `atomic-recs-list` component.
     */
    interface AtomicRecsResult {
        /**
          * The classes to add to the result element.
         */
        "classes"?: string;
        /**
          * The result content to display.
         */
        "content"?: ParentNode;
        /**
          * The size of the results.
         */
        "density"?: ItemDisplayDensity;
        /**
          * The layout to apply to display results.
         */
        "display"?: ItemDisplayLayout;
        /**
          * The size of the visual section in result list items.  This is overwritten by the image size defined in the result content, if it exists.
         */
        "imageSize"?: ItemDisplayImageSize;
        /**
          * The InteractiveResult item.
         */
        "interactiveResult": RecsInteractiveResult;
        "loadingFlag"?: string;
        /**
          * Internal function used by atomic-recs-list in advanced setups, which lets you bypass the standard HTML template system. Particularly useful for Atomic React
         */
        "renderingFunction"?: ItemRenderingFunction;
        /**
          * The result item.
         */
        "result": RecsResult;
        /**
          * Whether an atomic-result-link inside atomic-recs-result should stop click event propagation.
         */
        "stopPropagation"?: boolean;
        /**
          * Global Atomic state.
         */
        "store"?: AtomicRecsStore;
    }
    /**
     * A [result template](https://docs.coveo.com/en/atomic/latest/usage/displaying-results#defining-a-result-template) determines the format of the query results, depending on the conditions that are defined for each template.
     * A `template` element must be the child of an `atomic-recs-result-template`, and an `atomic-recs-list` must be the parent of each `atomic-recs-result-template`.
     * **Note:** Any `<script>` tags that are defined inside a `<template>` element will not be executed when the results are being rendered.
     * @MapProp name: mustMatch;attr: must-match;docs: The field and values that define which result items the condition must be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is `lithiummessage` or `YouTubePlaylist`: `must-match-filetype="lithiummessage,YouTubePlaylist"`;type: Record<string, string[]> ;default: {}
     * @MapProp name: mustNotMatch;attr: must-not-match;docs: The field and values that define which result items the condition must not be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is not `lithiummessage`: `must-not-match-filetype="lithiummessage";type: Record<string, string[]> ;default: {}
     */
    interface AtomicRecsResultTemplate {
        /**
          * A function that must return true on results for the result template to apply. Set programmatically before initialization, not via attribute.  For example, the following targets a template and sets a condition to make it apply only to results whose `title` contains `singapore`: `document.querySelector('#target-template').conditions = [(result) => /singapore/i.test(result.title)];`
         */
        "conditions"?: RecsResultTemplateCondition[];
        /**
          * The field that, when defined on a result item, would allow the template to be applied.  For example, a template with the following attribute only applies to result items whose `filetype` and `sourcetype` fields are defined: `if-defined="filetype,sourcetype"`
         */
        "ifDefined"?: string;
        /**
          * The field that, when defined on a result item, would prevent the template from being applied.  For example, a template with the following attribute only applies to result items whose `filetype` and `sourcetype` fields are NOT defined: `if-not-defined="filetype,sourcetype"`
         */
        "ifNotDefined"?: string;
    }
    /**
     * The `atomic-refine-modal` is automatically created as a child of the `atomic-search-interface` when the `atomic-refine-toggle` is initialized.
     * When the modal is opened, the class `atomic-modal-opened` is added to the interface element and the body, allowing further customization.
     */
    interface AtomicRefineModal {
        /**
          * The number of expanded facets inside the refine modal. Remaining facets are automatically collapsed.  Using the value `0` collapses all facets.
         */
        "collapseFacetsAfter"?: number;
        "isOpen"?: boolean;
        "openButton"?: HTMLElement;
    }
    /**
     * The `atomic-refine-toggle` component displays a button that opens a modal containing the facets and the sort components.
     * When this component is added to the `atomic-search-interface`, an `atomic-refine-modal` component is automatically created.
     */
    interface AtomicRefineToggle {
        /**
          * The number of expanded facets inside the refine modal. Remaining facets are automatically collapsed.  Using the value `0` collapses all facets.
         */
        "collapseFacetsAfter"?: number;
    }
    /**
     * The `atomic-relevance-inspector` component is used internally to offer insight on search page relevance, as well as information to help troubleshoot issues during development.
     */
    interface AtomicRelevanceInspector {
        /**
          * The Atomic interface bindings, namely the headless search engine and i18n instances.
         */
        "bindings": Bindings;
        "onAtomic/relevanceInspector/close"?: (event: AtomicRelevanceInspectorCustomEvent<any>) => void;
        "open"?: boolean;
    }
    /**
     * The `atomic-result` component is used internally by the `atomic-result-list` component.
     */
    interface AtomicResult {
        /**
          * The classes to add to the result element.
         */
        "classes"?: string;
        /**
          * The result content to display.
         */
        "content"?: ParentNode;
        /**
          * How large or small results should be.
         */
        "density"?: ItemDisplayDensity;
        /**
          * How results should be displayed.
         */
        "display"?: ItemDisplayLayout;
        /**
          * The size of the visual section in result list items.  This is overwritten by the image size defined in the result content, if it exists.
         */
        "imageSize"?: ItemDisplayImageSize;
        /**
          * The InteractiveResult item.
         */
        "interactiveResult": InteractiveResult;
        "loadingFlag"?: string;
        /**
          * Internal function used by atomic-recs-list in advanced setups, which lets you bypass the standard HTML template system. Particularly useful for Atomic React
         */
        "renderingFunction"?: ItemRenderingFunction;
        /**
          * The result item.
         */
        "result": Result | FoldedResult;
        /**
          * Whether an atomic-result-link inside atomic-result should stop click event propagation.
         */
        "stopPropagation"?: boolean;
        /**
          * Global Atomic state.
         */
        "store"?: AtomicCommonStore<AtomicCommonStoreData>;
    }
    /**
     * The `atomic-result-badge` element renders a badge to highlight special features of a result.
     * A badge can either display:
     * * Text:
     * ```html
     * <atomic-result-badge label="trending"></atomic-result-badge>
     * ```
     * * The contents of a single-value field:
     * ```html
     * <atomic-result-badge field="objecttype"></atomic-result-badge>
     * ```
     * * An icon:
     * ```html
     * <atomic-result-badge icon="https://my-website.fake/star.svg"></atomic-result-badge>
     * ```
     * * Slotted elements:
     * ```html
     * <atomic-result-badge icon="https://my-website.fake/stopwatch.svg">
     *     Deal ends in <my-dynamic-countdown></my-dynamic-countdown>
     * </atomic-result-badge>
     * ```
     * The contents of a multi-value field can be displayed as in the following example:
     * ```html
     * <atomic-result-badge icon="https://my-website.fake/language.svg">
     *    <atomic-result-multi-value-text field="language"></atomic-result-multi-value-text>
     * </atomic-result-badge>
     * ```
     */
    interface AtomicResultBadge {
        /**
          * The field to display in the badge.  Not compatible with `label`, slotted elements nor multi-value fields.
         */
        "field"?: string;
        /**
          * Specifies an icon to display at the left-end of the badge. This can be used in conjunction with `field`, `label` or slotted elements.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly
         */
        "icon"?: string;
        /**
          * The text to display in the badge.  Not compatible with `field` nor slotted elements.
         */
        "label"?: string;
    }
    /**
     * The `atomic-result-children` component is responsible for displaying child results by applying one or more child result templates.
     * Includes two slots, "before-children" and "after-children", which allow for rendering content before and after the list of children,
     * only when children exist.
     */
    interface AtomicResultChildren {
        /**
          * The expected size of the image displayed in the children results.
         */
        "imageSize"?: ItemDisplayImageSize;
        /**
          * Whether to inherit templates defined in a parent atomic-result-children. Only works for the second level of child nesting.
         */
        "inheritTemplates"?: boolean;
        /**
          * The non-localized copy for an empty result state. An empty string will result in the component being hidden.
         */
        "noResultText"?: string;
    }
    /**
     * The `atomic-result-children-template` component determines the format of the child results, depending on the conditions that are defined for each template. A `template` element must be the child of an `atomic-result-children-template`, and an `atomic-result-children` must be the parent of each `atomic-result-children-template`.
     * Note: Any `<script>` tags defined inside of a `<template>` element will not be executed when results are being rendered.
     * @MapProp name: mustMatch;attr: must-match;docs: The field and values that define which result items the condition must be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is `lithiummessage` or `YouTubePlaylist`: `must-match-filetype="lithiummessage,YouTubePlaylist"`;type: Record<string, string[]> ;default: {}
     * @MapProp name: mustNotMatch;attr: must-not-match;docs: The field and values that define which result items the condition must not be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is not `lithiummessage`: `must-not-match-filetype="lithiummessage";type: Record<string, string[]> ;default: {}
     */
    interface AtomicResultChildrenTemplate {
        /**
          * A function that must return true on results for the result template to apply. Set programmatically before initialization, not via attribute.  For example, the following targets a template and sets a condition to make it apply only to results whose `title` contains `singapore`: `document.querySelector('#target-template').conditions = [(result) => /singapore/i.test(result.title)];`
         */
        "conditions"?: ResultTemplateCondition[];
    }
    /**
     * The `atomic-result-date` component renders the value of a date result field.
     */
    interface AtomicResultDate {
        /**
          * The result field which the component should use. This will look for the field in the Result object first, and then in the Result.raw object. It is important to include the necessary field in the `atomic-search-interface` component.
         */
        "field"?: string;
        /**
          * Available formats: https://day.js.org/docs/en/display/format
         */
        "format"?: string;
        /**
          * Whether the date should display in the [relative time format](https://day.js.org/docs/en/plugin/calendar).  To modify the relative time string, use the [localization feature](https://docs.coveo.com/en/atomic/latest/usage/atomic-localization/).
         */
        "relativeTime"?: boolean;
    }
    /**
     * The `atomic-result-fields-list` component selectively renders its children to ensure they fit the parent element and adds dividers between them.
     */
    interface AtomicResultFieldsList {
    }
    /**
     * The `atomic-result-html` component renders the HTML value of a string result field.
     * There is an inherent XSS security concern associated with the usage of this component.
     * Use only with fields for which you are certain the data is harmless.
     */
    interface AtomicResultHtml {
        /**
          * The result field which the component should use. If set, Atomic searches for the specified field in the `Result` object first. If there's no such a field, Atomic searches through the `Result.raw` object. It's important to include the necessary field in the `ResultList` component.
         */
        "field": string;
        /**
          * Specify if the content should be sanitized, using [`DOMPurify`](https://www.npmjs.com/package/dompurify).
         */
        "sanitize"?: boolean;
    }
    /**
     * The `atomic-result-icon` component outputs the corresponding icon for a given file type.
     * The component searches for a suitable icon, or outputs a generic icon if the search is unsuccessful.
     */
    interface AtomicResultIcon {
    }
    /**
     * The `atomic-result-image` component renders an image from a result field.
     */
    interface AtomicResultImage {
        /**
          * An optional fallback image URL that will be used in case the specified image field is not available or encounters an error.
         */
        "fallback"?: string;
        /**
          * The result field which the component should use. This will look for the field in the Result object first, then in the Result.raw object. It is important to include the necessary field in the `atomic-search-interface` component.
         */
        "field": string;
    }
    /**
     * The `atomic-result-link` component automatically transforms a search result title into a clickable link that points to the original item.
     */
    interface AtomicResultLink {
        /**
          * Specifies a template literal from which to generate the `href` attribute value (see [Template literals](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals)).  The template literal can reference any number of result properties from the parent result. It can also reference the window object.  For example, the following markup generates an `href` value such as `http://uri.com?id=itemTitle`, using the result's `clickUri` and `itemtitle` fields. ```html <atomic-result-link href-template='${clickUri}?id=${raw.itemtitle}'></atomic-result-link> ```
         */
        "hrefTemplate"?: string;
    }
    /**
     * The `atomic-result-list` component is responsible for displaying query results by applying one or more result templates.
     */
    interface AtomicResultList {
        /**
          * The spacing of various elements in the result list, including the gap between results, the gap between parts of a result, and the font sizes of different parts in a result.
         */
        "density"?: ItemDisplayDensity;
        /**
          * The desired layout to use when displaying results. Layouts affect how many results to display per row and how visually distinct they are from each other.
         */
        "display"?: ItemDisplayLayout;
        /**
          * The target location to open the result link (see [target](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#target)). This property is only leveraged when `display` is `grid`.
          * @defaultValue `_self`
         */
        "gridCellLinkTarget"?: ItemTarget;
        /**
          * The expected size of the image displayed in the results.
         */
        "imageSize"?: ItemDisplayImageSize;
    }
    /**
     * The `atomic-result-localized-text` component renders a target i18n localized string using the values of a target field.
     * Given this i18n configuration:
     * ```
     * searchInterface.i18n.addResourceBundle('en', 'translation', {
     *    classic_book_advert: 'Classic book from {{name}}',
     * });
     * ```
     * The component could be configured in such a way to replace `{{name}}` with the `author` field value from the result item:
     * ```
     * <atomic-result-localized-text locale-key="classic_book_advert" field-author="name"></atomic-result-localized-text>
     * ```
     * @MapProp name: field;attr: field;docs: The field from which to extract the target string and the variable used to map it to the target i18n parameter. For example, the following configuration extracts the value of `author` from a result, and assign it to the i18n parameter `name`: `field-author="name"`;type: Record<string, string> ;default: {}
     */
    interface AtomicResultLocalizedText {
        /**
          * The numerical field value used to determine whether to use the singular or plural value of a translation.
         */
        "fieldCount"?: string;
        /**
          * The i18n translation key.
         */
        "localeKey": string;
    }
    /**
     * The `atomic-result-multi-value-text` component renders the values of a multi-value string field.
     */
    interface AtomicResultMultiValueText {
        /**
          * The delimiter used to separate values when the field isn't indexed as a multi value field.
         */
        "delimiter"?: string | null;
        /**
          * The field that the component should use. The component will try to find this field in the `Result.raw` object unless it finds it in the `Result` object first. Make sure this field is present in the `fieldsToInclude` property of the `atomic-search-interface` component.
         */
        "field": string;
        /**
          * The maximum number of field values to display. If there are _n_ more values than the specified maximum, the last displayed value will be "_n_ more...".
         */
        "maxValuesToDisplay"?: number;
    }
    /**
     * The `atomic-result-number` component renders the value of a number result field.
     * The number can be formatted by adding a `atomic-format-number`, `atomic-format-currency` or `atomic-format-unit` component into this component.
     */
    interface AtomicResultNumber {
        /**
          * The field that the component should use. The component will try to find this field in the `Result.raw` object unless it finds it in the `Result` object first. Make sure this field is present in the `fieldsToInclude` property of the `atomic-search-interface` component.
         */
        "field": string;
    }
    /**
     * The `atomic-result-placeholder` component provides an intermediate visual state that is rendered before the first results are available.
     */
    interface AtomicResultPlaceholder {
        "density": ItemDisplayDensity;
        "display": ItemDisplayLayout;
        "imageSize": ItemDisplayImageSize;
    }
    /**
     * The `atomic-result-printable-uri` component displays the URI, or path, to access a result.
     */
    interface AtomicResultPrintableUri {
        /**
          * The maximum number of Uri parts to display. This has to be over the minimum of `3` in order to be effective. Putting `Infinity` will disable the ellipsis.
         */
        "maxNumberOfParts"?: number;
    }
    /**
     * The `atomic-result-rating` element renders a star rating.
     */
    interface AtomicResultRating {
        /**
          * The field whose values you want to display as a rating.
         */
        "field": string;
        /**
          * The SVG icon to use to display the rating.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly.  When using a custom icon, at least part of your icon should have the color set to `fill="currentColor"`. This part of the SVG will take on the colors set in the following [variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties):  - `--atomic-rating-icon-active-color` - `--atomic-rating-icon-inactive-color`
         */
        "icon"?: string;
        /**
          * The maximum value of the field. This value is also used as the number of icons to be displayed.
         */
        "maxValueInIndex"?: number;
    }
    /**
     * This section allows the information seeker to perform an action on an item without having to view its details.
     * For example, in Commerce you can add an item to the cart directly or add it to a wish list to view at a later time.
     * Behavior:
     * * Exposes the `--line-height` CSS variable so child elements can adjust to the current line height.
     * ** You should ensure that elements inside of it have `height: var(--line-height)`.
     * * Is a wrapping flexbox with a gap.
     * * May appear over, next to, or beneath the visual section.
     */
    interface AtomicResultSectionActions {
    }
    /**
     * This section provides badges that highlight special features of the item.
     * Behavior:
     * * Exposes the `--line-height` CSS variable so child elements can adjust to the current line height.
     * ** You should ensure that elements inside of it have `height: var(--line-height)`.
     * * Is a wrapping flexbox with a gap.
     * * May appear over, next to, or beneath the visual section.
     */
    interface AtomicResultSectionBadges {
    }
    /**
     * This section displays additional descriptive information about the item.
     * Behavior:
     * * Has a maximum height of two lines.
     * ** We recommend that you use `atomic-result-fields-list` to ensure that the fields in this section don’t overflow.
     * * Exposes the `--line-height` variable so child elements can adjust to the current line height.
     * * Has a defined CSS `color` property for text.
     * * Has a font weight.
     */
    interface AtomicResultSectionBottomMetadata {
    }
    /**
     * This section displays the folded results, available when using the <atomic-result-children> component.
     * Behavior:
     * * Shows children at the bottom of the result, indented and wrapped in a border.
     */
    interface AtomicResultSectionChildren {
    }
    /**
     * This section displays the field that's important for its search criteria.
     * For example, in Commerce, a product's cost is often more important than the title itself.
     * Behavior:
     * * Has a very large font size.
     * * Is the second closest element beneath the title section.
     */
    interface AtomicResultSectionEmphasized {
    }
    /**
     * This section contains an informative summary of the item's content.
     * Behavior:
     * * Has a fixed height of one to three lines, depending on the layout and density.
     * * Ellipses overflowing text.
     * * Exposes the `--line-height` CSS variable so child elements can adjust to the current line height.
     * * Has a defined CSS `color` property for text.
     */
    interface AtomicResultSectionExcerpt {
    }
    /**
     * This section identifies the item by its name, and its main use is to make the result list scannable.
     * This is usually the page title.
     * Behavior:
     * * Has a fixed height of two lines on grid layouts.
     * * Exposes the `--line-height` CSS variable so child elements can adjust to the current line height.
     * * Has a defined CSS `color` property for text.
     */
    interface AtomicResultSectionTitle {
    }
    /**
     * This section surfaces some fields that are directly related to the title of the item.
     * For example, in Commerce, this could be the item's rating, which is tied to the nature of the product itself,
     * rather than to the product's description.
     * Behavior:
     * * Has a very small font size.
     * * Is the closest element beneath the title section.
     */
    interface AtomicResultSectionTitleMetadata {
    }
    /**
     * This section provides visual information about the item.
     * For example, in Commerce, an image is a great shorthand for a product category.
     * An icon can quickly show the item type, or an avatar can help identify to whom it is related.
     * Behavior:
     * * Has a fixed size that depends on the specified image size, the layout, the density, and the screen size.
     * ** When the image size is set to `icon`, this section stays very small.
     * ** You should ensure that elements inside of it take the available space.
     * * Always has a 1:1 aspect ratio.
     */
    interface AtomicResultSectionVisual {
        /**
          * How large or small the visual section of results using this template should be.
         */
        "imageSize"?: ItemDisplayImageSize;
    }
    /**
     * The `atomic-result-table-placeholder` component provides an intermediate visual state that is rendered before the first results are available.
     */
    interface AtomicResultTablePlaceholder {
        "density": ItemDisplayDensity;
        "imageSize": ItemDisplayImageSize;
        "rows": number;
    }
    /**
     * A [result template](https://docs.coveo.com/en/atomic/latest/usage/displaying-results#defining-a-result-template) determines the format of the query results, depending on the conditions that are defined for each template.
     * A `template` element must be the child of an `atomic-result-template`, and either an `atomic-result-list` or `atomic-folded-result-list` must be the parent of each `atomic-result-template`.
     * **Note:** Any `<script>` tags that are defined inside a `<template>` element will not be executed when the results are being rendered.
     * @MapProp name: mustMatch;attr: must-match;docs: The field and values that define which result items the condition must be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is `lithiummessage` or `YouTubePlaylist`: `must-match-filetype="lithiummessage,YouTubePlaylist"`;type: Record<string, string[]> ;default: {}
     * @MapProp name: mustNotMatch;attr: must-not-match;docs: The field and values that define which result items the condition must not be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is not `lithiummessage`: `must-not-match-filetype="lithiummessage";type: Record<string, string[]> ;default: {}
     */
    interface AtomicResultTemplate {
        /**
          * A function that must return true on results for the result template to apply. Set programmatically before initialization, not via attribute.  For example, the following targets a template and sets a condition to make it apply only to results whose `title` contains `singapore`: `document.querySelector('#target-template').conditions = [(result) => /singapore/i.test(result.title)];`
         */
        "conditions"?: ResultTemplateCondition[];
    }
    /**
     * The `atomic-result-text` component renders the value of a string result field.
     */
    interface AtomicResultText {
        /**
          * The locale key for the text to display when the configured field has no value.
         */
        "default"?: string;
        /**
          * The result field which the component should use. This will look in the Result object first, and then in the Result.raw object for the fields. It is important to include the necessary field in the `atomic-search-interface` component.
         */
        "field": string;
        /**
          * If this is set to true, it will look for the corresponding highlight property and use it if available.
         */
        "shouldHighlight"?: boolean;
    }
    /**
     * The `atomic-result-timespan` component renders a target result number field value as a duration.
     */
    interface AtomicResultTimespan {
        /**
          * The target result field. The component first looks for the field in the Result object, and then in the Result.raw object. It is important to include the necessary field in the `atomic-search-interface` component.
         */
        "field": string;
        /**
          * The format to apply to the result field value.  By default, the format is HH:mm:ss when the duration is under a day, and it is an approximation when longer (days, months or years).  The string displayed when there is an approximation can be modified with [localization](https://docs.coveo.com/en/atomic/latest/usage/atomic-localization/).  Available formats: https://day.js.org/docs/en/durations/format
         */
        "format"?: string;
        /**
          * The unit of measurement of the field value. Available units: https://day.js.org/docs/en/durations/creating
         */
        "unit"?: string;
    }
    /**
     * The `atomic-results-per-page` component determines how many results to display per page.
     */
    interface AtomicResultsPerPage {
        /**
          * A list of choices for the number of results to display per page, separated by commas.
         */
        "choicesDisplayed"?: string;
        /**
          * The initial selection for the number of result per page. This should be part of the `choicesDisplayed` option. By default, this is set to the first value in `choicesDisplayed`.
         */
        "initialChoice"?: number;
        "onAtomic/scrollToTop"?: (event: AtomicResultsPerPageCustomEvent<any>) => void;
    }
    /**
     * The `atomic-search-box` component creates a search box with built-in support for suggestions.
     */
    interface AtomicSearchBox {
        /**
          * Whether to clear all active query filters when the end user submits a new query from the search box. Setting this option to "false" is not recommended & can lead to an increasing number of queries returning no results.
         */
        "clearFilters"?: boolean;
        /**
          * Whether to prevent the user from triggering searches and query suggestions from the component. Perfect for use cases where you need to disable the search conditionally. For the specific case when you need to disable the search based on the length of the query, refer to {@link minimumQueryLength}.
         */
        "disableSearch"?: boolean;
        /**
          * Whether to interpret advanced [Coveo Cloud query syntax](https://docs.coveo.com/en/1814/) in the query. You should only enable query syntax in the search box if you have good reasons to do so, as it requires end users to be familiar with Coveo Cloud query syntax, otherwise they will likely be surprised by the search box behaviour.  When the `redirection-url` property is set and redirects to a page with more `atomic-search-box` components, all `atomic-search-box` components need to have the same `enable-query-syntax` value.
         */
        "enableQuerySyntax"?: boolean;
        /**
          * The minimum query length required to enable search. For example, to disable the search for empty queries, set this to `1`.
         */
        "minimumQueryLength"?: number;
        /**
          * The amount of queries displayed when the user interacts with the search box. By default, a mix of query suggestions and recent queries will be shown. You can configure those settings using the following components as children:  - atomic-search-box-query-suggestions  - atomic-search-box-recent-queries
         */
        "numberOfQueries"?: number;
        /**
          * Event that is emitted when a standalone search box redirection is triggered. By default, the search box will directly change the URL and redirect accordingly, so if you want to handle the redirection differently, use this event.  Example: ```html <script>   document.querySelector('atomic-search-box').addEventListener((e) => {     e.preventDefault();     // handle redirection   }); </script> ... <atomic-search-box redirection-url="/search"></atomic-search-box> ```
         */
        "onRedirect"?: (event: AtomicSearchBoxCustomEvent<RedirectionPayload>) => void;
        /**
          * Defining this option makes the search box standalone (see [Use a Standalone Search Box](https://docs.coveo.com/en/atomic/latest/usage/ssb/)).  This option defines the default URL the user should be redirected to, when a query is submitted. If a query pipeline redirect is triggered, it will redirect to that URL instead (see [query pipeline triggers](https://docs.coveo.com/en/1458)).
         */
        "redirectionUrl"?: string;
        /**
          * The delay for suggestion queries on input, in milliseconds.  The suggestion request will be delayed until the end user stops typing for at least the specified amount of time.  This delay is used to avoid sending too many requests to the Coveo Platform when the user is typing, as well as reducing potential input lag on low end devices. A higher delay will reduce input lag, at the cost of suggestions freshness.
         */
        "suggestionDelay"?: number;
        /**
          * The timeout for suggestion queries, in milliseconds. If a suggestion query times out, the suggestions from that particular query won't be shown.
         */
        "suggestionTimeout"?: number;
        /**
          * Whether to render the search box using a [textarea](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea) element. The resulting component will expand to support multi-line queries. When customizing the dimensions of the textarea element using the `"textarea"` CSS part, it is important to also apply the styling to its container's ::after pseudo-element as well as the `"textarea-spacer"` part. The buttons within the search box are likely to need adjusting as well.  Example: ```css <style>   atomic-search-box::part(textarea),   atomic-search-box::part(textarea-expander)::after,   atomic-search-box::part(textarea-spacer) {     font-size: x-large;   }    atomic-search-box::part(submit-button-wrapper),   atomic-search-box::part(clear-button-wrapper) {     padding-top: 0.75rem;   } </style> ```  NB: The textarea functionality will be enforced on the next major version of Atomic (3.0.0)
         */
        "textarea"?: boolean;
    }
    /**
     * The `atomic-search-box-instant-results` component can be added as a child of an `atomic-search-box` component, allowing for the configuration of instant results behavior.
     * This component does not support accessibility out-of-the-box. To do so, see [Instant Results Accessibility](https://docs.coveo.com/en/atomic/latest/usage/accessibility/#instant-results-accessibility).
     * This component is not supported on mobile.
     */
    interface AtomicSearchBoxInstantResults {
        /**
          * The callback to generate an [`aria-label`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-label) for a given result so that accessibility tools can fully describe what's visually rendered by a result.  By default, or if an empty string is returned, `result.title` is used.
         */
        "ariaLabelGenerator"?: AriaLabelGenerator;
        /**
          * The spacing of various elements in the result list, including the gap between results, the gap between parts of a result, and the font sizes of different parts in a result.
         */
        "density"?: ItemDisplayDensity;
        /**
          * The expected size of the image displayed in the results.
         */
        "imageSize"?: ItemDisplayImageSize;
        /**
          * The maximum number of results to show.
         */
        "maxResultsPerQuery"?: number;
    }
    /**
     * The `atomic-search-box-query-suggestions` component can be added as a child of an `atomic-search-box` component, allowing for the configuration of query suggestion behavior.
     */
    interface AtomicSearchBoxQuerySuggestions {
        /**
          * The SVG icon to display.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly.
         */
        "icon"?: string;
        /**
          * The maximum number of suggestions that will be displayed if the user has typed something into the input field.
         */
        "maxWithQuery"?: number;
        /**
          * The maximum number of suggestions that will be displayed initially when the input field is empty.
         */
        "maxWithoutQuery"?: number;
    }
    /**
     * The `atomic-search-box-recent-queries` component can be added as a child of an `atomic-search-box` component, allowing for the configuration of recent query suggestions.
     */
    interface AtomicSearchBoxRecentQueries {
        /**
          * The SVG icon to display.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly.
         */
        "icon"?: string;
        /**
          * The maximum number of suggestions that will be displayed if the user has typed something into the input field.
         */
        "maxWithQuery"?: number;
        /**
          * The maximum number of suggestions that will be displayed initially when the input field is empty.
         */
        "maxWithoutQuery"?: number;
    }
    /**
     * The `atomic-search-interface` component is the parent to all other atomic components in a search page. It handles the headless search engine and localization configurations.
     */
    interface AtomicSearchInterface {
        /**
          * The value to set the [nonce](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce) attribute to on inline script and style elements generated by this interface and its child components. If your application is served with a Content Security Policy (CSP) that doesn't include the `script-src: 'unsafe-inline'` or `style-src: 'unsafe-inline'` directives, you should ensure that your application server generates a new nonce on every page load and uses the generated value to set this prop and serve the corresponding CSP response headers (i.e., script-src 'nonce-<YOUR_GENERATED_NONCE>' and style-src 'nonce-<YOUR_GENERATED_NONCE>'). Otherwise you may see console errors such as  - Refused to execute inline script because it violates the following Content Security Policy directive: [...]  - Refused to apply inline style because it violates the following Content Security Policy directive: [...].
          * @example : ```html <script nonce="<YOUR_GENERATED_NONCE>"> import {setNonce} from '@coveo/atomic'; setNonce('<YOUR_GENERATED_NONCE>'); </script> ```
         */
        "CspNonce"?: string;
        /**
          * Whether analytics should be enabled.
         */
        "analytics"?: boolean;
        /**
          * Whether the relevance inspector shortcut should be enabled for this interface.  The relevance inspector can be opened by holding the Alt key (Option on Mac) while over the interface, and performing a double click.  The relevance inspector allows to troubleshoot and debug queries.
         */
        "enableRelevanceInspector"?: boolean;
        /**
          * The search interface headless engine.
         */
        "engine"?: SearchEngine;
        /**
          * A list of non-default fields to include in the query results.  Specify the property as an array using a JSON string representation: ```html <atomic-search-interface fields-to-include='["fieldA", "fieldB"]'></atomic-search-interface> ```
         */
        "fieldsToInclude"?: string[] | string;
        /**
          * The search interface i18next instance.
         */
        "i18n"?: i18n;
        /**
          * The icon assets path. By default, this will be a relative URL pointing to `./assets`.  Example: "/mypublicpath/icons"
         */
        "iconAssetsPath"?: string;
        /**
          * The search interface language.
         */
        "language"?: string;
        /**
          * The language assets path. By default, this will be a relative URL pointing to `./lang`.  Example: "/mypublicpath/languages"
         */
        "languageAssetsPath"?: string;
        /**
          * The compatibility JSON version for i18next to use (see [i18next Migration Guide](https://www.i18next.com/misc/migration-guide#v20.x.x-to-v21.0.0)).
         */
        "localizationCompatibilityVersion"?: i18nCompatibilityVersion;
        /**
          * The severity level of the messages to log in the console.
         */
        "logLevel"?: LogLevel1;
        /**
          * The search interface [query pipeline](https://docs.coveo.com/en/180/).  If the search interface is initialized using [`initializeWithSearchEngine`](https://docs.coveo.com/en/atomic/latest/reference/components/atomic-search-interface/#initializewithsearchengine), the query pipeline should instead be configured in the target engine.
         */
        "pipeline"?: string;
        /**
          * Whether the state should be reflected in the URL parameters.
         */
        "reflectStateInUrl"?: boolean;
        /**
          * The CSS selector for the container where the interface will scroll back to.
         */
        "scrollContainer"?: string;
        /**
          * The search interface [search hub](https://docs.coveo.com/en/1342/).  If the search interface is initialized using [`initializeWithSearchEngine`](https://docs.coveo.com/en/atomic/latest/reference/components/atomic-search-interface/#initializewithsearchengine, the search hub should instead be configured in the target engine.
         */
        "searchHub"?: string;
        /**
          * The [tz database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) identifier of the time zone to use to correctly interpret dates in the query expression, facets, and result items. By default, the timezone will be [guessed](https://day.js.org/docs/en/timezone/guessing-user-timezone).  Example: "America/Montreal"
         */
        "timezone"?: string;
    }
    /**
     * The `atomic-search-layout` helps organize elements in the page.
     */
    interface AtomicSearchLayout {
        /**
          * CSS value that defines where the layout goes from mobile to desktop. e.g., 800px, 65rem.
         */
        "mobileBreakpoint"?: string;
    }
    /**
     * The `atomic-segmented-facet` displays a horizontal facet of the results for the current query.
     */
    interface AtomicSegmentedFacet {
        /**
          * Specifies an explicit list of `allowedValues` in the Search API request. This list is in the form of a JSON string.  If you specify a list of values for this option, the facet only uses these values (if they are available in the current result set).  Example:  The following facet only uses the `Contact`, `Account`, and `File` values of the `objecttype` field. Even if the current result set contains other `objecttype` values, such as `Message` or `Product`, the facet does not use them.  ```html <atomic-segmented-facet field="objecttype" allowed-values='["Contact","Account","File"]'></atomic-segmented-facet> ```  The maximum amount of allowed values is 25.  The default value is `undefined`, and the facet uses all available values for its `field` in the current result set.
         */
        "allowedValues"?: string[] | string;
        /**
          * Identifies the facet values that must appear at the top, in this order. This parameter can be used in conjunction with the `sortCriteria` parameter.  Facet values not part of the `customSort` list will be sorted according to the `sortCriteria`.  Example:  The following facet will sort the `Contact`, `Account`, and `File` values at the top of the list for the `objecttype` field.  If there are more than these 3 values available, the rest of the list will be sorted using `occurrences`.  ```html <atomic-segmented-facet field="objecttype" custom-sort='["Contact","Account","File"]' sort-criteria='occurrences'></atomic-segmented-facet> ``` The maximum amount of custom sort values is 25.  The default value is `undefined`, and the facet values will be sorted using only the `sortCriteria`.
         */
        "customSort"?: string[] | string;
        /**
          * The required facets and values for this facet to be displayed. Examples: ```html <atomic-segmented-facet facet-id="abc" field="objecttype" ...></atomic-segmented-facet>  <!-- To show the facet when any value is selected in the facet with id "abc": --> <atomic-segmented-facet   depends-on-abc   ... ></atomic-segmented-facet>  <!-- To show the facet when value "doc" is selected in the facet with id "abc": --> <atomic-facet   depends-on-abc="doc"   ... ></atomic-segmented-facet> ```
         */
        "dependsOn"?: Record<string, string>;
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Whether to exclude the parents of folded results when estimating the result count for each facet value.
         */
        "filterFacetCount"?: boolean;
        /**
          * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values. Note: A high injectionDepth may negatively impact the facet request performance. Minimum: `0` Default: `1000`
         */
        "injectionDepth"?: number;
        /**
          * The non-localized label for the facet. Used in the `atomic-breadbox` component through the bindings store.
         */
        "label"?: string;
        /**
          * The number of values to request for this facet. Also determines the number of additional values to request each time more values are shown.
         */
        "numberOfValues"?: number;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are 'score', 'alphanumeric', 'occurrences', and 'automatic'.
         */
        "sortCriteria"?: FacetSortCriterion;
    }
    /**
     * The 'atomic-segmented-facet-scrollable' component wraps around one or several 'atomic-segmented-facet' to provide horizontal scrolling capabilities.
     */
    interface AtomicSegmentedFacetScrollable {
    }
    /**
     * The `atomic-smart-snippet` component displays the excerpt of a document that would be most likely to answer a particular query.
     * You can style the snippet by inserting a template element as follows:
     * ```html
     * <atomic-smart-snippet>
     *   <template>
     *     <style>
     *       b {
     *         color: blue;
     *       }
     *     </style>
     *   </template>
     * </atomic-smart-snippet>
     * ```
     */
    interface AtomicSmartSnippet {
        /**
          * When the answer is partly hidden, how much of its height (in pixels) should be visible.
         */
        "collapsedHeight"?: number;
        /**
          * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the question at the top of the snippet, from 1 to 5.
         */
        "headingLevel"?: number;
        /**
          * The maximum height (in pixels) a snippet can have before the component truncates it and displays a "show more" button.
         */
        "maximumHeight"?: number;
        "snippetCollapsedHeight"?: number;
        "snippetMaximumHeight"?: number;
        /**
          * Sets the style of the snippet.  Example: ```ts smartSnippet.snippetStyle = `   b {     color: blue;   } `; ```
         */
        "snippetStyle"?: string;
    }
    interface AtomicSmartSnippetAnswer {
        "htmlContent": string;
        "innerStyle"?: string;
        "onAnswerSizeUpdated"?: (event: AtomicSmartSnippetAnswerCustomEvent<{height: number}>) => void;
        "onBeginDelayedSelectInlineLink"?: (event: AtomicSmartSnippetAnswerCustomEvent<InlineLink>) => void;
        "onCancelPendingSelectInlineLink"?: (event: AtomicSmartSnippetAnswerCustomEvent<InlineLink>) => void;
        "onSelectInlineLink"?: (event: AtomicSmartSnippetAnswerCustomEvent<InlineLink>) => void;
    }
    interface AtomicSmartSnippetCollapseWrapper {
        "collapsedHeight"?: number;
        "maximumHeight"?: number;
    }
    interface AtomicSmartSnippetExpandableAnswer {
        /**
          * When the answer is partly hidden, how much of its height (in pixels) should be visible.
         */
        "collapsedHeight"?: number;
        "expanded": boolean;
        "htmlContent": string;
        /**
          * The maximum height (in pixels) a snippet can have before the component truncates it and displays a "show more" button.
         */
        "maximumHeight"?: number;
        "onBeginDelayedSelectInlineLink"?: (event: AtomicSmartSnippetExpandableAnswerCustomEvent<InlineLink>) => void;
        "onCancelPendingSelectInlineLink"?: (event: AtomicSmartSnippetExpandableAnswerCustomEvent<InlineLink>) => void;
        "onCollapse"?: (event: AtomicSmartSnippetExpandableAnswerCustomEvent<any>) => void;
        "onExpand"?: (event: AtomicSmartSnippetExpandableAnswerCustomEvent<any>) => void;
        "onSelectInlineLink"?: (event: AtomicSmartSnippetExpandableAnswerCustomEvent<InlineLink>) => void;
        /**
          * Sets the style of the snippet.  Example: ```ts expandableAnswer.snippetStyle = `   b {     color: blue;   } `; ```
         */
        "snippetStyle"?: string;
    }
    /**
     * The `atomic-smart-snippet-feedback-modal` is automatically created as a child of the `atomic-search-interface` when the `atomic-smart-snippet` is initialized.
     * When the modal is opened, the class `atomic-modal-opened` is added to the body, allowing further customization.
     */
    interface AtomicSmartSnippetFeedbackModal {
        "isOpen"?: boolean;
        "onFeedbackSent"?: (event: AtomicSmartSnippetFeedbackModalCustomEvent<any>) => void;
        "source"?: HTMLElement;
    }
    interface AtomicSmartSnippetSource {
        "anchorAttributes"?: Attr[];
        "onBeginDelayedSelectSource"?: (event: AtomicSmartSnippetSourceCustomEvent<any>) => void;
        "onCancelPendingSelectSource"?: (event: AtomicSmartSnippetSourceCustomEvent<any>) => void;
        "onSelectSource"?: (event: AtomicSmartSnippetSourceCustomEvent<any>) => void;
        "source": Result;
    }
    /**
     * The `atomic-smart-snippet-suggestions-suggestions` component displays an accordion of questions related to the query with their corresponding answers.
     * You can style the snippets by inserting a template element like this:
     * ```html
     * <atomic-smart-snippet-suggestions>
     *   <template>
     *     <style>
     *       b {
     *         color: blue;
     *       }
     *     </style>
     *   </template>
     * </atomic-smart-snippet-suggestions>
     * ```
     */
    interface AtomicSmartSnippetSuggestions {
        /**
          * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the "People also ask" heading over the snippets, from 1 to 5.
         */
        "headingLevel"?: number;
        /**
          * Sets the style of the snippets.  Example: ```ts smartSnippet.snippetStyle = `   b {     color: blue;   } `; ```
         */
        "snippetStyle"?: string;
    }
    /**
     * The `atomic-sort-dropdown` component renders a dropdown that the end user can interact with to select the criteria to use when sorting query results.
     */
    interface AtomicSortDropdown {
    }
    /**
     * The `atomic-sort-expression` component defines a sort expression. This component must be inside an `atomic-sort-dropdown` component.
     */
    interface AtomicSortExpression {
        /**
          * One or more sort criteria that the end user can select or toggle between.  The available sort criteria are:  * `relevancy` * `date ascending`/`date descending` * `qre` * `<FIELD> ascending`/`<FIELD> descending`, where you replace `<FIELD>` with the name of a sortable field in your index (e.g., `criteria="size ascending"`).  You can specify multiple sort criteria to be used in the same request by separating them with a comma (e.g., `criteria="size ascending, date ascending"`).
         */
        "expression": string;
        /**
          * The non-localized label to display for this expression.
         */
        "label": string;
    }
    /**
     * The `atomic-table-element` element defines a table column in a result list.
     */
    interface AtomicTableElement {
        /**
          * The label to display in the header of this column.
         */
        "label": string;
    }
    /**
     * The `atomic-text` component leverages the I18n translation module through the atomic-search-interface.
     */
    interface AtomicText {
        /**
          * The count value used for plurals.
         */
        "count"?: number;
        /**
          * The string key value.
         */
        "value": string;
    }
    /**
     * The `atomic-timeframe` component defines a timeframe of an `atomic-timeframe-facet`, and therefore must be defined within an `atomic-timeframe-facet` component.
     * A timeframe is a span of time from now to a specific time in the past.
     */
    interface AtomicTimeframe {
        /**
          * The amount of units from which to count.  E.g., 10 days, 1 year, etc.
         */
        "amount"?: number;
        /**
          * The non-localized label for the timeframe. When defined, it will appear instead of the formatted value. Used in the `atomic-breadbox` component through the bindings store.
         */
        "label"?: string;
        /**
          * The relative period of time to now.
         */
        "period"?: 'past' | 'next';
        /**
          * The unit used to define: - the start date of the timeframe, if the period is `past` - the end date of the timeframe, if the period is `future`
         */
        "unit": RelativeDateUnit;
    }
    /**
     * A facet is a list of values for a certain field occurring in the results.
     * An `atomic-timeframe-facet` displays a facet of the results for the current query as date intervals.
     */
    interface AtomicTimeframeFacet {
        /**
          * The required facets and values for this facet to be displayed. Examples: ```html <atomic-facet facet-id="abc" field="objecttype" ...></atomic-facet>  <!-- To show the facet when any value is selected in the facet with id "abc": --> <atomic-timeframe-facet   depends-on-abc   ... ></atomic-timeframe-facet>  <!-- To show the facet when value "doc" is selected in the facet with id "abc": --> <atomic-timeframe-facet   depends-on-abc="doc"   ... ></atomic-timeframe-facet> ```
         */
        "dependsOn"?: Record<string, string>;
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field"?: string;
        /**
          * Whether to exclude the parents of folded results when estimating the result count for each facet value.
         */
        "filterFacetCount"?: boolean;
        /**
          * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.
         */
        "headingLevel"?: number;
        /**
          * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values. Note: A high injectionDepth may negatively impact the facet request performance. Minimum: `0` Default: `1000`
         */
        "injectionDepth"?: number;
        /**
          * Specifies whether the facet is collapsed. When the facet is the child of an `atomic-facet-manager` component, the facet manager controls this property.
         */
        "isCollapsed"?: boolean;
        /**
          * The non-localized label for the facet. Used in the atomic-breadbox component through the bindings store.
         */
        "label"?: string;
        /**
          * The latest date to accept from user input when the `withDatepicker` option is enabled.  This value must be a valid date string in the format `YYYY-MM-DD`.  If this format is not respected, the date picker ignores this property, behaving as if no `max` value had been set.  See also [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date#max).
         */
        "max"?: string;
        /**
          * The earliest date to accept from user input when the `withDatepicker` option is enabled.  This value must be a valid date string in the format `YYYY-MM-DD`.  If this format is not respected, the date picker ignores this property, behaving as if no `min` value had been set.  See also [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date#min).
         */
        "min"?: string;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are 'ascending' and 'descending'.
         */
        "sortCriteria"?: RangeFacetSortCriterion;
        /**
          * Whether this facet should contain an datepicker allowing users to set custom ranges.
         */
        "withDatePicker"?: boolean;
    }
    interface TabBar {
    }
    interface TabPopover {
    }
    interface IntrinsicElements {
        "atomic-aria-live": AtomicAriaLive;
        "atomic-automatic-facet": AtomicAutomaticFacet;
        "atomic-automatic-facet-generator": AtomicAutomaticFacetGenerator;
        "atomic-breadbox": AtomicBreadbox;
        "atomic-category-facet": AtomicCategoryFacet;
        "atomic-citation": AtomicCitation;
        "atomic-color-facet": AtomicColorFacet;
        "atomic-commerce-interface": AtomicCommerceInterface;
        "atomic-commerce-pager": AtomicCommercePager;
        "atomic-commerce-result-list": AtomicCommerceResultList;
        "atomic-commerce-search-box": AtomicCommerceSearchBox;
        "atomic-component-error": AtomicComponentError;
        "atomic-did-you-mean": AtomicDidYouMean;
        "atomic-external": AtomicExternal;
        "atomic-facet": AtomicFacet;
        "atomic-facet-date-input": AtomicFacetDateInput;
        "atomic-facet-manager": AtomicFacetManager;
        "atomic-facet-number-input": AtomicFacetNumberInput;
        "atomic-field-condition": AtomicFieldCondition;
        "atomic-focus-detector": AtomicFocusDetector;
        "atomic-focus-trap": AtomicFocusTrap;
        "atomic-folded-result-list": AtomicFoldedResultList;
        "atomic-format-currency": AtomicFormatCurrency;
        "atomic-format-number": AtomicFormatNumber;
        "atomic-format-unit": AtomicFormatUnit;
        "atomic-frequently-bought-together": AtomicFrequentlyBoughtTogether;
        "atomic-generated-answer": AtomicGeneratedAnswer;
        "atomic-generated-answer-feedback-modal": AtomicGeneratedAnswerFeedbackModal;
        "atomic-html": AtomicHtml;
        "atomic-icon": AtomicIcon;
        "atomic-insight-edit-toggle": AtomicInsightEditToggle;
        "atomic-insight-facet": AtomicInsightFacet;
        "atomic-insight-folded-result-list": AtomicInsightFoldedResultList;
        "atomic-insight-full-search-button": AtomicInsightFullSearchButton;
        "atomic-insight-generated-answer": AtomicInsightGeneratedAnswer;
        "atomic-insight-history-toggle": AtomicInsightHistoryToggle;
        "atomic-insight-interface": AtomicInsightInterface;
        "atomic-insight-layout": AtomicInsightLayout;
        "atomic-insight-no-results": AtomicInsightNoResults;
        "atomic-insight-numeric-facet": AtomicInsightNumericFacet;
        "atomic-insight-pager": AtomicInsightPager;
        "atomic-insight-query-error": AtomicInsightQueryError;
        "atomic-insight-query-summary": AtomicInsightQuerySummary;
        "atomic-insight-refine-modal": AtomicInsightRefineModal;
        "atomic-insight-refine-toggle": AtomicInsightRefineToggle;
        "atomic-insight-result": AtomicInsightResult;
        "atomic-insight-result-action": AtomicInsightResultAction;
        "atomic-insight-result-action-bar": AtomicInsightResultActionBar;
        "atomic-insight-result-children": AtomicInsightResultChildren;
        "atomic-insight-result-children-template": AtomicInsightResultChildrenTemplate;
        "atomic-insight-result-list": AtomicInsightResultList;
        "atomic-insight-result-template": AtomicInsightResultTemplate;
        "atomic-insight-search-box": AtomicInsightSearchBox;
        "atomic-insight-smart-snippet": AtomicInsightSmartSnippet;
        "atomic-insight-smart-snippet-feedback-modal": AtomicInsightSmartSnippetFeedbackModal;
        "atomic-insight-smart-snippet-suggestions": AtomicInsightSmartSnippetSuggestions;
        "atomic-insight-tab": AtomicInsightTab;
        "atomic-insight-tabs": AtomicInsightTabs;
        "atomic-insight-timeframe-facet": AtomicInsightTimeframeFacet;
        "atomic-ipx-body": AtomicIpxBody;
        "atomic-ipx-button": AtomicIpxButton;
        "atomic-ipx-embedded": AtomicIpxEmbedded;
        "atomic-ipx-modal": AtomicIpxModal;
        "atomic-ipx-refine-modal": AtomicIpxRefineModal;
        "atomic-ipx-refine-toggle": AtomicIpxRefineToggle;
        "atomic-ipx-result-link": AtomicIpxResultLink;
        "atomic-ipx-tab": AtomicIpxTab;
        "atomic-ipx-tabs": AtomicIpxTabs;
        "atomic-layout-section": AtomicLayoutSection;
        "atomic-load-more-children-results": AtomicLoadMoreChildrenResults;
        "atomic-load-more-results": AtomicLoadMoreResults;
        "atomic-modal": AtomicModal;
        "atomic-no-results": AtomicNoResults;
        "atomic-notifications": AtomicNotifications;
        "atomic-numeric-facet": AtomicNumericFacet;
        "atomic-numeric-range": AtomicNumericRange;
        "atomic-pager": AtomicPager;
        "atomic-popover": AtomicPopover;
        "atomic-query-error": AtomicQueryError;
        "atomic-query-summary": AtomicQuerySummary;
        "atomic-quickview": AtomicQuickview;
        "atomic-quickview-modal": AtomicQuickviewModal;
        "atomic-rating-facet": AtomicRatingFacet;
        "atomic-rating-range-facet": AtomicRatingRangeFacet;
        "atomic-recs-error": AtomicRecsError;
        "atomic-recs-interface": AtomicRecsInterface;
        "atomic-recs-list": AtomicRecsList;
        "atomic-recs-result": AtomicRecsResult;
        "atomic-recs-result-template": AtomicRecsResultTemplate;
        "atomic-refine-modal": AtomicRefineModal;
        "atomic-refine-toggle": AtomicRefineToggle;
        "atomic-relevance-inspector": AtomicRelevanceInspector;
        "atomic-result": AtomicResult;
        "atomic-result-badge": AtomicResultBadge;
        "atomic-result-children": AtomicResultChildren;
        "atomic-result-children-template": AtomicResultChildrenTemplate;
        "atomic-result-date": AtomicResultDate;
        "atomic-result-fields-list": AtomicResultFieldsList;
        "atomic-result-html": AtomicResultHtml;
        "atomic-result-icon": AtomicResultIcon;
        "atomic-result-image": AtomicResultImage;
        "atomic-result-link": AtomicResultLink;
        "atomic-result-list": AtomicResultList;
        "atomic-result-localized-text": AtomicResultLocalizedText;
        "atomic-result-multi-value-text": AtomicResultMultiValueText;
        "atomic-result-number": AtomicResultNumber;
        "atomic-result-placeholder": AtomicResultPlaceholder;
        "atomic-result-printable-uri": AtomicResultPrintableUri;
        "atomic-result-rating": AtomicResultRating;
        "atomic-result-section-actions": AtomicResultSectionActions;
        "atomic-result-section-badges": AtomicResultSectionBadges;
        "atomic-result-section-bottom-metadata": AtomicResultSectionBottomMetadata;
        "atomic-result-section-children": AtomicResultSectionChildren;
        "atomic-result-section-emphasized": AtomicResultSectionEmphasized;
        "atomic-result-section-excerpt": AtomicResultSectionExcerpt;
        "atomic-result-section-title": AtomicResultSectionTitle;
        "atomic-result-section-title-metadata": AtomicResultSectionTitleMetadata;
        "atomic-result-section-visual": AtomicResultSectionVisual;
        "atomic-result-table-placeholder": AtomicResultTablePlaceholder;
        "atomic-result-template": AtomicResultTemplate;
        "atomic-result-text": AtomicResultText;
        "atomic-result-timespan": AtomicResultTimespan;
        "atomic-results-per-page": AtomicResultsPerPage;
        "atomic-search-box": AtomicSearchBox;
        "atomic-search-box-instant-results": AtomicSearchBoxInstantResults;
        "atomic-search-box-query-suggestions": AtomicSearchBoxQuerySuggestions;
        "atomic-search-box-recent-queries": AtomicSearchBoxRecentQueries;
        "atomic-search-interface": AtomicSearchInterface;
        "atomic-search-layout": AtomicSearchLayout;
        "atomic-segmented-facet": AtomicSegmentedFacet;
        "atomic-segmented-facet-scrollable": AtomicSegmentedFacetScrollable;
        "atomic-smart-snippet": AtomicSmartSnippet;
        "atomic-smart-snippet-answer": AtomicSmartSnippetAnswer;
        "atomic-smart-snippet-collapse-wrapper": AtomicSmartSnippetCollapseWrapper;
        "atomic-smart-snippet-expandable-answer": AtomicSmartSnippetExpandableAnswer;
        "atomic-smart-snippet-feedback-modal": AtomicSmartSnippetFeedbackModal;
        "atomic-smart-snippet-source": AtomicSmartSnippetSource;
        "atomic-smart-snippet-suggestions": AtomicSmartSnippetSuggestions;
        "atomic-sort-dropdown": AtomicSortDropdown;
        "atomic-sort-expression": AtomicSortExpression;
        "atomic-table-element": AtomicTableElement;
        "atomic-text": AtomicText;
        "atomic-timeframe": AtomicTimeframe;
        "atomic-timeframe-facet": AtomicTimeframeFacet;
        "tab-bar": TabBar;
        "tab-popover": TabPopover;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * The `atomic-aria-live` component notifies screen readers of changes in the search interface.
             */
            "atomic-aria-live": LocalJSX.AtomicAriaLive & JSXBase.HTMLAttributes<HTMLAtomicAriaLiveElement>;
            /**
             * An automatic facet is a special type of facet generated by the automatic facets feature.
             * Unlike regular facets, which need to be explicitly defined and requested in the query,
             * automatic facets are dynamically generated by the index in response to the query.
             * **Note:** This component should never be used on its own. It is used internally by the `atomic-automatic-facet-generator`
             * component to automatically render updated facets. However, you can use the shadow parts to style the automatically generated facets.
             * To learn more about the automatic facet generator feature, see: [About the Facet Generator](https://docs.coveo.com/en/n9sd0159/).
             */
            "atomic-automatic-facet": LocalJSX.AtomicAutomaticFacet & JSXBase.HTMLAttributes<HTMLAtomicAutomaticFacetElement>;
            /**
             * The `atomic-automatic-facet-generator` is a component that renders the facets from
             * the automatic facets feature. Unlike regular facets, which need to be explicitly defined
             * and requested in the query, automatic facets are dynamically generated by the index
             * in response to the search query.
             * **Note:** This component renders one or more [automatic facets](https://docs.coveo.com/en/atomic/latest/reference/components/atomic-automatic-facet/) based on the `desiredCount` property.
             * To learn more about the automatic facet generator feature, see: [About the Facet Generator](https://docs.coveo.com/en/n9sd0159/).
             */
            "atomic-automatic-facet-generator": LocalJSX.AtomicAutomaticFacetGenerator & JSXBase.HTMLAttributes<HTMLAtomicAutomaticFacetGeneratorElement>;
            /**
             * The `atomic-breadbox` component creates breadcrumbs that display a summary of the currently active facet values.
             */
            "atomic-breadbox": LocalJSX.AtomicBreadbox & JSXBase.HTMLAttributes<HTMLAtomicBreadboxElement>;
            /**
             * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., number of occurrences).
             * An `atomic-category-facet` displays a facet of values in a browsable, hierarchical fashion.
             */
            "atomic-category-facet": LocalJSX.AtomicCategoryFacet & JSXBase.HTMLAttributes<HTMLAtomicCategoryFacetElement>;
            "atomic-citation": LocalJSX.AtomicCitation & JSXBase.HTMLAttributes<HTMLAtomicCitationElement>;
            /**
             * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., number of occurrences).
             * An `atomic-color-facet` displays a facet of the results for the current query as colors.
             */
            "atomic-color-facet": LocalJSX.AtomicColorFacet & JSXBase.HTMLAttributes<HTMLAtomicColorFacetElement>;
            "atomic-commerce-interface": LocalJSX.AtomicCommerceInterface & JSXBase.HTMLAttributes<HTMLAtomicCommerceInterfaceElement>;
            /**
             * The `atomic-pager` provides buttons that allow the end user to navigate through the different product pages.
             */
            "atomic-commerce-pager": LocalJSX.AtomicCommercePager & JSXBase.HTMLAttributes<HTMLAtomicCommercePagerElement>;
            "atomic-commerce-result-list": LocalJSX.AtomicCommerceResultList & JSXBase.HTMLAttributes<HTMLAtomicCommerceResultListElement>;
            /**
             * The `atomic-commerce-search-box` component creates a search box with built-in support for suggestions.
             */
            "atomic-commerce-search-box": LocalJSX.AtomicCommerceSearchBox & JSXBase.HTMLAttributes<HTMLAtomicCommerceSearchBoxElement>;
            /**
             * The `atomic-component-error` is used by other components to return errors. This doesn't require any configuration.
             */
            "atomic-component-error": LocalJSX.AtomicComponentError & JSXBase.HTMLAttributes<HTMLAtomicComponentErrorElement>;
            /**
             * The `atomic-did-you-mean` component is responsible for handling query corrections. When a query returns no result but finds a possible query correction, the component either suggests the correction or automatically triggers a new query with the suggested term.
             */
            "atomic-did-you-mean": LocalJSX.AtomicDidYouMean & JSXBase.HTMLAttributes<HTMLAtomicDidYouMeanElement>;
            /**
             * The `atomic-external` component allows components defined outside of the `atomic-search-interface` to initialize.
             */
            "atomic-external": LocalJSX.AtomicExternal & JSXBase.HTMLAttributes<HTMLAtomicExternalElement>;
            /**
             * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., number of occurrences).
             * An `atomic-facet` displays a facet of the results for the current query.
             */
            "atomic-facet": LocalJSX.AtomicFacet & JSXBase.HTMLAttributes<HTMLAtomicFacetElement>;
            /**
             * Internal component made to be integrated in a TimeframeFacet.
             */
            "atomic-facet-date-input": LocalJSX.AtomicFacetDateInput & JSXBase.HTMLAttributes<HTMLAtomicFacetDateInputElement>;
            /**
             * The `atomic-facet-manager` helps reorder facets and their values to match the most recent search response with the most relevant results. A facet component is slotted within an `atomic-facet-manager` to leverage this functionality.
             */
            "atomic-facet-manager": LocalJSX.AtomicFacetManager & JSXBase.HTMLAttributes<HTMLAtomicFacetManagerElement>;
            /**
             * Internal component made to be integrated in a NumericFacet.
             */
            "atomic-facet-number-input": LocalJSX.AtomicFacetNumberInput & JSXBase.HTMLAttributes<HTMLAtomicFacetNumberInputElement>;
            /**
             * The `atomic-field-condition` component takes a list of conditions that, if fulfilled, apply the template in which it's defined.
             * The condition properties can be based on any top-level result property of the `result` object, not restricted to fields (e.g., `isRecommendation`).
             * @MapProp name: mustMatch;attr: must-match;docs: The field and values that define which result items the condition must be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is `lithiummessage` or `YouTubePlaylist`: `must-match-filetype="lithiummessage,YouTubePlaylist"`;type: Record<string, string[]> ;default: {}
             * @MapProp name: mustNotMatch;attr: must-not-match;docs: The field and values that define which result items the condition must not be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is not `lithiummessage`: `must-not-match-filetype="lithiummessage";type: Record<string, string[]> ;default: {}
             */
            "atomic-field-condition": LocalJSX.AtomicFieldCondition & JSXBase.HTMLAttributes<HTMLAtomicFieldConditionElement>;
            "atomic-focus-detector": LocalJSX.AtomicFocusDetector & JSXBase.HTMLAttributes<HTMLAtomicFocusDetectorElement>;
            "atomic-focus-trap": LocalJSX.AtomicFocusTrap & JSXBase.HTMLAttributes<HTMLAtomicFocusTrapElement>;
            /**
             * The `atomic-folded-result-list` component is responsible for displaying folded query results, by applying one or more result templates for up to three layers (i.e., to the result, child and grandchild).
             */
            "atomic-folded-result-list": LocalJSX.AtomicFoldedResultList & JSXBase.HTMLAttributes<HTMLAtomicFoldedResultListElement>;
            /**
             * The `atomic-format-currency` component is used for formatting currencies.
             * The numerical format of compatible parents will be set according to the currency property of this component.
             */
            "atomic-format-currency": LocalJSX.AtomicFormatCurrency & JSXBase.HTMLAttributes<HTMLAtomicFormatCurrencyElement>;
            /**
             * The `atomic-format-number` component is used for number formatting.
             * The numerical format of compatible parents will be set according to the properties of this component.
             */
            "atomic-format-number": LocalJSX.AtomicFormatNumber & JSXBase.HTMLAttributes<HTMLAtomicFormatNumberElement>;
            /**
             * The `atomic-format-unit` component is used for formatting numbers with units.
             * The numerical format of compatible parents will be set according to the properties of this component.
             */
            "atomic-format-unit": LocalJSX.AtomicFormatUnit & JSXBase.HTMLAttributes<HTMLAtomicFormatUnitElement>;
            /**
             * The `atomic-frequently-bought-together` component suggests products frequently bought with the current product based on the shopping cart of other users.
             */
            "atomic-frequently-bought-together": LocalJSX.AtomicFrequentlyBoughtTogether & JSXBase.HTMLAttributes<HTMLAtomicFrequentlyBoughtTogetherElement>;
            /**
             * The `atomic-generated-answer` component uses Coveo Machine Learning (Coveo ML) models to automatically generate an answer to a query executed by the user.
             * For more information, see [About Relevance Generative Answering (RGA)](https://docs.coveo.com/en/n9de0370/)
             */
            "atomic-generated-answer": LocalJSX.AtomicGeneratedAnswer & JSXBase.HTMLAttributes<HTMLAtomicGeneratedAnswerElement>;
            "atomic-generated-answer-feedback-modal": LocalJSX.AtomicGeneratedAnswerFeedbackModal & JSXBase.HTMLAttributes<HTMLAtomicGeneratedAnswerFeedbackModalElement>;
            /**
             * The `atomic-html` component renders the HTML value of a string.
             * There is an inherent XSS security concern associated with the usage of this component.
             * Use only with values for which you are certain the content is harmless.
             */
            "atomic-html": LocalJSX.AtomicHtml & JSXBase.HTMLAttributes<HTMLAtomicHtmlElement>;
            /**
             * The `atomic-icon` component displays an SVG icon with a 1:1 aspect ratio.
             * This component can display an icon from those available in the Atomic package, from a specific location, or as an inline SVG element.
             */
            "atomic-icon": LocalJSX.AtomicIcon & JSXBase.HTMLAttributes<HTMLAtomicIconElement>;
            "atomic-insight-edit-toggle": LocalJSX.AtomicInsightEditToggle & JSXBase.HTMLAttributes<HTMLAtomicInsightEditToggleElement>;
            "atomic-insight-facet": LocalJSX.AtomicInsightFacet & JSXBase.HTMLAttributes<HTMLAtomicInsightFacetElement>;
            "atomic-insight-folded-result-list": LocalJSX.AtomicInsightFoldedResultList & JSXBase.HTMLAttributes<HTMLAtomicInsightFoldedResultListElement>;
            "atomic-insight-full-search-button": LocalJSX.AtomicInsightFullSearchButton & JSXBase.HTMLAttributes<HTMLAtomicInsightFullSearchButtonElement>;
            "atomic-insight-generated-answer": LocalJSX.AtomicInsightGeneratedAnswer & JSXBase.HTMLAttributes<HTMLAtomicInsightGeneratedAnswerElement>;
            "atomic-insight-history-toggle": LocalJSX.AtomicInsightHistoryToggle & JSXBase.HTMLAttributes<HTMLAtomicInsightHistoryToggleElement>;
            "atomic-insight-interface": LocalJSX.AtomicInsightInterface & JSXBase.HTMLAttributes<HTMLAtomicInsightInterfaceElement>;
            "atomic-insight-layout": LocalJSX.AtomicInsightLayout & JSXBase.HTMLAttributes<HTMLAtomicInsightLayoutElement>;
            "atomic-insight-no-results": LocalJSX.AtomicInsightNoResults & JSXBase.HTMLAttributes<HTMLAtomicInsightNoResultsElement>;
            "atomic-insight-numeric-facet": LocalJSX.AtomicInsightNumericFacet & JSXBase.HTMLAttributes<HTMLAtomicInsightNumericFacetElement>;
            "atomic-insight-pager": LocalJSX.AtomicInsightPager & JSXBase.HTMLAttributes<HTMLAtomicInsightPagerElement>;
            "atomic-insight-query-error": LocalJSX.AtomicInsightQueryError & JSXBase.HTMLAttributes<HTMLAtomicInsightQueryErrorElement>;
            "atomic-insight-query-summary": LocalJSX.AtomicInsightQuerySummary & JSXBase.HTMLAttributes<HTMLAtomicInsightQuerySummaryElement>;
            "atomic-insight-refine-modal": LocalJSX.AtomicInsightRefineModal & JSXBase.HTMLAttributes<HTMLAtomicInsightRefineModalElement>;
            "atomic-insight-refine-toggle": LocalJSX.AtomicInsightRefineToggle & JSXBase.HTMLAttributes<HTMLAtomicInsightRefineToggleElement>;
            "atomic-insight-result": LocalJSX.AtomicInsightResult & JSXBase.HTMLAttributes<HTMLAtomicInsightResultElement>;
            "atomic-insight-result-action": LocalJSX.AtomicInsightResultAction & JSXBase.HTMLAttributes<HTMLAtomicInsightResultActionElement>;
            "atomic-insight-result-action-bar": LocalJSX.AtomicInsightResultActionBar & JSXBase.HTMLAttributes<HTMLAtomicInsightResultActionBarElement>;
            "atomic-insight-result-children": LocalJSX.AtomicInsightResultChildren & JSXBase.HTMLAttributes<HTMLAtomicInsightResultChildrenElement>;
            "atomic-insight-result-children-template": LocalJSX.AtomicInsightResultChildrenTemplate & JSXBase.HTMLAttributes<HTMLAtomicInsightResultChildrenTemplateElement>;
            "atomic-insight-result-list": LocalJSX.AtomicInsightResultList & JSXBase.HTMLAttributes<HTMLAtomicInsightResultListElement>;
            "atomic-insight-result-template": LocalJSX.AtomicInsightResultTemplate & JSXBase.HTMLAttributes<HTMLAtomicInsightResultTemplateElement>;
            "atomic-insight-search-box": LocalJSX.AtomicInsightSearchBox & JSXBase.HTMLAttributes<HTMLAtomicInsightSearchBoxElement>;
            "atomic-insight-smart-snippet": LocalJSX.AtomicInsightSmartSnippet & JSXBase.HTMLAttributes<HTMLAtomicInsightSmartSnippetElement>;
            "atomic-insight-smart-snippet-feedback-modal": LocalJSX.AtomicInsightSmartSnippetFeedbackModal & JSXBase.HTMLAttributes<HTMLAtomicInsightSmartSnippetFeedbackModalElement>;
            "atomic-insight-smart-snippet-suggestions": LocalJSX.AtomicInsightSmartSnippetSuggestions & JSXBase.HTMLAttributes<HTMLAtomicInsightSmartSnippetSuggestionsElement>;
            "atomic-insight-tab": LocalJSX.AtomicInsightTab & JSXBase.HTMLAttributes<HTMLAtomicInsightTabElement>;
            "atomic-insight-tabs": LocalJSX.AtomicInsightTabs & JSXBase.HTMLAttributes<HTMLAtomicInsightTabsElement>;
            "atomic-insight-timeframe-facet": LocalJSX.AtomicInsightTimeframeFacet & JSXBase.HTMLAttributes<HTMLAtomicInsightTimeframeFacetElement>;
            "atomic-ipx-body": LocalJSX.AtomicIpxBody & JSXBase.HTMLAttributes<HTMLAtomicIpxBodyElement>;
            "atomic-ipx-button": LocalJSX.AtomicIpxButton & JSXBase.HTMLAttributes<HTMLAtomicIpxButtonElement>;
            "atomic-ipx-embedded": LocalJSX.AtomicIpxEmbedded & JSXBase.HTMLAttributes<HTMLAtomicIpxEmbeddedElement>;
            "atomic-ipx-modal": LocalJSX.AtomicIpxModal & JSXBase.HTMLAttributes<HTMLAtomicIpxModalElement>;
            "atomic-ipx-refine-modal": LocalJSX.AtomicIpxRefineModal & JSXBase.HTMLAttributes<HTMLAtomicIpxRefineModalElement>;
            "atomic-ipx-refine-toggle": LocalJSX.AtomicIpxRefineToggle & JSXBase.HTMLAttributes<HTMLAtomicIpxRefineToggleElement>;
            /**
             * The `atomic-ipx-result-link` component automatically transforms a search result title into a clickable link that points to the original item. It is an experimental internal component not intended for general use.
             */
            "atomic-ipx-result-link": LocalJSX.AtomicIpxResultLink & JSXBase.HTMLAttributes<HTMLAtomicIpxResultLinkElement>;
            "atomic-ipx-tab": LocalJSX.AtomicIpxTab & JSXBase.HTMLAttributes<HTMLAtomicIpxTabElement>;
            "atomic-ipx-tabs": LocalJSX.AtomicIpxTabs & JSXBase.HTMLAttributes<HTMLAtomicIpxTabsElement>;
            /**
             * The `atomic-layout-section` lets you identify various sections for the related `atomic-layout` component.
             */
            "atomic-layout-section": LocalJSX.AtomicLayoutSection & JSXBase.HTMLAttributes<HTMLAtomicLayoutSectionElement>;
            /**
             * The `atomic-load-more-children-results` component allows to load the full collection for a folded result.
             */
            "atomic-load-more-children-results": LocalJSX.AtomicLoadMoreChildrenResults & JSXBase.HTMLAttributes<HTMLAtomicLoadMoreChildrenResultsElement>;
            /**
             * The `atomic-load-more-results` component allows the user to load additional results if more are available.
             */
            "atomic-load-more-results": LocalJSX.AtomicLoadMoreResults & JSXBase.HTMLAttributes<HTMLAtomicLoadMoreResultsElement>;
            /**
             * When the modal is opened, the class `atomic-modal-opened` is added to the interfaceElement and the body, allowing further customization.
             */
            "atomic-modal": LocalJSX.AtomicModal & JSXBase.HTMLAttributes<HTMLAtomicModalElement>;
            /**
             * The `atomic-no-results` component displays search tips and a "Cancel last action" button when there are no results. Any additional content slotted inside of its element will be displayed as well.
             */
            "atomic-no-results": LocalJSX.AtomicNoResults & JSXBase.HTMLAttributes<HTMLAtomicNoResultsElement>;
            /**
             * The `atomic-notifications` component is responsible for displaying notifications generated by the Coveo Search API (see [Trigger](https://docs.coveo.com/en/1458)).
             */
            "atomic-notifications": LocalJSX.AtomicNotifications & JSXBase.HTMLAttributes<HTMLAtomicNotificationsElement>;
            /**
             * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., ascending, descending).
             * An `atomic-numeric-facet` displays a facet of the results for the current query as numeric ranges.
             */
            "atomic-numeric-facet": LocalJSX.AtomicNumericFacet & JSXBase.HTMLAttributes<HTMLAtomicNumericFacetElement>;
            /**
             * The `atomic-numeric-range` component defines the range of an `atomic-numeric-facet`, and therefore must be defined within an `atomic-numeric-facet` component.
             */
            "atomic-numeric-range": LocalJSX.AtomicNumericRange & JSXBase.HTMLAttributes<HTMLAtomicNumericRangeElement>;
            /**
             * The `atomic-pager` provides buttons that allow the end user to navigate through the different result pages.
             */
            "atomic-pager": LocalJSX.AtomicPager & JSXBase.HTMLAttributes<HTMLAtomicPagerElement>;
            /**
             * The `atomic-popover` component displays any facet as a popover menu.
             */
            "atomic-popover": LocalJSX.AtomicPopover & JSXBase.HTMLAttributes<HTMLAtomicPopoverElement>;
            /**
             * The `atomic-query-error` component handles fatal errors when performing a query on the index or Search API. When the error is known, it displays a link to relevant documentation link for debugging purposes. When the error is unknown, it displays a small text area with the JSON content of the error.
             */
            "atomic-query-error": LocalJSX.AtomicQueryError & JSXBase.HTMLAttributes<HTMLAtomicQueryErrorElement>;
            /**
             * The `atomic-query-summary` component displays information about the current range of results and the request duration (e.g., "Results 1-10 of 123 in 0.47 seconds").
             */
            "atomic-query-summary": LocalJSX.AtomicQuerySummary & JSXBase.HTMLAttributes<HTMLAtomicQuerySummaryElement>;
            /**
             * The `atomic-quickview` component renders a button which the end user can click to open a modal box containing a preview
             * about a result.
             * The `atomic-quickview` is not meant to replace the `atomic-result-link` to access an item in a result template; it has certain limitations (e.g., custom styles and embedded
             * images/links may not work as expected in an `atomic-quickview`).
             */
            "atomic-quickview": LocalJSX.AtomicQuickview & JSXBase.HTMLAttributes<HTMLAtomicQuickviewElement>;
            "atomic-quickview-modal": LocalJSX.AtomicQuickviewModal & JSXBase.HTMLAttributes<HTMLAtomicQuickviewModalElement>;
            /**
             * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., number of occurrences).
             * An `atomic-rating-facet` displays a facet of the results for the current query as ratings.
             * It only supports numeric fields.
             */
            "atomic-rating-facet": LocalJSX.AtomicRatingFacet & JSXBase.HTMLAttributes<HTMLAtomicRatingFacetElement>;
            /**
             * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., number of occurrences).
             * An `atomic-rating-range-facet` displays a facet of the results for the current query as ratings.
             * It only supports numeric fields.
             */
            "atomic-rating-range-facet": LocalJSX.AtomicRatingRangeFacet & JSXBase.HTMLAttributes<HTMLAtomicRatingRangeFacetElement>;
            /**
             * The `atomic-recs-error` component handles fatal errors when performing a recommendations request on the index or Search API. When the error is known, it displays a link to relevant documentation link for debugging purposes. When the error is unknown, it displays a small text area with the JSON content of the error.
             */
            "atomic-recs-error": LocalJSX.AtomicRecsError & JSXBase.HTMLAttributes<HTMLAtomicRecsErrorElement>;
            /**
             * The `atomic-recs-interface` component is the parent to all other atomic components in a recommendation interface. It handles the headless recommendation engine and localization configurations.
             */
            "atomic-recs-interface": LocalJSX.AtomicRecsInterface & JSXBase.HTMLAttributes<HTMLAtomicRecsInterfaceElement>;
            /**
             * The `atomic-recs-list` component displays recommendations by applying one or more result templates.
             */
            "atomic-recs-list": LocalJSX.AtomicRecsList & JSXBase.HTMLAttributes<HTMLAtomicRecsListElement>;
            /**
             * The `atomic-recs-result` component is used internally by the `atomic-recs-list` component.
             */
            "atomic-recs-result": LocalJSX.AtomicRecsResult & JSXBase.HTMLAttributes<HTMLAtomicRecsResultElement>;
            /**
             * A [result template](https://docs.coveo.com/en/atomic/latest/usage/displaying-results#defining-a-result-template) determines the format of the query results, depending on the conditions that are defined for each template.
             * A `template` element must be the child of an `atomic-recs-result-template`, and an `atomic-recs-list` must be the parent of each `atomic-recs-result-template`.
             * **Note:** Any `<script>` tags that are defined inside a `<template>` element will not be executed when the results are being rendered.
             * @MapProp name: mustMatch;attr: must-match;docs: The field and values that define which result items the condition must be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is `lithiummessage` or `YouTubePlaylist`: `must-match-filetype="lithiummessage,YouTubePlaylist"`;type: Record<string, string[]> ;default: {}
             * @MapProp name: mustNotMatch;attr: must-not-match;docs: The field and values that define which result items the condition must not be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is not `lithiummessage`: `must-not-match-filetype="lithiummessage";type: Record<string, string[]> ;default: {}
             */
            "atomic-recs-result-template": LocalJSX.AtomicRecsResultTemplate & JSXBase.HTMLAttributes<HTMLAtomicRecsResultTemplateElement>;
            /**
             * The `atomic-refine-modal` is automatically created as a child of the `atomic-search-interface` when the `atomic-refine-toggle` is initialized.
             * When the modal is opened, the class `atomic-modal-opened` is added to the interface element and the body, allowing further customization.
             */
            "atomic-refine-modal": LocalJSX.AtomicRefineModal & JSXBase.HTMLAttributes<HTMLAtomicRefineModalElement>;
            /**
             * The `atomic-refine-toggle` component displays a button that opens a modal containing the facets and the sort components.
             * When this component is added to the `atomic-search-interface`, an `atomic-refine-modal` component is automatically created.
             */
            "atomic-refine-toggle": LocalJSX.AtomicRefineToggle & JSXBase.HTMLAttributes<HTMLAtomicRefineToggleElement>;
            /**
             * The `atomic-relevance-inspector` component is used internally to offer insight on search page relevance, as well as information to help troubleshoot issues during development.
             */
            "atomic-relevance-inspector": LocalJSX.AtomicRelevanceInspector & JSXBase.HTMLAttributes<HTMLAtomicRelevanceInspectorElement>;
            /**
             * The `atomic-result` component is used internally by the `atomic-result-list` component.
             */
            "atomic-result": LocalJSX.AtomicResult & JSXBase.HTMLAttributes<HTMLAtomicResultElement>;
            /**
             * The `atomic-result-badge` element renders a badge to highlight special features of a result.
             * A badge can either display:
             * * Text:
             * ```html
             * <atomic-result-badge label="trending"></atomic-result-badge>
             * ```
             * * The contents of a single-value field:
             * ```html
             * <atomic-result-badge field="objecttype"></atomic-result-badge>
             * ```
             * * An icon:
             * ```html
             * <atomic-result-badge icon="https://my-website.fake/star.svg"></atomic-result-badge>
             * ```
             * * Slotted elements:
             * ```html
             * <atomic-result-badge icon="https://my-website.fake/stopwatch.svg">
             *     Deal ends in <my-dynamic-countdown></my-dynamic-countdown>
             * </atomic-result-badge>
             * ```
             * The contents of a multi-value field can be displayed as in the following example:
             * ```html
             * <atomic-result-badge icon="https://my-website.fake/language.svg">
             *    <atomic-result-multi-value-text field="language"></atomic-result-multi-value-text>
             * </atomic-result-badge>
             * ```
             */
            "atomic-result-badge": LocalJSX.AtomicResultBadge & JSXBase.HTMLAttributes<HTMLAtomicResultBadgeElement>;
            /**
             * The `atomic-result-children` component is responsible for displaying child results by applying one or more child result templates.
             * Includes two slots, "before-children" and "after-children", which allow for rendering content before and after the list of children,
             * only when children exist.
             */
            "atomic-result-children": LocalJSX.AtomicResultChildren & JSXBase.HTMLAttributes<HTMLAtomicResultChildrenElement>;
            /**
             * The `atomic-result-children-template` component determines the format of the child results, depending on the conditions that are defined for each template. A `template` element must be the child of an `atomic-result-children-template`, and an `atomic-result-children` must be the parent of each `atomic-result-children-template`.
             * Note: Any `<script>` tags defined inside of a `<template>` element will not be executed when results are being rendered.
             * @MapProp name: mustMatch;attr: must-match;docs: The field and values that define which result items the condition must be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is `lithiummessage` or `YouTubePlaylist`: `must-match-filetype="lithiummessage,YouTubePlaylist"`;type: Record<string, string[]> ;default: {}
             * @MapProp name: mustNotMatch;attr: must-not-match;docs: The field and values that define which result items the condition must not be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is not `lithiummessage`: `must-not-match-filetype="lithiummessage";type: Record<string, string[]> ;default: {}
             */
            "atomic-result-children-template": LocalJSX.AtomicResultChildrenTemplate & JSXBase.HTMLAttributes<HTMLAtomicResultChildrenTemplateElement>;
            /**
             * The `atomic-result-date` component renders the value of a date result field.
             */
            "atomic-result-date": LocalJSX.AtomicResultDate & JSXBase.HTMLAttributes<HTMLAtomicResultDateElement>;
            /**
             * The `atomic-result-fields-list` component selectively renders its children to ensure they fit the parent element and adds dividers between them.
             */
            "atomic-result-fields-list": LocalJSX.AtomicResultFieldsList & JSXBase.HTMLAttributes<HTMLAtomicResultFieldsListElement>;
            /**
             * The `atomic-result-html` component renders the HTML value of a string result field.
             * There is an inherent XSS security concern associated with the usage of this component.
             * Use only with fields for which you are certain the data is harmless.
             */
            "atomic-result-html": LocalJSX.AtomicResultHtml & JSXBase.HTMLAttributes<HTMLAtomicResultHtmlElement>;
            /**
             * The `atomic-result-icon` component outputs the corresponding icon for a given file type.
             * The component searches for a suitable icon, or outputs a generic icon if the search is unsuccessful.
             */
            "atomic-result-icon": LocalJSX.AtomicResultIcon & JSXBase.HTMLAttributes<HTMLAtomicResultIconElement>;
            /**
             * The `atomic-result-image` component renders an image from a result field.
             */
            "atomic-result-image": LocalJSX.AtomicResultImage & JSXBase.HTMLAttributes<HTMLAtomicResultImageElement>;
            /**
             * The `atomic-result-link` component automatically transforms a search result title into a clickable link that points to the original item.
             */
            "atomic-result-link": LocalJSX.AtomicResultLink & JSXBase.HTMLAttributes<HTMLAtomicResultLinkElement>;
            /**
             * The `atomic-result-list` component is responsible for displaying query results by applying one or more result templates.
             */
            "atomic-result-list": LocalJSX.AtomicResultList & JSXBase.HTMLAttributes<HTMLAtomicResultListElement>;
            /**
             * The `atomic-result-localized-text` component renders a target i18n localized string using the values of a target field.
             * Given this i18n configuration:
             * ```
             * searchInterface.i18n.addResourceBundle('en', 'translation', {
             *    classic_book_advert: 'Classic book from {{name}}',
             * });
             * ```
             * The component could be configured in such a way to replace `{{name}}` with the `author` field value from the result item:
             * ```
             * <atomic-result-localized-text locale-key="classic_book_advert" field-author="name"></atomic-result-localized-text>
             * ```
             * @MapProp name: field;attr: field;docs: The field from which to extract the target string and the variable used to map it to the target i18n parameter. For example, the following configuration extracts the value of `author` from a result, and assign it to the i18n parameter `name`: `field-author="name"`;type: Record<string, string> ;default: {}
             */
            "atomic-result-localized-text": LocalJSX.AtomicResultLocalizedText & JSXBase.HTMLAttributes<HTMLAtomicResultLocalizedTextElement>;
            /**
             * The `atomic-result-multi-value-text` component renders the values of a multi-value string field.
             */
            "atomic-result-multi-value-text": LocalJSX.AtomicResultMultiValueText & JSXBase.HTMLAttributes<HTMLAtomicResultMultiValueTextElement>;
            /**
             * The `atomic-result-number` component renders the value of a number result field.
             * The number can be formatted by adding a `atomic-format-number`, `atomic-format-currency` or `atomic-format-unit` component into this component.
             */
            "atomic-result-number": LocalJSX.AtomicResultNumber & JSXBase.HTMLAttributes<HTMLAtomicResultNumberElement>;
            /**
             * The `atomic-result-placeholder` component provides an intermediate visual state that is rendered before the first results are available.
             */
            "atomic-result-placeholder": LocalJSX.AtomicResultPlaceholder & JSXBase.HTMLAttributes<HTMLAtomicResultPlaceholderElement>;
            /**
             * The `atomic-result-printable-uri` component displays the URI, or path, to access a result.
             */
            "atomic-result-printable-uri": LocalJSX.AtomicResultPrintableUri & JSXBase.HTMLAttributes<HTMLAtomicResultPrintableUriElement>;
            /**
             * The `atomic-result-rating` element renders a star rating.
             */
            "atomic-result-rating": LocalJSX.AtomicResultRating & JSXBase.HTMLAttributes<HTMLAtomicResultRatingElement>;
            /**
             * This section allows the information seeker to perform an action on an item without having to view its details.
             * For example, in Commerce you can add an item to the cart directly or add it to a wish list to view at a later time.
             * Behavior:
             * * Exposes the `--line-height` CSS variable so child elements can adjust to the current line height.
             * ** You should ensure that elements inside of it have `height: var(--line-height)`.
             * * Is a wrapping flexbox with a gap.
             * * May appear over, next to, or beneath the visual section.
             */
            "atomic-result-section-actions": LocalJSX.AtomicResultSectionActions & JSXBase.HTMLAttributes<HTMLAtomicResultSectionActionsElement>;
            /**
             * This section provides badges that highlight special features of the item.
             * Behavior:
             * * Exposes the `--line-height` CSS variable so child elements can adjust to the current line height.
             * ** You should ensure that elements inside of it have `height: var(--line-height)`.
             * * Is a wrapping flexbox with a gap.
             * * May appear over, next to, or beneath the visual section.
             */
            "atomic-result-section-badges": LocalJSX.AtomicResultSectionBadges & JSXBase.HTMLAttributes<HTMLAtomicResultSectionBadgesElement>;
            /**
             * This section displays additional descriptive information about the item.
             * Behavior:
             * * Has a maximum height of two lines.
             * ** We recommend that you use `atomic-result-fields-list` to ensure that the fields in this section don’t overflow.
             * * Exposes the `--line-height` variable so child elements can adjust to the current line height.
             * * Has a defined CSS `color` property for text.
             * * Has a font weight.
             */
            "atomic-result-section-bottom-metadata": LocalJSX.AtomicResultSectionBottomMetadata & JSXBase.HTMLAttributes<HTMLAtomicResultSectionBottomMetadataElement>;
            /**
             * This section displays the folded results, available when using the <atomic-result-children> component.
             * Behavior:
             * * Shows children at the bottom of the result, indented and wrapped in a border.
             */
            "atomic-result-section-children": LocalJSX.AtomicResultSectionChildren & JSXBase.HTMLAttributes<HTMLAtomicResultSectionChildrenElement>;
            /**
             * This section displays the field that's important for its search criteria.
             * For example, in Commerce, a product's cost is often more important than the title itself.
             * Behavior:
             * * Has a very large font size.
             * * Is the second closest element beneath the title section.
             */
            "atomic-result-section-emphasized": LocalJSX.AtomicResultSectionEmphasized & JSXBase.HTMLAttributes<HTMLAtomicResultSectionEmphasizedElement>;
            /**
             * This section contains an informative summary of the item's content.
             * Behavior:
             * * Has a fixed height of one to three lines, depending on the layout and density.
             * * Ellipses overflowing text.
             * * Exposes the `--line-height` CSS variable so child elements can adjust to the current line height.
             * * Has a defined CSS `color` property for text.
             */
            "atomic-result-section-excerpt": LocalJSX.AtomicResultSectionExcerpt & JSXBase.HTMLAttributes<HTMLAtomicResultSectionExcerptElement>;
            /**
             * This section identifies the item by its name, and its main use is to make the result list scannable.
             * This is usually the page title.
             * Behavior:
             * * Has a fixed height of two lines on grid layouts.
             * * Exposes the `--line-height` CSS variable so child elements can adjust to the current line height.
             * * Has a defined CSS `color` property for text.
             */
            "atomic-result-section-title": LocalJSX.AtomicResultSectionTitle & JSXBase.HTMLAttributes<HTMLAtomicResultSectionTitleElement>;
            /**
             * This section surfaces some fields that are directly related to the title of the item.
             * For example, in Commerce, this could be the item's rating, which is tied to the nature of the product itself,
             * rather than to the product's description.
             * Behavior:
             * * Has a very small font size.
             * * Is the closest element beneath the title section.
             */
            "atomic-result-section-title-metadata": LocalJSX.AtomicResultSectionTitleMetadata & JSXBase.HTMLAttributes<HTMLAtomicResultSectionTitleMetadataElement>;
            /**
             * This section provides visual information about the item.
             * For example, in Commerce, an image is a great shorthand for a product category.
             * An icon can quickly show the item type, or an avatar can help identify to whom it is related.
             * Behavior:
             * * Has a fixed size that depends on the specified image size, the layout, the density, and the screen size.
             * ** When the image size is set to `icon`, this section stays very small.
             * ** You should ensure that elements inside of it take the available space.
             * * Always has a 1:1 aspect ratio.
             */
            "atomic-result-section-visual": LocalJSX.AtomicResultSectionVisual & JSXBase.HTMLAttributes<HTMLAtomicResultSectionVisualElement>;
            /**
             * The `atomic-result-table-placeholder` component provides an intermediate visual state that is rendered before the first results are available.
             */
            "atomic-result-table-placeholder": LocalJSX.AtomicResultTablePlaceholder & JSXBase.HTMLAttributes<HTMLAtomicResultTablePlaceholderElement>;
            /**
             * A [result template](https://docs.coveo.com/en/atomic/latest/usage/displaying-results#defining-a-result-template) determines the format of the query results, depending on the conditions that are defined for each template.
             * A `template` element must be the child of an `atomic-result-template`, and either an `atomic-result-list` or `atomic-folded-result-list` must be the parent of each `atomic-result-template`.
             * **Note:** Any `<script>` tags that are defined inside a `<template>` element will not be executed when the results are being rendered.
             * @MapProp name: mustMatch;attr: must-match;docs: The field and values that define which result items the condition must be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is `lithiummessage` or `YouTubePlaylist`: `must-match-filetype="lithiummessage,YouTubePlaylist"`;type: Record<string, string[]> ;default: {}
             * @MapProp name: mustNotMatch;attr: must-not-match;docs: The field and values that define which result items the condition must not be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is not `lithiummessage`: `must-not-match-filetype="lithiummessage";type: Record<string, string[]> ;default: {}
             */
            "atomic-result-template": LocalJSX.AtomicResultTemplate & JSXBase.HTMLAttributes<HTMLAtomicResultTemplateElement>;
            /**
             * The `atomic-result-text` component renders the value of a string result field.
             */
            "atomic-result-text": LocalJSX.AtomicResultText & JSXBase.HTMLAttributes<HTMLAtomicResultTextElement>;
            /**
             * The `atomic-result-timespan` component renders a target result number field value as a duration.
             */
            "atomic-result-timespan": LocalJSX.AtomicResultTimespan & JSXBase.HTMLAttributes<HTMLAtomicResultTimespanElement>;
            /**
             * The `atomic-results-per-page` component determines how many results to display per page.
             */
            "atomic-results-per-page": LocalJSX.AtomicResultsPerPage & JSXBase.HTMLAttributes<HTMLAtomicResultsPerPageElement>;
            /**
             * The `atomic-search-box` component creates a search box with built-in support for suggestions.
             */
            "atomic-search-box": LocalJSX.AtomicSearchBox & JSXBase.HTMLAttributes<HTMLAtomicSearchBoxElement>;
            /**
             * The `atomic-search-box-instant-results` component can be added as a child of an `atomic-search-box` component, allowing for the configuration of instant results behavior.
             * This component does not support accessibility out-of-the-box. To do so, see [Instant Results Accessibility](https://docs.coveo.com/en/atomic/latest/usage/accessibility/#instant-results-accessibility).
             * This component is not supported on mobile.
             */
            "atomic-search-box-instant-results": LocalJSX.AtomicSearchBoxInstantResults & JSXBase.HTMLAttributes<HTMLAtomicSearchBoxInstantResultsElement>;
            /**
             * The `atomic-search-box-query-suggestions` component can be added as a child of an `atomic-search-box` component, allowing for the configuration of query suggestion behavior.
             */
            "atomic-search-box-query-suggestions": LocalJSX.AtomicSearchBoxQuerySuggestions & JSXBase.HTMLAttributes<HTMLAtomicSearchBoxQuerySuggestionsElement>;
            /**
             * The `atomic-search-box-recent-queries` component can be added as a child of an `atomic-search-box` component, allowing for the configuration of recent query suggestions.
             */
            "atomic-search-box-recent-queries": LocalJSX.AtomicSearchBoxRecentQueries & JSXBase.HTMLAttributes<HTMLAtomicSearchBoxRecentQueriesElement>;
            /**
             * The `atomic-search-interface` component is the parent to all other atomic components in a search page. It handles the headless search engine and localization configurations.
             */
            "atomic-search-interface": LocalJSX.AtomicSearchInterface & JSXBase.HTMLAttributes<HTMLAtomicSearchInterfaceElement>;
            /**
             * The `atomic-search-layout` helps organize elements in the page.
             */
            "atomic-search-layout": LocalJSX.AtomicSearchLayout & JSXBase.HTMLAttributes<HTMLAtomicSearchLayoutElement>;
            /**
             * The `atomic-segmented-facet` displays a horizontal facet of the results for the current query.
             */
            "atomic-segmented-facet": LocalJSX.AtomicSegmentedFacet & JSXBase.HTMLAttributes<HTMLAtomicSegmentedFacetElement>;
            /**
             * The 'atomic-segmented-facet-scrollable' component wraps around one or several 'atomic-segmented-facet' to provide horizontal scrolling capabilities.
             */
            "atomic-segmented-facet-scrollable": LocalJSX.AtomicSegmentedFacetScrollable & JSXBase.HTMLAttributes<HTMLAtomicSegmentedFacetScrollableElement>;
            /**
             * The `atomic-smart-snippet` component displays the excerpt of a document that would be most likely to answer a particular query.
             * You can style the snippet by inserting a template element as follows:
             * ```html
             * <atomic-smart-snippet>
             *   <template>
             *     <style>
             *       b {
             *         color: blue;
             *       }
             *     </style>
             *   </template>
             * </atomic-smart-snippet>
             * ```
             */
            "atomic-smart-snippet": LocalJSX.AtomicSmartSnippet & JSXBase.HTMLAttributes<HTMLAtomicSmartSnippetElement>;
            "atomic-smart-snippet-answer": LocalJSX.AtomicSmartSnippetAnswer & JSXBase.HTMLAttributes<HTMLAtomicSmartSnippetAnswerElement>;
            "atomic-smart-snippet-collapse-wrapper": LocalJSX.AtomicSmartSnippetCollapseWrapper & JSXBase.HTMLAttributes<HTMLAtomicSmartSnippetCollapseWrapperElement>;
            "atomic-smart-snippet-expandable-answer": LocalJSX.AtomicSmartSnippetExpandableAnswer & JSXBase.HTMLAttributes<HTMLAtomicSmartSnippetExpandableAnswerElement>;
            /**
             * The `atomic-smart-snippet-feedback-modal` is automatically created as a child of the `atomic-search-interface` when the `atomic-smart-snippet` is initialized.
             * When the modal is opened, the class `atomic-modal-opened` is added to the body, allowing further customization.
             */
            "atomic-smart-snippet-feedback-modal": LocalJSX.AtomicSmartSnippetFeedbackModal & JSXBase.HTMLAttributes<HTMLAtomicSmartSnippetFeedbackModalElement>;
            "atomic-smart-snippet-source": LocalJSX.AtomicSmartSnippetSource & JSXBase.HTMLAttributes<HTMLAtomicSmartSnippetSourceElement>;
            /**
             * The `atomic-smart-snippet-suggestions-suggestions` component displays an accordion of questions related to the query with their corresponding answers.
             * You can style the snippets by inserting a template element like this:
             * ```html
             * <atomic-smart-snippet-suggestions>
             *   <template>
             *     <style>
             *       b {
             *         color: blue;
             *       }
             *     </style>
             *   </template>
             * </atomic-smart-snippet-suggestions>
             * ```
             */
            "atomic-smart-snippet-suggestions": LocalJSX.AtomicSmartSnippetSuggestions & JSXBase.HTMLAttributes<HTMLAtomicSmartSnippetSuggestionsElement>;
            /**
             * The `atomic-sort-dropdown` component renders a dropdown that the end user can interact with to select the criteria to use when sorting query results.
             */
            "atomic-sort-dropdown": LocalJSX.AtomicSortDropdown & JSXBase.HTMLAttributes<HTMLAtomicSortDropdownElement>;
            /**
             * The `atomic-sort-expression` component defines a sort expression. This component must be inside an `atomic-sort-dropdown` component.
             */
            "atomic-sort-expression": LocalJSX.AtomicSortExpression & JSXBase.HTMLAttributes<HTMLAtomicSortExpressionElement>;
            /**
             * The `atomic-table-element` element defines a table column in a result list.
             */
            "atomic-table-element": LocalJSX.AtomicTableElement & JSXBase.HTMLAttributes<HTMLAtomicTableElementElement>;
            /**
             * The `atomic-text` component leverages the I18n translation module through the atomic-search-interface.
             */
            "atomic-text": LocalJSX.AtomicText & JSXBase.HTMLAttributes<HTMLAtomicTextElement>;
            /**
             * The `atomic-timeframe` component defines a timeframe of an `atomic-timeframe-facet`, and therefore must be defined within an `atomic-timeframe-facet` component.
             * A timeframe is a span of time from now to a specific time in the past.
             */
            "atomic-timeframe": LocalJSX.AtomicTimeframe & JSXBase.HTMLAttributes<HTMLAtomicTimeframeElement>;
            /**
             * A facet is a list of values for a certain field occurring in the results.
             * An `atomic-timeframe-facet` displays a facet of the results for the current query as date intervals.
             */
            "atomic-timeframe-facet": LocalJSX.AtomicTimeframeFacet & JSXBase.HTMLAttributes<HTMLAtomicTimeframeFacetElement>;
            "tab-bar": LocalJSX.TabBar & JSXBase.HTMLAttributes<HTMLTabBarElement>;
            "tab-popover": LocalJSX.TabPopover & JSXBase.HTMLAttributes<HTMLTabPopoverElement>;
        }
    }
}
