/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { CategoryFacetSortCriterion, DateFilter, DateFilterState, FacetSortCriterion, LogLevel, NumericFilter, NumericFilterState, RangeFacetRangeAlgorithm, RangeFacetSortCriterion, RelativeDateUnit, Result, ResultTemplate, ResultTemplateCondition, SearchEngine } from "@coveo/headless";
import { Bindings } from "./utils/initialization-utils";
import { NumberInputType } from "./components/facets/facet-number-input/number-input-type";
import { ModalStatus } from "./components/atomic-refine-modal/atomic-refine-modal";
import { ResultDisplayDensity, ResultDisplayImageSize, ResultDisplayLayout } from "./components/atomic-result/atomic-result-display-options";
import { TemplateContent } from "./components/atomic-result-template/atomic-result-template";
import { i18n } from "i18next";
import { InitializationOptions } from "./components/atomic-search-interface/atomic-search-interface";
import { StandaloneSearchBoxData } from "./utils/local-storage-utils";
export namespace Components {
    interface AtomicAriaLive {
    }
    interface AtomicBreadbox {
    }
    interface AtomicCategoryFacet {
        /**
          * The base path shared by all values for the facet, separated by commas.
         */
        "basePath"?: string;
        /**
          * The character that separates values of a multi-value field.
         */
        "delimitingCharacter": string;
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Whether to use basePath as a filter for the results.
         */
        "filterByBasePath": boolean;
        /**
          * Whether to exclude the parents of folded results when estimating the result count for each facet value.
         */
        "filterFacetCount": boolean;
        /**
          * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values. Note: A high injectionDepth may negatively impact the facet request performance. Minimum: `0`
         */
        "injectionDepth": number;
        /**
          * Specifies if the facet is collapsed.
         */
        "isCollapsed": boolean;
        /**
          * The non-localized label for the facet.
         */
        "label": string;
        /**
          * The number of values to request for this facet. Also determines the number of additional values to request each time more values are shown.
         */
        "numberOfValues": number;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are 'alphanumeric' and 'occurrences'.
         */
        "sortCriteria": CategoryFacetSortCriterion;
        /**
          * Whether this facet should contain a search box. When "true", the search is only enabled when more facet values are available.
         */
        "withSearch": boolean;
    }
    interface AtomicColorFacet {
        /**
          * Whether to display the facet values as checkboxes (multiple selection) or boxes (multiple selection). Possible values are 'checkbox', and 'box'.
         */
        "displayValuesAs": 'checkbox' | 'box';
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Whether to exclude the parents of folded results when estimating the result count for each facet value.
         */
        "filterFacetCount": boolean;
        /**
          * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values. Note: A high injectionDepth may negatively impact the facet request performance. Minimum: `0`
         */
        "injectionDepth": number;
        /**
          * Specifies if the facet is collapsed.
         */
        "isCollapsed": boolean;
        /**
          * The non-localized label for the facet.
         */
        "label": string;
        /**
          * The number of values to request for this facet. Also determines the number of additional values to request each time more values are shown.
         */
        "numberOfValues": number;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are 'score', 'alphanumeric', 'occurrences', and 'automatic'.
         */
        "sortCriteria": FacetSortCriterion;
        /**
          * Whether this facet should contain a search box. When "true", the search is only enabled when more facet values are available.
         */
        "withSearch": boolean;
    }
    interface AtomicComponentError {
        "element": HTMLElement;
        "error": Error;
    }
    interface AtomicDidYouMean {
    }
    interface AtomicExternal {
        /**
          * The CSS selector that identifies the `atomic-search-interface` component with which to initialize the external components.
         */
        "selector": string;
    }
    interface AtomicFacet {
        /**
          * Whether to display the facet values as checkboxes (multiple selection), links (single selection) or boxes (multiple selection). Possible values are 'checkbox', 'link', and 'box'.
         */
        "displayValuesAs": 'checkbox' | 'link' | 'box';
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Whether to exclude the parents of folded results when estimating the result count for each facet value.
         */
        "filterFacetCount": boolean;
        /**
          * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values. Note: A high injectionDepth may negatively impact the facet request performance. Minimum: `0`
         */
        "injectionDepth": number;
        /**
          * Specifies if the facet is collapsed.
         */
        "isCollapsed": boolean;
        /**
          * The non-localized label for the facet.
         */
        "label": string;
        /**
          * The number of values to request for this facet. Also determines the number of additional values to request each time more values are shown.
         */
        "numberOfValues": number;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are 'score', 'alphanumeric', 'occurrences', and 'automatic'.
         */
        "sortCriteria": FacetSortCriterion;
        /**
          * Whether this facet should contain a search box. When "true", the search is only enabled when more facet values are available.
         */
        "withSearch": boolean;
    }
    interface AtomicFacetDateInput {
        "bindings": Bindings;
        "filter": DateFilter;
        "filterState": DateFilterState;
        "label": string;
    }
    interface AtomicFacetManager {
        /**
          * The number of expanded facets inside the manager. Remaining facets are automatically collapsed.  Using the value `0` collapses all facets. Using the value `-1` disables the feature and keeps all facets expanded. Useful when you want to set the collapse state for each facet individually.
         */
        "collapseFacetsAfter": number;
    }
    interface AtomicFacetNumberInput {
        "bindings": Bindings;
        "filter": NumericFilter;
        "filterState": NumericFilterState;
        "label": string;
        "type": NumberInputType;
    }
    interface AtomicFieldCondition {
        /**
          * A list of conditions that must be fulfilled for this template to be selected.
         */
        "conditions": ResultTemplateCondition[];
        /**
          * Verifies wheter the specified fields are defined.
         */
        "ifDefined"?: string;
        /**
          * Verifies whether the specified fields are not defined.
         */
        "ifNotDefined"?: string;
    }
    interface AtomicFocusTrap {
        "active": boolean;
    }
    interface AtomicFormatCurrency {
        /**
          * The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as "USD" for the US dollar, "EUR" for the euro, or "CNY" for the Chinese RMB. See the current [currency & funds code list](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency).
         */
        "currency": string;
    }
    interface AtomicFormatNumber {
        /**
          * The maximum number of fraction digits to use.
         */
        "maximumFractionDigits"?: number;
        /**
          * The maximum number of significant digits to use.
         */
        "maximumSignificantDigits"?: number;
        /**
          * The minimum number of fraction digits to use.
         */
        "minimumFractionDigits"?: number;
        /**
          * The minimum number of integer digits to use.
         */
        "minimumIntegerDigits"?: number;
        /**
          * The minimum number of significant digits to use.
         */
        "minimumSignificantDigits"?: number;
    }
    interface AtomicFormatUnit {
        /**
          * The unit to use in unit formatting. Leverages the [Intl.NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat) constructor. The unit must be [sanctioned unit identifier](https://tc39.es/proposal-unified-intl-numberformat/section6/locales-currencies-tz_proposed_out.html#sec-issanctionedsimpleunitidentifier)
         */
        "unit": string;
        /**
          * The unit formatting style to use in unit formatting.  * "long" (e.g., 16 litres) * "short" (e.g., 16 l) * "narrow" (e.g., 16l)
         */
        "unitDisplay"?: 'long' | 'short' | 'narrow';
    }
    interface AtomicFrequentlyBoughtTogether {
    }
    interface AtomicIcon {
        /**
          * The SVG icon to display.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly.
         */
        "icon": string;
    }
    interface AtomicLoadMoreResults {
    }
    interface AtomicNoResults {
        /**
          * Whether to display a button which cancels the last available action.
         */
        "enableCancelLastAction": boolean;
    }
    interface AtomicNumericFacet {
        /**
          * Whether to display the facet values as checkboxes (multiple selection) or links (single selection). Possible values are 'checkbox' and 'link'.
         */
        "displayValuesAs": 'checkbox' | 'link';
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Whether to exclude the parents of folded results when estimating the result count for each facet value.
         */
        "filterFacetCount": boolean;
        /**
          * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values. Note: A high injectionDepth may negatively impact the facet request performance. Minimum: `0`
         */
        "injectionDepth": number;
        /**
          * Specifies if the facet is collapsed.
         */
        "isCollapsed": boolean;
        /**
          * The non-localized label for the facet.
         */
        "label": string;
        /**
          * The number of values to request for this facet, when there are no manual ranges. If the number of values is 0, no ranges will be displayed.
         */
        "numberOfValues": number;
        /**
          * The algorithm that's used for generating the ranges of this facet when they aren't manually defined. The default value of `"equiprobable"` generates facet ranges which vary in size but have a more balanced number of results within each range. The value of `"even"` generates equally sized facet ranges across all of the results.
         */
        "rangeAlgorithm": RangeFacetRangeAlgorithm;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are 'ascending' and 'descending'.
         */
        "sortCriteria": RangeFacetSortCriterion;
        /**
          * Whether this facet should contain an input allowing users to set custom ranges. Depending on the field, the input can allow either decimal or integer values.
         */
        "withInput"?: NumberInputType;
    }
    interface AtomicNumericRange {
        /**
          * The ending value for the numeric range.
         */
        "end": number;
        /**
          * Specifies whether the end value should be included in the range.
         */
        "endInclusive": boolean;
        /**
          * The non-localized label for the facet. When defined, it will appear instead of the formatted value.
         */
        "label"?: string;
        /**
          * The starting value for the numeric range.
         */
        "start": number;
    }
    interface AtomicPager {
        /**
          * Specifies how many page buttons to display in the pager.
         */
        "numberOfPages": number;
    }
    interface AtomicQueryError {
    }
    interface AtomicQuerySummary {
        /**
          * Whether to display the duration of the last query execution.
          * @deprecated Use the `duration` part.
         */
        "enableDuration": boolean;
    }
    interface AtomicRatingFacet {
        /**
          * Whether to display the facet values as checkboxes (multiple selection) or links (single selection). Possible values are 'checkbox' and 'link'.
         */
        "displayValuesAs": 'checkbox' | 'link';
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Whether to exclude the parents of folded results when estimating the result count for each facet value.
         */
        "filterFacetCount": boolean;
        /**
          * The SVG icon to use to display the rating.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly.  When using a custom icon, at least part of your icon should have the color set to `fill="currentColor"`. This part of the SVG will take on the colors set in the following [variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties):  - `--atomic-rating-facet-icon-active-color` - `--atomic-rating-facet-icon-inactive-color`
         */
        "icon": string;
        /**
          * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values. Note: A high injectionDepth may negatively impact the facet request performance. Minimum: `0`
         */
        "injectionDepth": number;
        /**
          * Specifies if the facet is collapsed.
         */
        "isCollapsed": boolean;
        /**
          * The non-localized label for the facet.
         */
        "label": string;
        /**
          * The maximum value in the field's index and the number of rating icons to display in the facet. If not assigned a value, this property will default to the same value as `numberOfIntervals`.
         */
        "maxValueInIndex": number;
        /**
          * The minimum value of the field.
         */
        "minValueInIndex": number;
        /**
          * The number of options to display in the facet. If `maxValueInIndex` isn't specified, it will be assumed that this is also the maximum number of rating icons.
         */
        "numberOfIntervals": number;
    }
    interface AtomicRatingRangeFacet {
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Whether to exclude the parents of folded results when estimating the result count for each facet value.
         */
        "filterFacetCount": boolean;
        /**
          * The SVG icon to use to display the rating.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly.  When using a custom icon, at least part of your icon should have the color set to `fill="currentColor"`. This part of the SVG will take on the colors set in the following [variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties):  - `--atomic-rating-facet-icon-active-color` - `--atomic-rating-facet-icon-inactive-color`
         */
        "icon": string;
        /**
          * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values. Note: A high injectionDepth may negatively impact the facet request performance. Minimum: `0`
         */
        "injectionDepth": number;
        /**
          * Specifies if the facet is collapsed.
         */
        "isCollapsed": boolean;
        /**
          * The non-localized label for the facet.
         */
        "label": string;
        /**
          * The maximum value in the field's index and the number of rating icons to display in the facet. This property will default to the same value as `numberOfIntervals`, if not assigned a value.
         */
        "maxValueInIndex": number;
        /**
          * The minimum value of the field.
         */
        "minValueInIndex": number;
        /**
          * The number of options to display in the facet. If `maxValueInIndex` isn't specified, it will be assumed that this is also the maximum number of rating icons.
         */
        "numberOfIntervals": number;
    }
    interface AtomicRefineModal {
        "modalStatus": ModalStatus;
        "openButton"?: HTMLElement;
    }
    interface AtomicRefineToggle {
    }
    interface AtomicRelevanceInspector {
        /**
          * The Atomic interface bindings, namely the headless search engine and i18n instances.
         */
        "bindings": Bindings;
    }
    interface AtomicResult {
        /**
          * The result content to display.
         */
        "content": ParentNode;
        /**
          * How large or small results should be.
         */
        "density": ResultDisplayDensity;
        /**
          * How results should be displayed.
         */
        "display": ResultDisplayLayout;
        /**
          * The headless search engine.
         */
        "engine": SearchEngine;
        /**
          * @deprecated use `imageSize` instead.
         */
        "image": ResultDisplayImageSize;
        /**
          * How large or small the visual section of results should be.  This may be overwritten if an image size is defined in the result content.
         */
        "imageSize"?: ResultDisplayImageSize;
        /**
          * The result item.
         */
        "result": Result;
    }
    interface AtomicResultBadge {
        /**
          * The field to display in the badge.  Not compatible with `label` nor slotted elements.
         */
        "field"?: string;
        /**
          * Specifies an icon to display at the left-end of the badge. This can be used in conjunction with `field`, `label` or slotted elements.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly
         */
        "icon"?: string;
        /**
          * The text to display in the badge.  Not compatible with `field` nor slotted elements.
         */
        "label"?: string;
    }
    interface AtomicResultDate {
        /**
          * The result field which the component should use. This will look for the field in the Result object first, and then in the Result.raw object. It is important to include the necessary field in the ResultList component.
         */
        "field": string;
        /**
          * Available formats: https://day.js.org/docs/en/display/format
         */
        "format": string;
    }
    interface AtomicResultFieldsList {
    }
    interface AtomicResultIcon {
    }
    interface AtomicResultImage {
        /**
          * The result field which the component should use. This will look for the field in the Result object first, then in the Result.raw object. It is important to include the necessary field in the ResultList component.
         */
        "field": string;
    }
    interface AtomicResultLink {
        /**
          * Where to open the linked URL, as the name for a browsing context (a tab, window, or iframe).  The following keywords have special meanings:  * _self: the current browsing context. (Default) * _blank: usually a new tab, but users can configure their browsers to open a new window instead. * _parent: the parent of the current browsing context. If there's no parent, this behaves as `_self`. * _top: the topmost browsing context (the "highest" context that’s an ancestor of the current one). If there are no ancestors, this behaves as `_self`.
         */
        "target": string;
    }
    interface AtomicResultList {
        /**
          * The spacing of various elements in the result list, including the gap between results, the gap between parts of a result, and the font sizes of different parts in a result.
         */
        "density": ResultDisplayDensity;
        /**
          * The desired layout to use when displaying results. Layouts affect how many results to display per row and how visually distinct they are from each other.
         */
        "display": ResultDisplayLayout;
        /**
          * A list of non-default fields to include in the query results, separated by commas. The default fields sent in a request are: 'date', 'author', 'source', 'language', 'filetype', 'parents', ‘urihash’, ‘objecttype’, ‘collection’, ‘permanentid’ 'ec_price', 'ec_name', 'ec_description', 'ec_brand', 'ec_category', 'ec_item_group_id', 'ec_shortdesc', 'ec_thumbnails', 'ec_images', 'ec_promo_price', 'ec_in_stock', 'ec_cogs', and 'ec_rating'.
         */
        "fieldsToInclude": string;
        /**
          * @deprecated use `imageSize` instead.
         */
        "image": ResultDisplayImageSize;
        /**
          * The expected size of the image displayed in the results.
         */
        "imageSize"?: ResultDisplayImageSize;
        /**
          * Sets a rendering function to bypass the standard HTML template mechanism for rendering results. You can use this function while working with web frameworks that don't use plain HTML syntax, e.g., React, Angular or Vue.  Do not use this method if you integrate Atomic in a plain HTML deployment.
          * @param render
         */
        "setRenderFunction": (render: (result: Result) => HTMLElement) => Promise<void>;
    }
    interface AtomicResultMultiValueText {
        /**
          * The delimiter used to separate values when the field isn't indexed as a multi value field.
         */
        "delimiter": string | null;
        /**
          * The field that the component should use. The component will try to find this field in the `Result.raw` object unless it finds it in the `Result` object first. Make sure this field is present in the `fieldsToInclude` property of the `atomic-result-list` component.
         */
        "field": string;
        /**
          * The maximum number of field values to display. If there are _n_ more values than the specified maximum, the last displayed value will be "_n_ more...".
         */
        "maxValuesToDisplay": number;
    }
    interface AtomicResultNumber {
        /**
          * The field that the component should use. The component will try to find this field in the `Result.raw` object unless it finds it in the `Result` object first. Make sure this field is present in the `fieldsToInclude` property of the `atomic-result-list` component.
         */
        "field": string;
    }
    interface AtomicResultPlaceholder {
        "density": ResultDisplayDensity;
        "display": ResultDisplayLayout;
        "imageSize": ResultDisplayImageSize;
    }
    interface AtomicResultPrintableUri {
        /**
          * The maximum number of Uri parts to display. This has to be over the minimum of `3` in order to be effective. Putting `Infinity` will disable the ellipsis.
         */
        "maxNumberOfParts": number;
        /**
          * Where to open the linked URL, as the name for a browsing context (a tab, window, or iframe).  The following keywords have special meanings:  * _self: the current browsing context. (Default) * _blank: usually a new tab, but users can configure their browsers to open a new window instead. * _parent: the parent of the current browsing context. If there's no parent, this behaves as `_self`. * _top: the topmost browsing context (the "highest" context that’s an ancestor of the current one). If there are no ancestors, this behaves as `_self`.
         */
        "target": string;
    }
    interface AtomicResultRating {
        /**
          * The field whose values you want to display as a rating.
         */
        "field": string;
        /**
          * The SVG icon to use to display the rating.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly.  When using a custom icon, at least part of your icon should have the color set to `fill="currentColor"`. This part of the SVG will take on the colors set in the following [variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties):  - `--atomic-rating-facet-icon-active-color` - `--atomic-rating-facet-icon-inactive-color`
         */
        "icon": string;
        /**
          * The maximum value of the field. This value is also used as the number of icons to be displayed.
         */
        "maxValueInIndex": number;
    }
    interface AtomicResultSectionActions {
    }
    interface AtomicResultSectionBadges {
    }
    interface AtomicResultSectionBottomMetadata {
    }
    interface AtomicResultSectionEmphasized {
    }
    interface AtomicResultSectionExcerpt {
    }
    interface AtomicResultSectionTitle {
    }
    interface AtomicResultSectionTitleMetadata {
    }
    interface AtomicResultSectionVisual {
        /**
          * How large or small the visual section of results using this template should be.
         */
        "imageSize"?: ResultDisplayImageSize;
    }
    interface AtomicResultTablePlaceholder {
        "density": ResultDisplayDensity;
        "imageSize": ResultDisplayImageSize;
        "rows": number;
    }
    interface AtomicResultTemplate {
        /**
          * A function that must return true on results for the result template to apply.  For example, a template with the following condition only applies to results whose `title` contains `singapore`: `[(result) => /singapore/i.test(result.title)]`
         */
        "conditions": ResultTemplateCondition[];
        /**
          * Gets the appropriate result template based on conditions applied.
         */
        "getTemplate": () => Promise<ResultTemplate<TemplateContent> | null>;
    }
    interface AtomicResultText {
        /**
          * The locale key for the text to display when the configured field has no value.
         */
        "default"?: string;
        /**
          * The result field which the component should use. This will look in the Result object first, and then in the Result.raw object for the fields. It is important to include the necessary field in the ResultList component.
         */
        "field": string;
        /**
          * If this is set to true, it will look for the corresponding highlight property and use it if available.
         */
        "shouldHighlight": boolean;
    }
    interface AtomicResultsPerPage {
        /**
          * A list of choices for the number of results to display per page, separated by commas.
         */
        "choicesDisplayed": string;
        /**
          * The initial selection for the number of result per page. This should be part of the `choicesDisplayed` option. By default, this is set to the first value in `choicesDisplayed`.
         */
        "initialChoice"?: number;
    }
    interface AtomicSearchBox {
        /**
          * The amount of queries displayed when the user interacts with the search box. By default, a mix of query suggestions and recent queries will be shown. You can configure those settings using the following components as children:  - atomic-search-box-query-suggestions  - atomic-search-box-recent-queries
         */
        "numberOfQueries": number;
        /**
          * Defining this option makes the search box standalone.  This option defines the default URL the user should be redirected to, when a query is submitted. If a query pipeline redirect is triggered, it will redirect to that URL instead (see [query pipeline triggers](https://docs.coveo.com/en/1458)).
         */
        "redirectionUrl"?: string;
    }
    interface AtomicSearchBoxQuerySuggestions {
        /**
          * The maximum number of suggestions that will be displayed if the user has typed something into the input field.
         */
        "maxWithQuery"?: number;
        /**
          * The maximum number of suggestions that will be displayed initially when the input field is empty.
         */
        "maxWithoutQuery"?: number;
    }
    interface AtomicSearchBoxRecentQueries {
        /**
          * The maximum number of suggestions that will be displayed if the user has typed something into the input field.
         */
        "maxWithQuery": number;
        /**
          * The maximum number of suggestions that will be displayed initially when the input field is empty.
         */
        "maxWithoutQuery"?: number;
    }
    interface AtomicSearchInterface {
        /**
          * Whether analytics should be enabled.
         */
        "analytics": boolean;
        /**
          * The search interface headless engine.
         */
        "engine"?: SearchEngine;
        /**
          * Executes the first search and logs the interface load event to analytics, after initializing connection to the headless search engine.
         */
        "executeFirstSearch": () => Promise<void>;
        /**
          * The search interface i18next instance.
         */
        "i18n": i18n;
        /**
          * Initializes the connection with the headless search engine using options for `accessToken` (required), `organizationId` (required), `renewAccessToken`, and `platformUrl`.
         */
        "initialize": (options: InitializationOptions) => Promise<void>;
        /**
          * The search interface language.
         */
        "language": string;
        /**
          * The severity level of the messages to log in the console.
         */
        "logLevel"?: LogLevel;
        /**
          * The search interface [query pipeline](https://docs.coveo.com/en/180/).
         */
        "pipeline"?: string;
        /**
          * Whether the state should be reflected in the URL parameters.
         */
        "reflectStateInUrl": boolean;
        /**
          * The CSS selector for the container where the interface will scroll back to.
         */
        "scrollContainer": string;
        /**
          * The search interface [search hub](https://docs.coveo.com/en/1342/).
         */
        "searchHub": string;
        /**
          * The [tz database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) identifier of the time zone to use to correctly interpret dates in the query expression, facets, and result items. By default, the timezone will be [guessed](https://day.js.org/docs/en/timezone/guessing-user-timezone).
          * @example America/Montreal
         */
        "timezone"?: string;
    }
    interface AtomicSortDropdown {
    }
    interface AtomicSortExpression {
        /**
          * One or more sort criteria that the end user can select or toggle between.  The available sort criteria are:  * `relevancy` * `date ascending`/`date descending` * `qre` * `<FIELD> ascending`/`<FIELD> descending`, where you replace `<FIELD>` with the name of a sortable field in your index (e.g., `criteria="size ascending"`).  You can specify multiple sort criteria to be used in the same request by separating them with a comma (e.g., `criteria="size ascending, date ascending"`).
         */
        "expression": string;
        /**
          * The non-localized label to display for this expression.
         */
        "label": string;
    }
    interface AtomicTableElement {
        /**
          * The label to display in the header of this column.
         */
        "label": string;
    }
    interface AtomicText {
        /**
          * The count value used for plurals.
         */
        "count"?: number;
        /**
          * The string key value.
         */
        "value": string;
    }
    interface AtomicTimeframe {
        /**
          * The amount of units from which to count.  E.g., 10 days, 1 year, etc.
         */
        "amount": number;
        /**
          * The non-localized label for the timeframe. When defined, it will appear instead of the formatted value.
         */
        "label"?: string;
        /**
          * The relative period of time to now.
         */
        "period": 'past' | 'next';
        /**
          * The unit used to define: - the start date of the timeframe, if the period is `past` - the end date of the timeframe, if the period is `future`
         */
        "unit": RelativeDateUnit;
    }
    interface AtomicTimeframeFacet {
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Whether to exclude the parents of folded results when estimating the result count for each facet value.
         */
        "filterFacetCount": boolean;
        /**
          * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values. Note: A high injectionDepth may negatively impact the facet request performance. Minimum: `0`
         */
        "injectionDepth": number;
        /**
          * Specifies if the facet is collapsed.
         */
        "isCollapsed": boolean;
        /**
          * The non-localized label for the facet.
         */
        "label": string;
        /**
          * Whether this facet should contain an datepicker allowing users to set custom ranges.
         */
        "withDatePicker": boolean;
    }
}
declare global {
    interface HTMLAtomicAriaLiveElement extends Components.AtomicAriaLive, HTMLStencilElement {
    }
    var HTMLAtomicAriaLiveElement: {
        prototype: HTMLAtomicAriaLiveElement;
        new (): HTMLAtomicAriaLiveElement;
    };
    interface HTMLAtomicBreadboxElement extends Components.AtomicBreadbox, HTMLStencilElement {
    }
    var HTMLAtomicBreadboxElement: {
        prototype: HTMLAtomicBreadboxElement;
        new (): HTMLAtomicBreadboxElement;
    };
    interface HTMLAtomicCategoryFacetElement extends Components.AtomicCategoryFacet, HTMLStencilElement {
    }
    var HTMLAtomicCategoryFacetElement: {
        prototype: HTMLAtomicCategoryFacetElement;
        new (): HTMLAtomicCategoryFacetElement;
    };
    interface HTMLAtomicColorFacetElement extends Components.AtomicColorFacet, HTMLStencilElement {
    }
    var HTMLAtomicColorFacetElement: {
        prototype: HTMLAtomicColorFacetElement;
        new (): HTMLAtomicColorFacetElement;
    };
    interface HTMLAtomicComponentErrorElement extends Components.AtomicComponentError, HTMLStencilElement {
    }
    var HTMLAtomicComponentErrorElement: {
        prototype: HTMLAtomicComponentErrorElement;
        new (): HTMLAtomicComponentErrorElement;
    };
    interface HTMLAtomicDidYouMeanElement extends Components.AtomicDidYouMean, HTMLStencilElement {
    }
    var HTMLAtomicDidYouMeanElement: {
        prototype: HTMLAtomicDidYouMeanElement;
        new (): HTMLAtomicDidYouMeanElement;
    };
    interface HTMLAtomicExternalElement extends Components.AtomicExternal, HTMLStencilElement {
    }
    var HTMLAtomicExternalElement: {
        prototype: HTMLAtomicExternalElement;
        new (): HTMLAtomicExternalElement;
    };
    interface HTMLAtomicFacetElement extends Components.AtomicFacet, HTMLStencilElement {
    }
    var HTMLAtomicFacetElement: {
        prototype: HTMLAtomicFacetElement;
        new (): HTMLAtomicFacetElement;
    };
    interface HTMLAtomicFacetDateInputElement extends Components.AtomicFacetDateInput, HTMLStencilElement {
    }
    var HTMLAtomicFacetDateInputElement: {
        prototype: HTMLAtomicFacetDateInputElement;
        new (): HTMLAtomicFacetDateInputElement;
    };
    interface HTMLAtomicFacetManagerElement extends Components.AtomicFacetManager, HTMLStencilElement {
    }
    var HTMLAtomicFacetManagerElement: {
        prototype: HTMLAtomicFacetManagerElement;
        new (): HTMLAtomicFacetManagerElement;
    };
    interface HTMLAtomicFacetNumberInputElement extends Components.AtomicFacetNumberInput, HTMLStencilElement {
    }
    var HTMLAtomicFacetNumberInputElement: {
        prototype: HTMLAtomicFacetNumberInputElement;
        new (): HTMLAtomicFacetNumberInputElement;
    };
    interface HTMLAtomicFieldConditionElement extends Components.AtomicFieldCondition, HTMLStencilElement {
    }
    var HTMLAtomicFieldConditionElement: {
        prototype: HTMLAtomicFieldConditionElement;
        new (): HTMLAtomicFieldConditionElement;
    };
    interface HTMLAtomicFocusTrapElement extends Components.AtomicFocusTrap, HTMLStencilElement {
    }
    var HTMLAtomicFocusTrapElement: {
        prototype: HTMLAtomicFocusTrapElement;
        new (): HTMLAtomicFocusTrapElement;
    };
    interface HTMLAtomicFormatCurrencyElement extends Components.AtomicFormatCurrency, HTMLStencilElement {
    }
    var HTMLAtomicFormatCurrencyElement: {
        prototype: HTMLAtomicFormatCurrencyElement;
        new (): HTMLAtomicFormatCurrencyElement;
    };
    interface HTMLAtomicFormatNumberElement extends Components.AtomicFormatNumber, HTMLStencilElement {
    }
    var HTMLAtomicFormatNumberElement: {
        prototype: HTMLAtomicFormatNumberElement;
        new (): HTMLAtomicFormatNumberElement;
    };
    interface HTMLAtomicFormatUnitElement extends Components.AtomicFormatUnit, HTMLStencilElement {
    }
    var HTMLAtomicFormatUnitElement: {
        prototype: HTMLAtomicFormatUnitElement;
        new (): HTMLAtomicFormatUnitElement;
    };
    interface HTMLAtomicFrequentlyBoughtTogetherElement extends Components.AtomicFrequentlyBoughtTogether, HTMLStencilElement {
    }
    var HTMLAtomicFrequentlyBoughtTogetherElement: {
        prototype: HTMLAtomicFrequentlyBoughtTogetherElement;
        new (): HTMLAtomicFrequentlyBoughtTogetherElement;
    };
    interface HTMLAtomicIconElement extends Components.AtomicIcon, HTMLStencilElement {
    }
    var HTMLAtomicIconElement: {
        prototype: HTMLAtomicIconElement;
        new (): HTMLAtomicIconElement;
    };
    interface HTMLAtomicLoadMoreResultsElement extends Components.AtomicLoadMoreResults, HTMLStencilElement {
    }
    var HTMLAtomicLoadMoreResultsElement: {
        prototype: HTMLAtomicLoadMoreResultsElement;
        new (): HTMLAtomicLoadMoreResultsElement;
    };
    interface HTMLAtomicNoResultsElement extends Components.AtomicNoResults, HTMLStencilElement {
    }
    var HTMLAtomicNoResultsElement: {
        prototype: HTMLAtomicNoResultsElement;
        new (): HTMLAtomicNoResultsElement;
    };
    interface HTMLAtomicNumericFacetElement extends Components.AtomicNumericFacet, HTMLStencilElement {
    }
    var HTMLAtomicNumericFacetElement: {
        prototype: HTMLAtomicNumericFacetElement;
        new (): HTMLAtomicNumericFacetElement;
    };
    interface HTMLAtomicNumericRangeElement extends Components.AtomicNumericRange, HTMLStencilElement {
    }
    var HTMLAtomicNumericRangeElement: {
        prototype: HTMLAtomicNumericRangeElement;
        new (): HTMLAtomicNumericRangeElement;
    };
    interface HTMLAtomicPagerElement extends Components.AtomicPager, HTMLStencilElement {
    }
    var HTMLAtomicPagerElement: {
        prototype: HTMLAtomicPagerElement;
        new (): HTMLAtomicPagerElement;
    };
    interface HTMLAtomicQueryErrorElement extends Components.AtomicQueryError, HTMLStencilElement {
    }
    var HTMLAtomicQueryErrorElement: {
        prototype: HTMLAtomicQueryErrorElement;
        new (): HTMLAtomicQueryErrorElement;
    };
    interface HTMLAtomicQuerySummaryElement extends Components.AtomicQuerySummary, HTMLStencilElement {
    }
    var HTMLAtomicQuerySummaryElement: {
        prototype: HTMLAtomicQuerySummaryElement;
        new (): HTMLAtomicQuerySummaryElement;
    };
    interface HTMLAtomicRatingFacetElement extends Components.AtomicRatingFacet, HTMLStencilElement {
    }
    var HTMLAtomicRatingFacetElement: {
        prototype: HTMLAtomicRatingFacetElement;
        new (): HTMLAtomicRatingFacetElement;
    };
    interface HTMLAtomicRatingRangeFacetElement extends Components.AtomicRatingRangeFacet, HTMLStencilElement {
    }
    var HTMLAtomicRatingRangeFacetElement: {
        prototype: HTMLAtomicRatingRangeFacetElement;
        new (): HTMLAtomicRatingRangeFacetElement;
    };
    interface HTMLAtomicRefineModalElement extends Components.AtomicRefineModal, HTMLStencilElement {
    }
    var HTMLAtomicRefineModalElement: {
        prototype: HTMLAtomicRefineModalElement;
        new (): HTMLAtomicRefineModalElement;
    };
    interface HTMLAtomicRefineToggleElement extends Components.AtomicRefineToggle, HTMLStencilElement {
    }
    var HTMLAtomicRefineToggleElement: {
        prototype: HTMLAtomicRefineToggleElement;
        new (): HTMLAtomicRefineToggleElement;
    };
    interface HTMLAtomicRelevanceInspectorElement extends Components.AtomicRelevanceInspector, HTMLStencilElement {
    }
    var HTMLAtomicRelevanceInspectorElement: {
        prototype: HTMLAtomicRelevanceInspectorElement;
        new (): HTMLAtomicRelevanceInspectorElement;
    };
    interface HTMLAtomicResultElement extends Components.AtomicResult, HTMLStencilElement {
    }
    var HTMLAtomicResultElement: {
        prototype: HTMLAtomicResultElement;
        new (): HTMLAtomicResultElement;
    };
    interface HTMLAtomicResultBadgeElement extends Components.AtomicResultBadge, HTMLStencilElement {
    }
    var HTMLAtomicResultBadgeElement: {
        prototype: HTMLAtomicResultBadgeElement;
        new (): HTMLAtomicResultBadgeElement;
    };
    interface HTMLAtomicResultDateElement extends Components.AtomicResultDate, HTMLStencilElement {
    }
    var HTMLAtomicResultDateElement: {
        prototype: HTMLAtomicResultDateElement;
        new (): HTMLAtomicResultDateElement;
    };
    interface HTMLAtomicResultFieldsListElement extends Components.AtomicResultFieldsList, HTMLStencilElement {
    }
    var HTMLAtomicResultFieldsListElement: {
        prototype: HTMLAtomicResultFieldsListElement;
        new (): HTMLAtomicResultFieldsListElement;
    };
    interface HTMLAtomicResultIconElement extends Components.AtomicResultIcon, HTMLStencilElement {
    }
    var HTMLAtomicResultIconElement: {
        prototype: HTMLAtomicResultIconElement;
        new (): HTMLAtomicResultIconElement;
    };
    interface HTMLAtomicResultImageElement extends Components.AtomicResultImage, HTMLStencilElement {
    }
    var HTMLAtomicResultImageElement: {
        prototype: HTMLAtomicResultImageElement;
        new (): HTMLAtomicResultImageElement;
    };
    interface HTMLAtomicResultLinkElement extends Components.AtomicResultLink, HTMLStencilElement {
    }
    var HTMLAtomicResultLinkElement: {
        prototype: HTMLAtomicResultLinkElement;
        new (): HTMLAtomicResultLinkElement;
    };
    interface HTMLAtomicResultListElement extends Components.AtomicResultList, HTMLStencilElement {
    }
    var HTMLAtomicResultListElement: {
        prototype: HTMLAtomicResultListElement;
        new (): HTMLAtomicResultListElement;
    };
    interface HTMLAtomicResultMultiValueTextElement extends Components.AtomicResultMultiValueText, HTMLStencilElement {
    }
    var HTMLAtomicResultMultiValueTextElement: {
        prototype: HTMLAtomicResultMultiValueTextElement;
        new (): HTMLAtomicResultMultiValueTextElement;
    };
    interface HTMLAtomicResultNumberElement extends Components.AtomicResultNumber, HTMLStencilElement {
    }
    var HTMLAtomicResultNumberElement: {
        prototype: HTMLAtomicResultNumberElement;
        new (): HTMLAtomicResultNumberElement;
    };
    interface HTMLAtomicResultPlaceholderElement extends Components.AtomicResultPlaceholder, HTMLStencilElement {
    }
    var HTMLAtomicResultPlaceholderElement: {
        prototype: HTMLAtomicResultPlaceholderElement;
        new (): HTMLAtomicResultPlaceholderElement;
    };
    interface HTMLAtomicResultPrintableUriElement extends Components.AtomicResultPrintableUri, HTMLStencilElement {
    }
    var HTMLAtomicResultPrintableUriElement: {
        prototype: HTMLAtomicResultPrintableUriElement;
        new (): HTMLAtomicResultPrintableUriElement;
    };
    interface HTMLAtomicResultRatingElement extends Components.AtomicResultRating, HTMLStencilElement {
    }
    var HTMLAtomicResultRatingElement: {
        prototype: HTMLAtomicResultRatingElement;
        new (): HTMLAtomicResultRatingElement;
    };
    interface HTMLAtomicResultSectionActionsElement extends Components.AtomicResultSectionActions, HTMLStencilElement {
    }
    var HTMLAtomicResultSectionActionsElement: {
        prototype: HTMLAtomicResultSectionActionsElement;
        new (): HTMLAtomicResultSectionActionsElement;
    };
    interface HTMLAtomicResultSectionBadgesElement extends Components.AtomicResultSectionBadges, HTMLStencilElement {
    }
    var HTMLAtomicResultSectionBadgesElement: {
        prototype: HTMLAtomicResultSectionBadgesElement;
        new (): HTMLAtomicResultSectionBadgesElement;
    };
    interface HTMLAtomicResultSectionBottomMetadataElement extends Components.AtomicResultSectionBottomMetadata, HTMLStencilElement {
    }
    var HTMLAtomicResultSectionBottomMetadataElement: {
        prototype: HTMLAtomicResultSectionBottomMetadataElement;
        new (): HTMLAtomicResultSectionBottomMetadataElement;
    };
    interface HTMLAtomicResultSectionEmphasizedElement extends Components.AtomicResultSectionEmphasized, HTMLStencilElement {
    }
    var HTMLAtomicResultSectionEmphasizedElement: {
        prototype: HTMLAtomicResultSectionEmphasizedElement;
        new (): HTMLAtomicResultSectionEmphasizedElement;
    };
    interface HTMLAtomicResultSectionExcerptElement extends Components.AtomicResultSectionExcerpt, HTMLStencilElement {
    }
    var HTMLAtomicResultSectionExcerptElement: {
        prototype: HTMLAtomicResultSectionExcerptElement;
        new (): HTMLAtomicResultSectionExcerptElement;
    };
    interface HTMLAtomicResultSectionTitleElement extends Components.AtomicResultSectionTitle, HTMLStencilElement {
    }
    var HTMLAtomicResultSectionTitleElement: {
        prototype: HTMLAtomicResultSectionTitleElement;
        new (): HTMLAtomicResultSectionTitleElement;
    };
    interface HTMLAtomicResultSectionTitleMetadataElement extends Components.AtomicResultSectionTitleMetadata, HTMLStencilElement {
    }
    var HTMLAtomicResultSectionTitleMetadataElement: {
        prototype: HTMLAtomicResultSectionTitleMetadataElement;
        new (): HTMLAtomicResultSectionTitleMetadataElement;
    };
    interface HTMLAtomicResultSectionVisualElement extends Components.AtomicResultSectionVisual, HTMLStencilElement {
    }
    var HTMLAtomicResultSectionVisualElement: {
        prototype: HTMLAtomicResultSectionVisualElement;
        new (): HTMLAtomicResultSectionVisualElement;
    };
    interface HTMLAtomicResultTablePlaceholderElement extends Components.AtomicResultTablePlaceholder, HTMLStencilElement {
    }
    var HTMLAtomicResultTablePlaceholderElement: {
        prototype: HTMLAtomicResultTablePlaceholderElement;
        new (): HTMLAtomicResultTablePlaceholderElement;
    };
    interface HTMLAtomicResultTemplateElement extends Components.AtomicResultTemplate, HTMLStencilElement {
    }
    var HTMLAtomicResultTemplateElement: {
        prototype: HTMLAtomicResultTemplateElement;
        new (): HTMLAtomicResultTemplateElement;
    };
    interface HTMLAtomicResultTextElement extends Components.AtomicResultText, HTMLStencilElement {
    }
    var HTMLAtomicResultTextElement: {
        prototype: HTMLAtomicResultTextElement;
        new (): HTMLAtomicResultTextElement;
    };
    interface HTMLAtomicResultsPerPageElement extends Components.AtomicResultsPerPage, HTMLStencilElement {
    }
    var HTMLAtomicResultsPerPageElement: {
        prototype: HTMLAtomicResultsPerPageElement;
        new (): HTMLAtomicResultsPerPageElement;
    };
    interface HTMLAtomicSearchBoxElement extends Components.AtomicSearchBox, HTMLStencilElement {
    }
    var HTMLAtomicSearchBoxElement: {
        prototype: HTMLAtomicSearchBoxElement;
        new (): HTMLAtomicSearchBoxElement;
    };
    interface HTMLAtomicSearchBoxQuerySuggestionsElement extends Components.AtomicSearchBoxQuerySuggestions, HTMLStencilElement {
    }
    var HTMLAtomicSearchBoxQuerySuggestionsElement: {
        prototype: HTMLAtomicSearchBoxQuerySuggestionsElement;
        new (): HTMLAtomicSearchBoxQuerySuggestionsElement;
    };
    interface HTMLAtomicSearchBoxRecentQueriesElement extends Components.AtomicSearchBoxRecentQueries, HTMLStencilElement {
    }
    var HTMLAtomicSearchBoxRecentQueriesElement: {
        prototype: HTMLAtomicSearchBoxRecentQueriesElement;
        new (): HTMLAtomicSearchBoxRecentQueriesElement;
    };
    interface HTMLAtomicSearchInterfaceElement extends Components.AtomicSearchInterface, HTMLStencilElement {
    }
    var HTMLAtomicSearchInterfaceElement: {
        prototype: HTMLAtomicSearchInterfaceElement;
        new (): HTMLAtomicSearchInterfaceElement;
    };
    interface HTMLAtomicSortDropdownElement extends Components.AtomicSortDropdown, HTMLStencilElement {
    }
    var HTMLAtomicSortDropdownElement: {
        prototype: HTMLAtomicSortDropdownElement;
        new (): HTMLAtomicSortDropdownElement;
    };
    interface HTMLAtomicSortExpressionElement extends Components.AtomicSortExpression, HTMLStencilElement {
    }
    var HTMLAtomicSortExpressionElement: {
        prototype: HTMLAtomicSortExpressionElement;
        new (): HTMLAtomicSortExpressionElement;
    };
    interface HTMLAtomicTableElementElement extends Components.AtomicTableElement, HTMLStencilElement {
    }
    var HTMLAtomicTableElementElement: {
        prototype: HTMLAtomicTableElementElement;
        new (): HTMLAtomicTableElementElement;
    };
    interface HTMLAtomicTextElement extends Components.AtomicText, HTMLStencilElement {
    }
    var HTMLAtomicTextElement: {
        prototype: HTMLAtomicTextElement;
        new (): HTMLAtomicTextElement;
    };
    interface HTMLAtomicTimeframeElement extends Components.AtomicTimeframe, HTMLStencilElement {
    }
    var HTMLAtomicTimeframeElement: {
        prototype: HTMLAtomicTimeframeElement;
        new (): HTMLAtomicTimeframeElement;
    };
    interface HTMLAtomicTimeframeFacetElement extends Components.AtomicTimeframeFacet, HTMLStencilElement {
    }
    var HTMLAtomicTimeframeFacetElement: {
        prototype: HTMLAtomicTimeframeFacetElement;
        new (): HTMLAtomicTimeframeFacetElement;
    };
    interface HTMLElementTagNameMap {
        "atomic-aria-live": HTMLAtomicAriaLiveElement;
        "atomic-breadbox": HTMLAtomicBreadboxElement;
        "atomic-category-facet": HTMLAtomicCategoryFacetElement;
        "atomic-color-facet": HTMLAtomicColorFacetElement;
        "atomic-component-error": HTMLAtomicComponentErrorElement;
        "atomic-did-you-mean": HTMLAtomicDidYouMeanElement;
        "atomic-external": HTMLAtomicExternalElement;
        "atomic-facet": HTMLAtomicFacetElement;
        "atomic-facet-date-input": HTMLAtomicFacetDateInputElement;
        "atomic-facet-manager": HTMLAtomicFacetManagerElement;
        "atomic-facet-number-input": HTMLAtomicFacetNumberInputElement;
        "atomic-field-condition": HTMLAtomicFieldConditionElement;
        "atomic-focus-trap": HTMLAtomicFocusTrapElement;
        "atomic-format-currency": HTMLAtomicFormatCurrencyElement;
        "atomic-format-number": HTMLAtomicFormatNumberElement;
        "atomic-format-unit": HTMLAtomicFormatUnitElement;
        "atomic-frequently-bought-together": HTMLAtomicFrequentlyBoughtTogetherElement;
        "atomic-icon": HTMLAtomicIconElement;
        "atomic-load-more-results": HTMLAtomicLoadMoreResultsElement;
        "atomic-no-results": HTMLAtomicNoResultsElement;
        "atomic-numeric-facet": HTMLAtomicNumericFacetElement;
        "atomic-numeric-range": HTMLAtomicNumericRangeElement;
        "atomic-pager": HTMLAtomicPagerElement;
        "atomic-query-error": HTMLAtomicQueryErrorElement;
        "atomic-query-summary": HTMLAtomicQuerySummaryElement;
        "atomic-rating-facet": HTMLAtomicRatingFacetElement;
        "atomic-rating-range-facet": HTMLAtomicRatingRangeFacetElement;
        "atomic-refine-modal": HTMLAtomicRefineModalElement;
        "atomic-refine-toggle": HTMLAtomicRefineToggleElement;
        "atomic-relevance-inspector": HTMLAtomicRelevanceInspectorElement;
        "atomic-result": HTMLAtomicResultElement;
        "atomic-result-badge": HTMLAtomicResultBadgeElement;
        "atomic-result-date": HTMLAtomicResultDateElement;
        "atomic-result-fields-list": HTMLAtomicResultFieldsListElement;
        "atomic-result-icon": HTMLAtomicResultIconElement;
        "atomic-result-image": HTMLAtomicResultImageElement;
        "atomic-result-link": HTMLAtomicResultLinkElement;
        "atomic-result-list": HTMLAtomicResultListElement;
        "atomic-result-multi-value-text": HTMLAtomicResultMultiValueTextElement;
        "atomic-result-number": HTMLAtomicResultNumberElement;
        "atomic-result-placeholder": HTMLAtomicResultPlaceholderElement;
        "atomic-result-printable-uri": HTMLAtomicResultPrintableUriElement;
        "atomic-result-rating": HTMLAtomicResultRatingElement;
        "atomic-result-section-actions": HTMLAtomicResultSectionActionsElement;
        "atomic-result-section-badges": HTMLAtomicResultSectionBadgesElement;
        "atomic-result-section-bottom-metadata": HTMLAtomicResultSectionBottomMetadataElement;
        "atomic-result-section-emphasized": HTMLAtomicResultSectionEmphasizedElement;
        "atomic-result-section-excerpt": HTMLAtomicResultSectionExcerptElement;
        "atomic-result-section-title": HTMLAtomicResultSectionTitleElement;
        "atomic-result-section-title-metadata": HTMLAtomicResultSectionTitleMetadataElement;
        "atomic-result-section-visual": HTMLAtomicResultSectionVisualElement;
        "atomic-result-table-placeholder": HTMLAtomicResultTablePlaceholderElement;
        "atomic-result-template": HTMLAtomicResultTemplateElement;
        "atomic-result-text": HTMLAtomicResultTextElement;
        "atomic-results-per-page": HTMLAtomicResultsPerPageElement;
        "atomic-search-box": HTMLAtomicSearchBoxElement;
        "atomic-search-box-query-suggestions": HTMLAtomicSearchBoxQuerySuggestionsElement;
        "atomic-search-box-recent-queries": HTMLAtomicSearchBoxRecentQueriesElement;
        "atomic-search-interface": HTMLAtomicSearchInterfaceElement;
        "atomic-sort-dropdown": HTMLAtomicSortDropdownElement;
        "atomic-sort-expression": HTMLAtomicSortExpressionElement;
        "atomic-table-element": HTMLAtomicTableElementElement;
        "atomic-text": HTMLAtomicTextElement;
        "atomic-timeframe": HTMLAtomicTimeframeElement;
        "atomic-timeframe-facet": HTMLAtomicTimeframeFacetElement;
    }
}
declare namespace LocalJSX {
    interface AtomicAriaLive {
    }
    interface AtomicBreadbox {
    }
    interface AtomicCategoryFacet {
        /**
          * The base path shared by all values for the facet, separated by commas.
         */
        "basePath"?: string;
        /**
          * The character that separates values of a multi-value field.
         */
        "delimitingCharacter"?: string;
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Whether to use basePath as a filter for the results.
         */
        "filterByBasePath"?: boolean;
        /**
          * Whether to exclude the parents of folded results when estimating the result count for each facet value.
         */
        "filterFacetCount"?: boolean;
        /**
          * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values. Note: A high injectionDepth may negatively impact the facet request performance. Minimum: `0`
         */
        "injectionDepth"?: number;
        /**
          * Specifies if the facet is collapsed.
         */
        "isCollapsed"?: boolean;
        /**
          * The non-localized label for the facet.
         */
        "label"?: string;
        /**
          * The number of values to request for this facet. Also determines the number of additional values to request each time more values are shown.
         */
        "numberOfValues"?: number;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are 'alphanumeric' and 'occurrences'.
         */
        "sortCriteria"?: CategoryFacetSortCriterion;
        /**
          * Whether this facet should contain a search box. When "true", the search is only enabled when more facet values are available.
         */
        "withSearch"?: boolean;
    }
    interface AtomicColorFacet {
        /**
          * Whether to display the facet values as checkboxes (multiple selection) or boxes (multiple selection). Possible values are 'checkbox', and 'box'.
         */
        "displayValuesAs"?: 'checkbox' | 'box';
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Whether to exclude the parents of folded results when estimating the result count for each facet value.
         */
        "filterFacetCount"?: boolean;
        /**
          * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values. Note: A high injectionDepth may negatively impact the facet request performance. Minimum: `0`
         */
        "injectionDepth"?: number;
        /**
          * Specifies if the facet is collapsed.
         */
        "isCollapsed"?: boolean;
        /**
          * The non-localized label for the facet.
         */
        "label"?: string;
        /**
          * The number of values to request for this facet. Also determines the number of additional values to request each time more values are shown.
         */
        "numberOfValues"?: number;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are 'score', 'alphanumeric', 'occurrences', and 'automatic'.
         */
        "sortCriteria"?: FacetSortCriterion;
        /**
          * Whether this facet should contain a search box. When "true", the search is only enabled when more facet values are available.
         */
        "withSearch"?: boolean;
    }
    interface AtomicComponentError {
        "element": HTMLElement;
        "error": Error;
    }
    interface AtomicDidYouMean {
    }
    interface AtomicExternal {
        /**
          * The CSS selector that identifies the `atomic-search-interface` component with which to initialize the external components.
         */
        "selector"?: string;
    }
    interface AtomicFacet {
        /**
          * Whether to display the facet values as checkboxes (multiple selection), links (single selection) or boxes (multiple selection). Possible values are 'checkbox', 'link', and 'box'.
         */
        "displayValuesAs"?: 'checkbox' | 'link' | 'box';
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Whether to exclude the parents of folded results when estimating the result count for each facet value.
         */
        "filterFacetCount"?: boolean;
        /**
          * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values. Note: A high injectionDepth may negatively impact the facet request performance. Minimum: `0`
         */
        "injectionDepth"?: number;
        /**
          * Specifies if the facet is collapsed.
         */
        "isCollapsed"?: boolean;
        /**
          * The non-localized label for the facet.
         */
        "label"?: string;
        /**
          * The number of values to request for this facet. Also determines the number of additional values to request each time more values are shown.
         */
        "numberOfValues"?: number;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are 'score', 'alphanumeric', 'occurrences', and 'automatic'.
         */
        "sortCriteria"?: FacetSortCriterion;
        /**
          * Whether this facet should contain a search box. When "true", the search is only enabled when more facet values are available.
         */
        "withSearch"?: boolean;
    }
    interface AtomicFacetDateInput {
        "bindings": Bindings;
        "filter": DateFilter;
        "filterState": DateFilterState;
        "label": string;
        "onAtomic/dateInputApply"?: (event: CustomEvent<any>) => void;
    }
    interface AtomicFacetManager {
        /**
          * The number of expanded facets inside the manager. Remaining facets are automatically collapsed.  Using the value `0` collapses all facets. Using the value `-1` disables the feature and keeps all facets expanded. Useful when you want to set the collapse state for each facet individually.
         */
        "collapseFacetsAfter"?: number;
    }
    interface AtomicFacetNumberInput {
        "bindings": Bindings;
        "filter": NumericFilter;
        "filterState": NumericFilterState;
        "label": string;
        "onAtomic/numberInputApply"?: (event: CustomEvent<any>) => void;
        "type": NumberInputType;
    }
    interface AtomicFieldCondition {
        /**
          * A list of conditions that must be fulfilled for this template to be selected.
         */
        "conditions"?: ResultTemplateCondition[];
        /**
          * Verifies wheter the specified fields are defined.
         */
        "ifDefined"?: string;
        /**
          * Verifies whether the specified fields are not defined.
         */
        "ifNotDefined"?: string;
    }
    interface AtomicFocusTrap {
        "active"?: boolean;
    }
    interface AtomicFormatCurrency {
        /**
          * The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as "USD" for the US dollar, "EUR" for the euro, or "CNY" for the Chinese RMB. See the current [currency & funds code list](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency).
         */
        "currency": string;
    }
    interface AtomicFormatNumber {
        /**
          * The maximum number of fraction digits to use.
         */
        "maximumFractionDigits"?: number;
        /**
          * The maximum number of significant digits to use.
         */
        "maximumSignificantDigits"?: number;
        /**
          * The minimum number of fraction digits to use.
         */
        "minimumFractionDigits"?: number;
        /**
          * The minimum number of integer digits to use.
         */
        "minimumIntegerDigits"?: number;
        /**
          * The minimum number of significant digits to use.
         */
        "minimumSignificantDigits"?: number;
    }
    interface AtomicFormatUnit {
        /**
          * The unit to use in unit formatting. Leverages the [Intl.NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat) constructor. The unit must be [sanctioned unit identifier](https://tc39.es/proposal-unified-intl-numberformat/section6/locales-currencies-tz_proposed_out.html#sec-issanctionedsimpleunitidentifier)
         */
        "unit": string;
        /**
          * The unit formatting style to use in unit formatting.  * "long" (e.g., 16 litres) * "short" (e.g., 16 l) * "narrow" (e.g., 16l)
         */
        "unitDisplay"?: 'long' | 'short' | 'narrow';
    }
    interface AtomicFrequentlyBoughtTogether {
    }
    interface AtomicIcon {
        /**
          * The SVG icon to display.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly.
         */
        "icon": string;
    }
    interface AtomicLoadMoreResults {
    }
    interface AtomicNoResults {
        /**
          * Whether to display a button which cancels the last available action.
         */
        "enableCancelLastAction"?: boolean;
    }
    interface AtomicNumericFacet {
        /**
          * Whether to display the facet values as checkboxes (multiple selection) or links (single selection). Possible values are 'checkbox' and 'link'.
         */
        "displayValuesAs"?: 'checkbox' | 'link';
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Whether to exclude the parents of folded results when estimating the result count for each facet value.
         */
        "filterFacetCount"?: boolean;
        /**
          * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values. Note: A high injectionDepth may negatively impact the facet request performance. Minimum: `0`
         */
        "injectionDepth"?: number;
        /**
          * Specifies if the facet is collapsed.
         */
        "isCollapsed"?: boolean;
        /**
          * The non-localized label for the facet.
         */
        "label"?: string;
        /**
          * The number of values to request for this facet, when there are no manual ranges. If the number of values is 0, no ranges will be displayed.
         */
        "numberOfValues"?: number;
        /**
          * The algorithm that's used for generating the ranges of this facet when they aren't manually defined. The default value of `"equiprobable"` generates facet ranges which vary in size but have a more balanced number of results within each range. The value of `"even"` generates equally sized facet ranges across all of the results.
         */
        "rangeAlgorithm"?: RangeFacetRangeAlgorithm;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are 'ascending' and 'descending'.
         */
        "sortCriteria"?: RangeFacetSortCriterion;
        /**
          * Whether this facet should contain an input allowing users to set custom ranges. Depending on the field, the input can allow either decimal or integer values.
         */
        "withInput"?: NumberInputType;
    }
    interface AtomicNumericRange {
        /**
          * The ending value for the numeric range.
         */
        "end": number;
        /**
          * Specifies whether the end value should be included in the range.
         */
        "endInclusive"?: boolean;
        /**
          * The non-localized label for the facet. When defined, it will appear instead of the formatted value.
         */
        "label"?: string;
        /**
          * The starting value for the numeric range.
         */
        "start": number;
    }
    interface AtomicPager {
        /**
          * Specifies how many page buttons to display in the pager.
         */
        "numberOfPages"?: number;
        "onAtomic/scrollToTop"?: (event: CustomEvent<any>) => void;
    }
    interface AtomicQueryError {
    }
    interface AtomicQuerySummary {
        /**
          * Whether to display the duration of the last query execution.
          * @deprecated Use the `duration` part.
         */
        "enableDuration"?: boolean;
    }
    interface AtomicRatingFacet {
        /**
          * Whether to display the facet values as checkboxes (multiple selection) or links (single selection). Possible values are 'checkbox' and 'link'.
         */
        "displayValuesAs"?: 'checkbox' | 'link';
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Whether to exclude the parents of folded results when estimating the result count for each facet value.
         */
        "filterFacetCount"?: boolean;
        /**
          * The SVG icon to use to display the rating.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly.  When using a custom icon, at least part of your icon should have the color set to `fill="currentColor"`. This part of the SVG will take on the colors set in the following [variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties):  - `--atomic-rating-facet-icon-active-color` - `--atomic-rating-facet-icon-inactive-color`
         */
        "icon"?: string;
        /**
          * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values. Note: A high injectionDepth may negatively impact the facet request performance. Minimum: `0`
         */
        "injectionDepth"?: number;
        /**
          * Specifies if the facet is collapsed.
         */
        "isCollapsed"?: boolean;
        /**
          * The non-localized label for the facet.
         */
        "label"?: string;
        /**
          * The maximum value in the field's index and the number of rating icons to display in the facet. If not assigned a value, this property will default to the same value as `numberOfIntervals`.
         */
        "maxValueInIndex"?: number;
        /**
          * The minimum value of the field.
         */
        "minValueInIndex"?: number;
        /**
          * The number of options to display in the facet. If `maxValueInIndex` isn't specified, it will be assumed that this is also the maximum number of rating icons.
         */
        "numberOfIntervals"?: number;
    }
    interface AtomicRatingRangeFacet {
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Whether to exclude the parents of folded results when estimating the result count for each facet value.
         */
        "filterFacetCount"?: boolean;
        /**
          * The SVG icon to use to display the rating.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly.  When using a custom icon, at least part of your icon should have the color set to `fill="currentColor"`. This part of the SVG will take on the colors set in the following [variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties):  - `--atomic-rating-facet-icon-active-color` - `--atomic-rating-facet-icon-inactive-color`
         */
        "icon"?: string;
        /**
          * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values. Note: A high injectionDepth may negatively impact the facet request performance. Minimum: `0`
         */
        "injectionDepth"?: number;
        /**
          * Specifies if the facet is collapsed.
         */
        "isCollapsed"?: boolean;
        /**
          * The non-localized label for the facet.
         */
        "label"?: string;
        /**
          * The maximum value in the field's index and the number of rating icons to display in the facet. This property will default to the same value as `numberOfIntervals`, if not assigned a value.
         */
        "maxValueInIndex"?: number;
        /**
          * The minimum value of the field.
         */
        "minValueInIndex"?: number;
        /**
          * The number of options to display in the facet. If `maxValueInIndex` isn't specified, it will be assumed that this is also the maximum number of rating icons.
         */
        "numberOfIntervals"?: number;
    }
    interface AtomicRefineModal {
        "modalStatus": ModalStatus;
        "openButton"?: HTMLElement;
    }
    interface AtomicRefineToggle {
    }
    interface AtomicRelevanceInspector {
        /**
          * The Atomic interface bindings, namely the headless search engine and i18n instances.
         */
        "bindings": Bindings;
    }
    interface AtomicResult {
        /**
          * The result content to display.
         */
        "content": ParentNode;
        /**
          * How large or small results should be.
         */
        "density"?: ResultDisplayDensity;
        /**
          * How results should be displayed.
         */
        "display"?: ResultDisplayLayout;
        /**
          * The headless search engine.
         */
        "engine": SearchEngine;
        /**
          * @deprecated use `imageSize` instead.
         */
        "image"?: ResultDisplayImageSize;
        /**
          * How large or small the visual section of results should be.  This may be overwritten if an image size is defined in the result content.
         */
        "imageSize"?: ResultDisplayImageSize;
        /**
          * The result item.
         */
        "result": Result;
    }
    interface AtomicResultBadge {
        /**
          * The field to display in the badge.  Not compatible with `label` nor slotted elements.
         */
        "field"?: string;
        /**
          * Specifies an icon to display at the left-end of the badge. This can be used in conjunction with `field`, `label` or slotted elements.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly
         */
        "icon"?: string;
        /**
          * The text to display in the badge.  Not compatible with `field` nor slotted elements.
         */
        "label"?: string;
    }
    interface AtomicResultDate {
        /**
          * The result field which the component should use. This will look for the field in the Result object first, and then in the Result.raw object. It is important to include the necessary field in the ResultList component.
         */
        "field"?: string;
        /**
          * Available formats: https://day.js.org/docs/en/display/format
         */
        "format"?: string;
    }
    interface AtomicResultFieldsList {
    }
    interface AtomicResultIcon {
    }
    interface AtomicResultImage {
        /**
          * The result field which the component should use. This will look for the field in the Result object first, then in the Result.raw object. It is important to include the necessary field in the ResultList component.
         */
        "field": string;
    }
    interface AtomicResultLink {
        /**
          * Where to open the linked URL, as the name for a browsing context (a tab, window, or iframe).  The following keywords have special meanings:  * _self: the current browsing context. (Default) * _blank: usually a new tab, but users can configure their browsers to open a new window instead. * _parent: the parent of the current browsing context. If there's no parent, this behaves as `_self`. * _top: the topmost browsing context (the "highest" context that’s an ancestor of the current one). If there are no ancestors, this behaves as `_self`.
         */
        "target"?: string;
    }
    interface AtomicResultList {
        /**
          * The spacing of various elements in the result list, including the gap between results, the gap between parts of a result, and the font sizes of different parts in a result.
         */
        "density"?: ResultDisplayDensity;
        /**
          * The desired layout to use when displaying results. Layouts affect how many results to display per row and how visually distinct they are from each other.
         */
        "display"?: ResultDisplayLayout;
        /**
          * A list of non-default fields to include in the query results, separated by commas. The default fields sent in a request are: 'date', 'author', 'source', 'language', 'filetype', 'parents', ‘urihash’, ‘objecttype’, ‘collection’, ‘permanentid’ 'ec_price', 'ec_name', 'ec_description', 'ec_brand', 'ec_category', 'ec_item_group_id', 'ec_shortdesc', 'ec_thumbnails', 'ec_images', 'ec_promo_price', 'ec_in_stock', 'ec_cogs', and 'ec_rating'.
         */
        "fieldsToInclude"?: string;
        /**
          * @deprecated use `imageSize` instead.
         */
        "image"?: ResultDisplayImageSize;
        /**
          * The expected size of the image displayed in the results.
         */
        "imageSize"?: ResultDisplayImageSize;
    }
    interface AtomicResultMultiValueText {
        /**
          * The delimiter used to separate values when the field isn't indexed as a multi value field.
         */
        "delimiter"?: string | null;
        /**
          * The field that the component should use. The component will try to find this field in the `Result.raw` object unless it finds it in the `Result` object first. Make sure this field is present in the `fieldsToInclude` property of the `atomic-result-list` component.
         */
        "field": string;
        /**
          * The maximum number of field values to display. If there are _n_ more values than the specified maximum, the last displayed value will be "_n_ more...".
         */
        "maxValuesToDisplay"?: number;
    }
    interface AtomicResultNumber {
        /**
          * The field that the component should use. The component will try to find this field in the `Result.raw` object unless it finds it in the `Result` object first. Make sure this field is present in the `fieldsToInclude` property of the `atomic-result-list` component.
         */
        "field": string;
    }
    interface AtomicResultPlaceholder {
        "density": ResultDisplayDensity;
        "display": ResultDisplayLayout;
        "imageSize": ResultDisplayImageSize;
    }
    interface AtomicResultPrintableUri {
        /**
          * The maximum number of Uri parts to display. This has to be over the minimum of `3` in order to be effective. Putting `Infinity` will disable the ellipsis.
         */
        "maxNumberOfParts"?: number;
        /**
          * Where to open the linked URL, as the name for a browsing context (a tab, window, or iframe).  The following keywords have special meanings:  * _self: the current browsing context. (Default) * _blank: usually a new tab, but users can configure their browsers to open a new window instead. * _parent: the parent of the current browsing context. If there's no parent, this behaves as `_self`. * _top: the topmost browsing context (the "highest" context that’s an ancestor of the current one). If there are no ancestors, this behaves as `_self`.
         */
        "target"?: string;
    }
    interface AtomicResultRating {
        /**
          * The field whose values you want to display as a rating.
         */
        "field": string;
        /**
          * The SVG icon to use to display the rating.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly.  When using a custom icon, at least part of your icon should have the color set to `fill="currentColor"`. This part of the SVG will take on the colors set in the following [variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties):  - `--atomic-rating-facet-icon-active-color` - `--atomic-rating-facet-icon-inactive-color`
         */
        "icon"?: string;
        /**
          * The maximum value of the field. This value is also used as the number of icons to be displayed.
         */
        "maxValueInIndex"?: number;
    }
    interface AtomicResultSectionActions {
    }
    interface AtomicResultSectionBadges {
    }
    interface AtomicResultSectionBottomMetadata {
    }
    interface AtomicResultSectionEmphasized {
    }
    interface AtomicResultSectionExcerpt {
    }
    interface AtomicResultSectionTitle {
    }
    interface AtomicResultSectionTitleMetadata {
    }
    interface AtomicResultSectionVisual {
        /**
          * How large or small the visual section of results using this template should be.
         */
        "imageSize"?: ResultDisplayImageSize;
    }
    interface AtomicResultTablePlaceholder {
        "density": ResultDisplayDensity;
        "imageSize": ResultDisplayImageSize;
        "rows": number;
    }
    interface AtomicResultTemplate {
        /**
          * A function that must return true on results for the result template to apply.  For example, a template with the following condition only applies to results whose `title` contains `singapore`: `[(result) => /singapore/i.test(result.title)]`
         */
        "conditions"?: ResultTemplateCondition[];
    }
    interface AtomicResultText {
        /**
          * The locale key for the text to display when the configured field has no value.
         */
        "default"?: string;
        /**
          * The result field which the component should use. This will look in the Result object first, and then in the Result.raw object for the fields. It is important to include the necessary field in the ResultList component.
         */
        "field": string;
        /**
          * If this is set to true, it will look for the corresponding highlight property and use it if available.
         */
        "shouldHighlight"?: boolean;
    }
    interface AtomicResultsPerPage {
        /**
          * A list of choices for the number of results to display per page, separated by commas.
         */
        "choicesDisplayed"?: string;
        /**
          * The initial selection for the number of result per page. This should be part of the `choicesDisplayed` option. By default, this is set to the first value in `choicesDisplayed`.
         */
        "initialChoice"?: number;
    }
    interface AtomicSearchBox {
        /**
          * The amount of queries displayed when the user interacts with the search box. By default, a mix of query suggestions and recent queries will be shown. You can configure those settings using the following components as children:  - atomic-search-box-query-suggestions  - atomic-search-box-recent-queries
         */
        "numberOfQueries"?: number;
        /**
          * Defining this option makes the search box standalone.  This option defines the default URL the user should be redirected to, when a query is submitted. If a query pipeline redirect is triggered, it will redirect to that URL instead (see [query pipeline triggers](https://docs.coveo.com/en/1458)).
         */
        "redirectionUrl"?: string;
    }
    interface AtomicSearchBoxQuerySuggestions {
        /**
          * The maximum number of suggestions that will be displayed if the user has typed something into the input field.
         */
        "maxWithQuery"?: number;
        /**
          * The maximum number of suggestions that will be displayed initially when the input field is empty.
         */
        "maxWithoutQuery"?: number;
    }
    interface AtomicSearchBoxRecentQueries {
        /**
          * The maximum number of suggestions that will be displayed if the user has typed something into the input field.
         */
        "maxWithQuery"?: number;
        /**
          * The maximum number of suggestions that will be displayed initially when the input field is empty.
         */
        "maxWithoutQuery"?: number;
    }
    interface AtomicSearchInterface {
        /**
          * Whether analytics should be enabled.
         */
        "analytics"?: boolean;
        /**
          * The search interface headless engine.
         */
        "engine"?: SearchEngine;
        /**
          * The search interface i18next instance.
         */
        "i18n"?: i18n;
        /**
          * The search interface language.
         */
        "language"?: string;
        /**
          * The severity level of the messages to log in the console.
         */
        "logLevel"?: LogLevel;
        /**
          * The search interface [query pipeline](https://docs.coveo.com/en/180/).
         */
        "pipeline"?: string;
        /**
          * Whether the state should be reflected in the URL parameters.
         */
        "reflectStateInUrl"?: boolean;
        /**
          * The CSS selector for the container where the interface will scroll back to.
         */
        "scrollContainer"?: string;
        /**
          * The search interface [search hub](https://docs.coveo.com/en/1342/).
         */
        "searchHub"?: string;
        /**
          * The [tz database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) identifier of the time zone to use to correctly interpret dates in the query expression, facets, and result items. By default, the timezone will be [guessed](https://day.js.org/docs/en/timezone/guessing-user-timezone).
          * @example America/Montreal
         */
        "timezone"?: string;
    }
    interface AtomicSortDropdown {
    }
    interface AtomicSortExpression {
        /**
          * One or more sort criteria that the end user can select or toggle between.  The available sort criteria are:  * `relevancy` * `date ascending`/`date descending` * `qre` * `<FIELD> ascending`/`<FIELD> descending`, where you replace `<FIELD>` with the name of a sortable field in your index (e.g., `criteria="size ascending"`).  You can specify multiple sort criteria to be used in the same request by separating them with a comma (e.g., `criteria="size ascending, date ascending"`).
         */
        "expression": string;
        /**
          * The non-localized label to display for this expression.
         */
        "label": string;
    }
    interface AtomicTableElement {
        /**
          * The label to display in the header of this column.
         */
        "label": string;
    }
    interface AtomicText {
        /**
          * The count value used for plurals.
         */
        "count"?: number;
        /**
          * The string key value.
         */
        "value": string;
    }
    interface AtomicTimeframe {
        /**
          * The amount of units from which to count.  E.g., 10 days, 1 year, etc.
         */
        "amount"?: number;
        /**
          * The non-localized label for the timeframe. When defined, it will appear instead of the formatted value.
         */
        "label"?: string;
        /**
          * The relative period of time to now.
         */
        "period"?: 'past' | 'next';
        /**
          * The unit used to define: - the start date of the timeframe, if the period is `past` - the end date of the timeframe, if the period is `future`
         */
        "unit": RelativeDateUnit;
    }
    interface AtomicTimeframeFacet {
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field"?: string;
        /**
          * Whether to exclude the parents of folded results when estimating the result count for each facet value.
         */
        "filterFacetCount"?: boolean;
        /**
          * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values. Note: A high injectionDepth may negatively impact the facet request performance. Minimum: `0`
         */
        "injectionDepth"?: number;
        /**
          * Specifies if the facet is collapsed.
         */
        "isCollapsed"?: boolean;
        /**
          * The non-localized label for the facet.
         */
        "label"?: string;
        /**
          * Whether this facet should contain an datepicker allowing users to set custom ranges.
         */
        "withDatePicker"?: boolean;
    }
    interface IntrinsicElements {
        "atomic-aria-live": AtomicAriaLive;
        "atomic-breadbox": AtomicBreadbox;
        "atomic-category-facet": AtomicCategoryFacet;
        "atomic-color-facet": AtomicColorFacet;
        "atomic-component-error": AtomicComponentError;
        "atomic-did-you-mean": AtomicDidYouMean;
        "atomic-external": AtomicExternal;
        "atomic-facet": AtomicFacet;
        "atomic-facet-date-input": AtomicFacetDateInput;
        "atomic-facet-manager": AtomicFacetManager;
        "atomic-facet-number-input": AtomicFacetNumberInput;
        "atomic-field-condition": AtomicFieldCondition;
        "atomic-focus-trap": AtomicFocusTrap;
        "atomic-format-currency": AtomicFormatCurrency;
        "atomic-format-number": AtomicFormatNumber;
        "atomic-format-unit": AtomicFormatUnit;
        "atomic-frequently-bought-together": AtomicFrequentlyBoughtTogether;
        "atomic-icon": AtomicIcon;
        "atomic-load-more-results": AtomicLoadMoreResults;
        "atomic-no-results": AtomicNoResults;
        "atomic-numeric-facet": AtomicNumericFacet;
        "atomic-numeric-range": AtomicNumericRange;
        "atomic-pager": AtomicPager;
        "atomic-query-error": AtomicQueryError;
        "atomic-query-summary": AtomicQuerySummary;
        "atomic-rating-facet": AtomicRatingFacet;
        "atomic-rating-range-facet": AtomicRatingRangeFacet;
        "atomic-refine-modal": AtomicRefineModal;
        "atomic-refine-toggle": AtomicRefineToggle;
        "atomic-relevance-inspector": AtomicRelevanceInspector;
        "atomic-result": AtomicResult;
        "atomic-result-badge": AtomicResultBadge;
        "atomic-result-date": AtomicResultDate;
        "atomic-result-fields-list": AtomicResultFieldsList;
        "atomic-result-icon": AtomicResultIcon;
        "atomic-result-image": AtomicResultImage;
        "atomic-result-link": AtomicResultLink;
        "atomic-result-list": AtomicResultList;
        "atomic-result-multi-value-text": AtomicResultMultiValueText;
        "atomic-result-number": AtomicResultNumber;
        "atomic-result-placeholder": AtomicResultPlaceholder;
        "atomic-result-printable-uri": AtomicResultPrintableUri;
        "atomic-result-rating": AtomicResultRating;
        "atomic-result-section-actions": AtomicResultSectionActions;
        "atomic-result-section-badges": AtomicResultSectionBadges;
        "atomic-result-section-bottom-metadata": AtomicResultSectionBottomMetadata;
        "atomic-result-section-emphasized": AtomicResultSectionEmphasized;
        "atomic-result-section-excerpt": AtomicResultSectionExcerpt;
        "atomic-result-section-title": AtomicResultSectionTitle;
        "atomic-result-section-title-metadata": AtomicResultSectionTitleMetadata;
        "atomic-result-section-visual": AtomicResultSectionVisual;
        "atomic-result-table-placeholder": AtomicResultTablePlaceholder;
        "atomic-result-template": AtomicResultTemplate;
        "atomic-result-text": AtomicResultText;
        "atomic-results-per-page": AtomicResultsPerPage;
        "atomic-search-box": AtomicSearchBox;
        "atomic-search-box-query-suggestions": AtomicSearchBoxQuerySuggestions;
        "atomic-search-box-recent-queries": AtomicSearchBoxRecentQueries;
        "atomic-search-interface": AtomicSearchInterface;
        "atomic-sort-dropdown": AtomicSortDropdown;
        "atomic-sort-expression": AtomicSortExpression;
        "atomic-table-element": AtomicTableElement;
        "atomic-text": AtomicText;
        "atomic-timeframe": AtomicTimeframe;
        "atomic-timeframe-facet": AtomicTimeframeFacet;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "atomic-aria-live": LocalJSX.AtomicAriaLive & JSXBase.HTMLAttributes<HTMLAtomicAriaLiveElement>;
            "atomic-breadbox": LocalJSX.AtomicBreadbox & JSXBase.HTMLAttributes<HTMLAtomicBreadboxElement>;
            "atomic-category-facet": LocalJSX.AtomicCategoryFacet & JSXBase.HTMLAttributes<HTMLAtomicCategoryFacetElement>;
            "atomic-color-facet": LocalJSX.AtomicColorFacet & JSXBase.HTMLAttributes<HTMLAtomicColorFacetElement>;
            "atomic-component-error": LocalJSX.AtomicComponentError & JSXBase.HTMLAttributes<HTMLAtomicComponentErrorElement>;
            "atomic-did-you-mean": LocalJSX.AtomicDidYouMean & JSXBase.HTMLAttributes<HTMLAtomicDidYouMeanElement>;
            "atomic-external": LocalJSX.AtomicExternal & JSXBase.HTMLAttributes<HTMLAtomicExternalElement>;
            "atomic-facet": LocalJSX.AtomicFacet & JSXBase.HTMLAttributes<HTMLAtomicFacetElement>;
            "atomic-facet-date-input": LocalJSX.AtomicFacetDateInput & JSXBase.HTMLAttributes<HTMLAtomicFacetDateInputElement>;
            "atomic-facet-manager": LocalJSX.AtomicFacetManager & JSXBase.HTMLAttributes<HTMLAtomicFacetManagerElement>;
            "atomic-facet-number-input": LocalJSX.AtomicFacetNumberInput & JSXBase.HTMLAttributes<HTMLAtomicFacetNumberInputElement>;
            "atomic-field-condition": LocalJSX.AtomicFieldCondition & JSXBase.HTMLAttributes<HTMLAtomicFieldConditionElement>;
            "atomic-focus-trap": LocalJSX.AtomicFocusTrap & JSXBase.HTMLAttributes<HTMLAtomicFocusTrapElement>;
            "atomic-format-currency": LocalJSX.AtomicFormatCurrency & JSXBase.HTMLAttributes<HTMLAtomicFormatCurrencyElement>;
            "atomic-format-number": LocalJSX.AtomicFormatNumber & JSXBase.HTMLAttributes<HTMLAtomicFormatNumberElement>;
            "atomic-format-unit": LocalJSX.AtomicFormatUnit & JSXBase.HTMLAttributes<HTMLAtomicFormatUnitElement>;
            "atomic-frequently-bought-together": LocalJSX.AtomicFrequentlyBoughtTogether & JSXBase.HTMLAttributes<HTMLAtomicFrequentlyBoughtTogetherElement>;
            "atomic-icon": LocalJSX.AtomicIcon & JSXBase.HTMLAttributes<HTMLAtomicIconElement>;
            "atomic-load-more-results": LocalJSX.AtomicLoadMoreResults & JSXBase.HTMLAttributes<HTMLAtomicLoadMoreResultsElement>;
            "atomic-no-results": LocalJSX.AtomicNoResults & JSXBase.HTMLAttributes<HTMLAtomicNoResultsElement>;
            "atomic-numeric-facet": LocalJSX.AtomicNumericFacet & JSXBase.HTMLAttributes<HTMLAtomicNumericFacetElement>;
            "atomic-numeric-range": LocalJSX.AtomicNumericRange & JSXBase.HTMLAttributes<HTMLAtomicNumericRangeElement>;
            "atomic-pager": LocalJSX.AtomicPager & JSXBase.HTMLAttributes<HTMLAtomicPagerElement>;
            "atomic-query-error": LocalJSX.AtomicQueryError & JSXBase.HTMLAttributes<HTMLAtomicQueryErrorElement>;
            "atomic-query-summary": LocalJSX.AtomicQuerySummary & JSXBase.HTMLAttributes<HTMLAtomicQuerySummaryElement>;
            "atomic-rating-facet": LocalJSX.AtomicRatingFacet & JSXBase.HTMLAttributes<HTMLAtomicRatingFacetElement>;
            "atomic-rating-range-facet": LocalJSX.AtomicRatingRangeFacet & JSXBase.HTMLAttributes<HTMLAtomicRatingRangeFacetElement>;
            "atomic-refine-modal": LocalJSX.AtomicRefineModal & JSXBase.HTMLAttributes<HTMLAtomicRefineModalElement>;
            "atomic-refine-toggle": LocalJSX.AtomicRefineToggle & JSXBase.HTMLAttributes<HTMLAtomicRefineToggleElement>;
            "atomic-relevance-inspector": LocalJSX.AtomicRelevanceInspector & JSXBase.HTMLAttributes<HTMLAtomicRelevanceInspectorElement>;
            "atomic-result": LocalJSX.AtomicResult & JSXBase.HTMLAttributes<HTMLAtomicResultElement>;
            "atomic-result-badge": LocalJSX.AtomicResultBadge & JSXBase.HTMLAttributes<HTMLAtomicResultBadgeElement>;
            "atomic-result-date": LocalJSX.AtomicResultDate & JSXBase.HTMLAttributes<HTMLAtomicResultDateElement>;
            "atomic-result-fields-list": LocalJSX.AtomicResultFieldsList & JSXBase.HTMLAttributes<HTMLAtomicResultFieldsListElement>;
            "atomic-result-icon": LocalJSX.AtomicResultIcon & JSXBase.HTMLAttributes<HTMLAtomicResultIconElement>;
            "atomic-result-image": LocalJSX.AtomicResultImage & JSXBase.HTMLAttributes<HTMLAtomicResultImageElement>;
            "atomic-result-link": LocalJSX.AtomicResultLink & JSXBase.HTMLAttributes<HTMLAtomicResultLinkElement>;
            "atomic-result-list": LocalJSX.AtomicResultList & JSXBase.HTMLAttributes<HTMLAtomicResultListElement>;
            "atomic-result-multi-value-text": LocalJSX.AtomicResultMultiValueText & JSXBase.HTMLAttributes<HTMLAtomicResultMultiValueTextElement>;
            "atomic-result-number": LocalJSX.AtomicResultNumber & JSXBase.HTMLAttributes<HTMLAtomicResultNumberElement>;
            "atomic-result-placeholder": LocalJSX.AtomicResultPlaceholder & JSXBase.HTMLAttributes<HTMLAtomicResultPlaceholderElement>;
            "atomic-result-printable-uri": LocalJSX.AtomicResultPrintableUri & JSXBase.HTMLAttributes<HTMLAtomicResultPrintableUriElement>;
            "atomic-result-rating": LocalJSX.AtomicResultRating & JSXBase.HTMLAttributes<HTMLAtomicResultRatingElement>;
            "atomic-result-section-actions": LocalJSX.AtomicResultSectionActions & JSXBase.HTMLAttributes<HTMLAtomicResultSectionActionsElement>;
            "atomic-result-section-badges": LocalJSX.AtomicResultSectionBadges & JSXBase.HTMLAttributes<HTMLAtomicResultSectionBadgesElement>;
            "atomic-result-section-bottom-metadata": LocalJSX.AtomicResultSectionBottomMetadata & JSXBase.HTMLAttributes<HTMLAtomicResultSectionBottomMetadataElement>;
            "atomic-result-section-emphasized": LocalJSX.AtomicResultSectionEmphasized & JSXBase.HTMLAttributes<HTMLAtomicResultSectionEmphasizedElement>;
            "atomic-result-section-excerpt": LocalJSX.AtomicResultSectionExcerpt & JSXBase.HTMLAttributes<HTMLAtomicResultSectionExcerptElement>;
            "atomic-result-section-title": LocalJSX.AtomicResultSectionTitle & JSXBase.HTMLAttributes<HTMLAtomicResultSectionTitleElement>;
            "atomic-result-section-title-metadata": LocalJSX.AtomicResultSectionTitleMetadata & JSXBase.HTMLAttributes<HTMLAtomicResultSectionTitleMetadataElement>;
            "atomic-result-section-visual": LocalJSX.AtomicResultSectionVisual & JSXBase.HTMLAttributes<HTMLAtomicResultSectionVisualElement>;
            "atomic-result-table-placeholder": LocalJSX.AtomicResultTablePlaceholder & JSXBase.HTMLAttributes<HTMLAtomicResultTablePlaceholderElement>;
            "atomic-result-template": LocalJSX.AtomicResultTemplate & JSXBase.HTMLAttributes<HTMLAtomicResultTemplateElement>;
            "atomic-result-text": LocalJSX.AtomicResultText & JSXBase.HTMLAttributes<HTMLAtomicResultTextElement>;
            "atomic-results-per-page": LocalJSX.AtomicResultsPerPage & JSXBase.HTMLAttributes<HTMLAtomicResultsPerPageElement>;
            "atomic-search-box": LocalJSX.AtomicSearchBox & JSXBase.HTMLAttributes<HTMLAtomicSearchBoxElement>;
            "atomic-search-box-query-suggestions": LocalJSX.AtomicSearchBoxQuerySuggestions & JSXBase.HTMLAttributes<HTMLAtomicSearchBoxQuerySuggestionsElement>;
            "atomic-search-box-recent-queries": LocalJSX.AtomicSearchBoxRecentQueries & JSXBase.HTMLAttributes<HTMLAtomicSearchBoxRecentQueriesElement>;
            "atomic-search-interface": LocalJSX.AtomicSearchInterface & JSXBase.HTMLAttributes<HTMLAtomicSearchInterfaceElement>;
            "atomic-sort-dropdown": LocalJSX.AtomicSortDropdown & JSXBase.HTMLAttributes<HTMLAtomicSortDropdownElement>;
            "atomic-sort-expression": LocalJSX.AtomicSortExpression & JSXBase.HTMLAttributes<HTMLAtomicSortExpressionElement>;
            "atomic-table-element": LocalJSX.AtomicTableElement & JSXBase.HTMLAttributes<HTMLAtomicTableElementElement>;
            "atomic-text": LocalJSX.AtomicText & JSXBase.HTMLAttributes<HTMLAtomicTextElement>;
            "atomic-timeframe": LocalJSX.AtomicTimeframe & JSXBase.HTMLAttributes<HTMLAtomicTimeframeElement>;
            "atomic-timeframe-facet": LocalJSX.AtomicTimeframeFacet & JSXBase.HTMLAttributes<HTMLAtomicTimeframeFacetElement>;
        }
    }
}
