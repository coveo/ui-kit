/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { CategoryFacetSortCriterion, DateFilter, DateFilterState, FacetSortCriterion, LogLevel, NumericFilter, NumericFilterState, RangeFacetRangeAlgorithm, RangeFacetSortCriterion, RelativeDateUnit, Result, ResultTemplate, ResultTemplateCondition, SearchEngine } from "@coveo/headless";
import { Bindings } from "./utils/initialization-utils";
import { NumberInputType } from "./components/facets-v1/facet-number-input/number-input-type";
import { ResultDisplayDensity, ResultDisplayImageSize, ResultDisplayLayout } from "./components/atomic-result-v1/atomic-result-display-options";
import { i18n } from "i18next";
import { InitializationOptions } from "./components/atomic-search-interface/atomic-search-interface";
export namespace Components {
    interface AtomicBreadbox {
    }
    interface AtomicBreadcrumbManager {
        /**
          * A character that divides each path segment in a category facet breadcrumb.
         */
        "categoryDivider": string;
        /**
          * Number of breadcrumbs to display when collapsed.
         */
        "collapseThreshold": number;
    }
    interface AtomicCategoryFacet {
        /**
          * The base path shared by all values for the facet, separated by commas.
         */
        "basePath": string;
        /**
          * The character that separates values of a multi-value field.
         */
        "delimitingCharacter": string;
        /**
          * Whether this facet should contain a search box.
         */
        "enableFacetSearch": boolean;
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId": string;
        /**
          * Specifies the index field whose values the facet should use.
         */
        "field": string;
        /**
          * Whether to use basePath as a filter for the results.
         */
        "filterByBasePath": boolean;
        /**
          * The non-localized label for the facet.
         */
        "label": string;
        /**
          * The number of values to request for this facet. Also determines the number of additional values to request each time this facet is expanded, and the number of values to display when this facet is collapsed.
         */
        "numberOfValues": number;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are `alphanumeric`, and `occurrences`.
         */
        "sortCriteria": CategoryFacetSortCriterion;
    }
    interface AtomicCategoryFacetV1 {
        /**
          * The base path shared by all values for the facet, separated by commas.
         */
        "basePath"?: string;
        /**
          * The character that separates values of a multi-value field.
         */
        "delimitingCharacter": string;
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Whether to use basePath as a filter for the results.
         */
        "filterByBasePath": boolean;
        /**
          * Specifies if the facet is collapsed.
         */
        "isCollapsed": boolean;
        /**
          * The non-localized label for the facet.
         */
        "label": string;
        /**
          * The number of values to request for this facet. Also determines the number of additional values to request each time more values are shown.
         */
        "numberOfValues": number;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are 'score', 'alphanumeric', 'occurrences', and 'automatic'. TODO: add automatic (occurences when not expanded, alphanumeric when expanded)
         */
        "sortCriteria": CategoryFacetSortCriterion;
        /**
          * Whether this facet should contain a search box. When "true", the search is only enabled when more facet values are available.
         */
        "withSearch": boolean;
    }
    interface AtomicColorFacet {
        /**
          * Whether to display the facet values as checkboxes (multiple selection) or boxes (multiple selection). Possible values are 'checkbox', and 'box'.
         */
        "displayValuesAs": 'checkbox' | 'box';
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Specifies if the facet is collapsed.
         */
        "isCollapsed": boolean;
        /**
          * The non-localized label for the facet.
         */
        "label": string;
        /**
          * The number of values to request for this facet. Also determines the number of additional values to request each time more values are shown.
         */
        "numberOfValues": number;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are 'score', 'alphanumeric', 'occurrences', and 'automatic'.
         */
        "sortCriteria": FacetSortCriterion;
        /**
          * Whether this facet should contain a search box. When "true", the search is only enabled when more facet values are available.
         */
        "withSearch": boolean;
    }
    interface AtomicComponentError {
        "element": HTMLElement;
        "error": Error;
    }
    interface AtomicDateFacet {
        /**
          * The format that the date will be displayed in. See https://day.js.org/docs/en/display/format for formatting details.
         */
        "dateFormat": string;
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId": string;
        /**
          * Specifies the index field whose values the facet should use.
         */
        "field": string;
        /**
          * The non-localized label for the facet.
         */
        "label": string;
        /**
          * The number of values to request for this facet, when there are no manual ranges.
         */
        "numberOfValues": number;
        /**
          * The algorithm that's used for generating the ranges of this facet when they aren't manually defined. The default value of `"even"` generates equally sized facet ranges across all of the results. The value `"equiprobable"` generates facet ranges which vary in size, but have a more balanced number of results in each facet range.
         */
        "rangeAlgorithm": RangeFacetRangeAlgorithm;
    }
    interface AtomicDateRange {
        /**
          * The ending date for the range. It can be expressed as a Javascript date, as a number using epoch time or as a string using the ISO 8601 format.
         */
        "end": Date | string | number;
        /**
          * The starting date for the range. It can be expressed as a Javascript date, as a number using epoch time or as a string using the ISO 8601 format.
         */
        "start": Date | string | number;
    }
    interface AtomicDidYouMean {
    }
    interface AtomicFacet {
        /**
          * The character that separates values of a multi-value field.
         */
        "delimitingCharacter": string;
        /**
          * Whether this facet should contain a search box.
         */
        "enableFacetSearch": boolean;
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId": string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * The non-localized label for the facet.
         */
        "label": string;
        /**
          * The number of values to request for this facet. Also determines the number of additional values to request each time this facet is expanded, and the number of values to display when this facet is collapsed.
         */
        "numberOfValues": number;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are:  * 'score' * 'numeric' * 'occurrences' * 'automatic'
         */
        "sortCriteria": FacetSortCriterion;
    }
    interface AtomicFacetDateInput {
        "bindings": Bindings;
        "filter": DateFilter;
        "filterState": DateFilterState;
        "label": string;
    }
    interface AtomicFacetManager {
    }
    interface AtomicFacetNumberInput {
        "bindings": Bindings;
        "filter": NumericFilter;
        "filterState": NumericFilterState;
        "label": string;
        "type": NumberInputType;
    }
    interface AtomicFacetV1 {
        /**
          * Whether to display the facet values as checkboxes (multiple selection), links (single selection) or boxes (multiple selection). Possible values are 'checkbox', 'link', and 'box'.
         */
        "displayValuesAs": 'checkbox' | 'link' | 'box';
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Specifies if the facet is collapsed.
         */
        "isCollapsed": boolean;
        /**
          * The non-localized label for the facet.
         */
        "label": string;
        /**
          * The number of values to request for this facet. Also determines the number of additional values to request each time more values are shown.
         */
        "numberOfValues": number;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are 'score', 'alphanumeric', 'occurrences', and 'automatic'.
         */
        "sortCriteria": FacetSortCriterion;
        /**
          * Whether this facet should contain a search box. When "true", the search is only enabled when more facet values are available.
         */
        "withSearch": boolean;
    }
    interface AtomicFieldCondition {
        /**
          * A list of conditions that must be fulfilled for this template to be selected.
         */
        "conditions": ResultTemplateCondition[];
        /**
          * Verifies wheter the specified fields are defined.
         */
        "ifDefined"?: string;
        /**
          * Verifies whether the specified fields are not defined.
         */
        "ifNotDefined"?: string;
    }
    interface AtomicFormatCurrency {
        /**
          * The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as "USD" for the US dollar, "EUR" for the euro, or "CNY" for the Chinese RMB. See the current [currency & funds code list](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency).
         */
        "currency": string;
    }
    interface AtomicFormatNumber {
        /**
          * The maximum number of fraction digits to use.
         */
        "maximumFractionDigits"?: number;
        /**
          * The maximum number of significant digits to use.
         */
        "maximumSignificantDigits"?: number;
        /**
          * The minimum number of fraction digits to use.
         */
        "minimumFractionDigits"?: number;
        /**
          * The minimum number of integer digits to use.
         */
        "minimumIntegerDigits"?: number;
        /**
          * The minimum number of significant digits to use.
         */
        "minimumSignificantDigits"?: number;
    }
    interface AtomicFormatUnit {
        /**
          * The unit to use in unit formatting. Leverages the [Intl.NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat) constructor. The unit must be [sanctioned unit identifier](https://tc39.es/proposal-unified-intl-numberformat/section6/locales-currencies-tz_proposed_out.html#sec-issanctionedsimpleunitidentifier)
         */
        "unit": string;
        /**
          * The unit formatting style to use in unit formatting.  * "long" (e.g., 16 litres) * "short" (e.g., 16 l) * "narrow" (e.g., 16l)
         */
        "unitDisplay"?: 'long' | 'short' | 'narrow';
    }
    interface AtomicFrequentlyBoughtTogether {
    }
    interface AtomicIcon {
        /**
          * The SVG icon to display.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly.
         */
        "icon": string;
    }
    interface AtomicLoadMoreResults {
    }
    interface AtomicModal {
        "handleClose": () => void;
    }
    interface AtomicNoResults {
        /**
          * Whether to display a button which cancels the last available action.
         */
        "enableCancelLastAction": boolean;
        /**
          * Whether to display a list of search tips to the user.
         */
        "enableSearchTips": boolean;
    }
    interface AtomicNoResultsV1 {
        /**
          * Whether to display a button which cancels the last available action.
         */
        "enableCancelLastAction": boolean;
    }
    interface AtomicNumericFacet {
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId": string;
        /**
          * Specifies the index field whose values the facet should use.
         */
        "field": string;
        /**
          * The non-localized label for the facet.
         */
        "label": string;
        /**
          * The number of values to request for this facet, when there are no manual ranges.
         */
        "numberOfValues": number;
        /**
          * The algorithm that's used for generating the ranges of this facet when they aren't manually defined. The default value of `"even"` generates equally sized facet ranges across all of the results. The value `"equiprobable"` generates facet ranges which vary in size but have a more balanced number of results within each range.
         */
        "rangeAlgorithm": RangeFacetRangeAlgorithm;
    }
    interface AtomicNumericFacetV1 {
        /**
          * Whether to display the facet values as checkboxes (multiple selection) or links (single selection). Possible values are 'checkbox' and 'link'.
         */
        "displayValuesAs": 'checkbox' | 'link';
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Specifies if the facet is collapsed.
         */
        "isCollapsed": boolean;
        /**
          * The non-localized label for the facet.
         */
        "label": string;
        /**
          * The number of values to request for this facet, when there are no manual ranges. If the number of values is 0, no ranges will be displayed.
         */
        "numberOfValues": number;
        /**
          * The algorithm that's used for generating the ranges of this facet when they aren't manually defined. The default value of `"equiprobable"` generates facet ranges which vary in size but have a more balanced number of results within each range. The value of `"even"` generates equally sized facet ranges across all of the results.
         */
        "rangeAlgorithm": RangeFacetRangeAlgorithm;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are 'ascending' and 'descending'.
         */
        "sortCriteria": RangeFacetSortCriterion;
        /**
          * Whether this facet should contain an input allowing users to set custom ranges. Depending on the field, the input can allow either decimal or integer values.
         */
        "withInput"?: NumberInputType;
    }
    interface AtomicNumericRange {
        /**
          * The ending value for the numeric range.
         */
        "end": number;
        /**
          * Specifies whether the end value should be included in the range.
         */
        "endInclusive": boolean;
        /**
          * The non-localized label for the facet. When defined, it will appear instead of the formatted value.
         */
        "label"?: string;
        /**
          * The starting value for the numeric range.
         */
        "start": number;
    }
    interface AtomicPager {
        /**
          * Specifies how many page buttons to display in the pager.
         */
        "numberOfPages": number;
    }
    interface AtomicPagerV1 {
        /**
          * Specifies how many page buttons to display in the pager.
         */
        "numberOfPages": number;
    }
    interface AtomicQueryError {
    }
    interface AtomicQuerySummary {
        /**
          * Whether to display the duration of the last query execution.
         */
        "enableDuration": boolean;
    }
    interface AtomicRatingFacet {
        /**
          * Whether to display the facet values as checkboxes (multiple selection) or links (single selection). Possible values are 'checkbox' and 'link'.
         */
        "displayValuesAs": 'checkbox' | 'link';
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * The SVG icon to use to display the rating.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly.
         */
        "icon": string;
        /**
          * Specifies if the facet is collapsed.
         */
        "isCollapsed": boolean;
        /**
          * The non-localized label for the facet.
         */
        "label": string;
        /**
          * The maximum value of the field. This value is also used as the number of icons to be displayed.
         */
        "maxValueInIndex": number;
        /**
          * The minimum value of the field.
         */
        "minValueInIndex": number;
        /**
          * The number of intervals to split the index for this facet.
         */
        "numberOfIntervals": number;
    }
    interface AtomicRatingRangeFacet {
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * The SVG icon to use to display the rating.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly.
         */
        "icon": string;
        /**
          * Specifies if the facet is collapsed.
         */
        "isCollapsed": boolean;
        /**
          * The non-localized label for the facet.
         */
        "label": string;
        /**
          * The maximum value of the field. This value is also used as the number of icons to be displayed.
         */
        "maxValueInIndex": number;
        /**
          * The minimum value of the field.
         */
        "minValueInIndex": number;
        /**
          * The number of intervals to split the index for this facet.
         */
        "numberOfIntervals": number;
    }
    interface AtomicRefineModal {
        "enabled": boolean;
    }
    interface AtomicRefineToggle {
    }
    interface AtomicRelevanceInspector {
        /**
          * The Atomic interface bindings, namely the headless search engine and i18n instances.
         */
        "bindings": Bindings;
    }
    interface AtomicResult {
        /**
          * The result content to display.
         */
        "content": string;
        /**
          * The headless search engine.
         */
        "engine": SearchEngine;
        /**
          * The result item.
         */
        "result": Result;
    }
    interface AtomicResultBadgeV1 {
        /**
          * The result field which the component should use. This will look in the Result object first, and then in the Result.raw object for the fields. It is important to include the necessary field in the ResultList component.
         */
        "field"?: string;
        /**
          * Specifies the icon to display.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly
         */
        "icon"?: string;
        /**
          * The text to display instead of the field.
         */
        "label"?: string;
    }
    interface AtomicResultDate {
        /**
          * The result field which the component should use. This will look for the field in the Result object first, and then in the Result.raw object. It is important to include the necessary field in the ResultList component.
         */
        "field": string;
        /**
          * Available formats: https://day.js.org/docs/en/display/format
         */
        "format": string;
    }
    interface AtomicResultFieldsListV1 {
    }
    interface AtomicResultIcon {
        /**
          * Specifies the icon to display from the list of available icons.  By default, this will parse the `objecttype` and `filetype` fields to find a matching icon. If none are available, it will use the `custom` icon.
         */
        "icon"?: string;
    }
    interface AtomicResultIconV1 {
    }
    interface AtomicResultImage {
        /**
          * The result field which the component should use. This will look for the field in the Result object first, then in the Result.raw object. It is important to include the necessary field in the ResultList component.
         */
        "field": string;
    }
    interface AtomicResultLink {
        /**
          * Where to display the linked URL, as the name for a browsing context (a tab, window, or <iframe>).  The following keywords have special meanings:  * _self: the current browsing context. (Default) * _blank: usually a new tab, but users can configure their browsers to open a new window instead. * _parent: the parent of the current browsing context. If there's no parent, this behaves as `_self`. * _top: the topmost browsing context (the "highest" context that’s an ancestor of the current one). If there are no ancestors, this behaves as `_self`.
         */
        "target": string;
    }
    interface AtomicResultList {
        /**
          * A list of fields to include in the query results, separated by commas.
         */
        "fieldsToInclude": string;
    }
    interface AtomicResultListPlaceholder {
    }
    interface AtomicResultListV1 {
        "density": ResultDisplayDensity;
        "display": ResultDisplayLayout;
        /**
          * A list of fields to include in the query results, separated by commas.
         */
        "fieldsToInclude": string;
        "image": ResultDisplayImageSize;
    }
    interface AtomicResultMultiValueText {
        /**
          * The field that the component should use. The component will try to find this field in the `Result.raw` object unless it finds it in the `Result` object first. Make sure this field is present in the `fieldsToInclude` property of the `atomic-result-list` component.
         */
        "field": string;
        /**
          * The maximum number of field values to display. If there are _n_ more values than the specified maximum, the last displayed value will be "_n_ more...".
         */
        "maxValuesToDisplay": number;
    }
    interface AtomicResultNumber {
        /**
          * The result field which the component should use. This will look for the fields in the Result object first, and then in the Result.raw object. It is important to include the necessary field in the ResultList component.
         */
        "field": string;
        /**
          * The maximum number of fraction digits to use.
         */
        "maximumFractionDigits"?: number;
        /**
          * The maximum number of significant digits to use.
         */
        "maximumSignificantDigits"?: number;
        /**
          * The minimum number of fraction digits to use.
         */
        "minimumFractionDigits"?: number;
        /**
          * The minimum number of integer digits to use.
         */
        "minimumIntegerDigits"?: number;
        /**
          * The minimum number of significant digits to use.
         */
        "minimumSignificantDigits"?: number;
    }
    interface AtomicResultNumberV1 {
        /**
          * The field that the component should use. The component will try to find this field in the `Result.raw` object unless it finds it in the `Result` object first. Make sure this field is present in the `fieldsToInclude` property of the `atomic-result-list` component.
         */
        "field": string;
    }
    interface AtomicResultPlaceholderV1 {
        "density": ResultDisplayDensity;
        "display": ResultDisplayLayout;
        "image": ResultDisplayImageSize;
    }
    interface AtomicResultPrice {
        /**
          * The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as "USD" for the US dollar, "EUR" for the euro, or "CNY" for the Chinese RMB — see the [Current currency & funds code list](http://www.currency-iso.org/en/home/tables/table-a1.html).
         */
        "currency": string;
        /**
          * The result field which the component should use. This will look in the Result object first, and then in the Result.raw object for the fields. It is important to include the necessary field in the ResultList component.
         */
        "field": string;
    }
    interface AtomicResultPrintableUri {
        /**
          * The maximum number of Uri parts to display. This has to be over the minimum of `3` in order to be effective. Putting `Infinity` will disable the ellipsis.
         */
        "maxNumberOfParts": number;
    }
    interface AtomicResultQuickview {
        /**
          * The maximum preview size to retrieve, in bytes. By default, the full preview is retrieved.
         */
        "maximumPreviewSize"?: number | undefined;
    }
    interface AtomicResultRatingV1 {
        /**
          * The field whose values you want to display as a rating.
         */
        "field": string;
        /**
          * The SVG icon to use to display the rating.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly
         */
        "icon": string;
        /**
          * The maximum value of the field. This value is also used as the number of icons to be displayed.
         */
        "maxValueInIndex": number;
    }
    interface AtomicResultSectionActions {
    }
    interface AtomicResultSectionBadges {
    }
    interface AtomicResultSectionBottomMetadata {
    }
    interface AtomicResultSectionEmphasized {
    }
    interface AtomicResultSectionExcerpt {
    }
    interface AtomicResultSectionTitle {
    }
    interface AtomicResultSectionTitleMetadata {
    }
    interface AtomicResultSectionVisual {
    }
    interface AtomicResultTablePlaceholderV1 {
        "density": ResultDisplayDensity;
        "image": ResultDisplayImageSize;
        "rows": number;
    }
    interface AtomicResultTemplate {
        /**
          * A function that must return true on results for the result template to apply.  For example, a template with the following condition only applies to results whose `title` contains `singapore`: `[(result) => /singapore/i.test(result.title)]`
         */
        "conditions": ResultTemplateCondition[];
        /**
          * Gets the appropriate result template based on conditions applied.
         */
        "getTemplate": () => Promise<ResultTemplate<string> | null>;
    }
    interface AtomicResultText {
        /**
          * The locale key for the text to display when the configured field has no value.
         */
        "default"?: string;
        /**
          * The result field which the component should use. This will look in the Result object first, and then in the Result.raw object for the fields. It is important to include the necessary field in the ResultList component.
         */
        "field": string;
        /**
          * If this is set to true, it will look for the corresponding highlight property and use it if available.
         */
        "shouldHighlight": boolean;
    }
    interface AtomicResultV1 {
        /**
          * The result content to display.
         */
        "content": string;
        /**
          * How large or small results should be.
         */
        "density": ResultDisplayDensity;
        /**
          * How results should be displayed.
         */
        "display": ResultDisplayLayout;
        /**
          * The headless search engine.
         */
        "engine": SearchEngine;
        /**
          * How large or small the visual section of results should be.
         */
        "image": ResultDisplayImageSize;
        /**
          * The result item.
         */
        "result": Result;
    }
    interface AtomicResultsPerPage {
        /**
          * A list of choices for the number of results to display per page, separated by commas.
         */
        "choicesDisplayed": string;
        /**
          * The initial selection for the number of result per page. This should be part of the `choicesDisplayed` option. By default, this is set to the first value in `choicesDisplayed`.
         */
        "initialChoice"?: number;
    }
    interface AtomicResultsPerPageV1 {
        /**
          * A list of choices for the number of results to display per page, separated by commas.
         */
        "choicesDisplayed": string;
        /**
          * The initial selection for the number of result per page. This should be part of the `choicesDisplayed` option. By default, this is set to the first value in `choicesDisplayed`.
         */
        "initialChoice"?: number;
    }
    interface AtomicSearchBox {
        /**
          * Whether the submit button is placed before the input.
         */
        "leadingSubmitButton": boolean;
        /**
          * The maximum number of suggestions to display.
         */
        "numberOfSuggestions": number;
        /**
          * The placeholder text to display in the search box input area.
         */
        "placeholder": string;
    }
    interface AtomicSearchInterface {
        /**
          * The search interface headless engine.
         */
        "engine"?: SearchEngine;
        /**
          * Executes the first search and logs the interface load event to analytics, after initializing connection to the headless search engine.
         */
        "executeFirstSearch": () => Promise<void>;
        /**
          * The search interface i18next instance.
         */
        "i18n": i18n;
        /**
          * Initializes the connection with the headless search engine using options for `accessToken` (required), `organizationId` (required), `renewAccessToken`, and `platformUrl`.
         */
        "initialize": (options: InitializationOptions) => Promise<void>;
        /**
          * The search interface language.
         */
        "language": string;
        /**
          * The severity level of the messages to log in the console.
         */
        "logLevel"?: LogLevel;
        /**
          * The search interface [query pipeline](https://docs.coveo.com/en/180/).
         */
        "pipeline": string;
        /**
          * Whether the state should be reflected in the URL parameters.
         */
        "reflectStateInUrl": boolean;
        /**
          * The CSS selector for the container where the interface will scroll back to.
         */
        "scrollContainer": string;
        /**
          * The search interface [search hub](https://docs.coveo.com/en/1342/).
         */
        "searchHub": string;
        /**
          * The [tz database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) identifier of the time zone to use to correctly interpret dates in the query expression, facets, and result items. By default, the timezone will be [guessed](https://day.js.org/docs/en/timezone/guessing-user-timezone).
          * @example America/Montreal
         */
        "timezone"?: string;
    }
    interface AtomicSizeConditionV1 {
        /**
          * The maximum height (exclusively) required to display children.  E.g.: `3rem`, `500px` or `30vw`.
         */
        "maximumHeightExclusive"?: string;
        /**
          * The maximum height (inclusively) required to display children.  E.g.: `3rem`, `500px` or `30vw`.
         */
        "maximumHeightInclusive"?: string;
        /**
          * The maximum width (exclusively) required to display children.  E.g.: `3rem`, `500px` or `30vw`.
         */
        "maximumWidthExclusive"?: string;
        /**
          * The maximum width (inclusively) required to display children.  E.g.: `3rem`, `500px` or `30vw`.
         */
        "maximumWidthInclusive"?: string;
        /**
          * The minimum height (exclusively) required to display children.  E.g.: `3rem`, `500px` or `30vw`.
         */
        "minimumHeightExclusive"?: string;
        /**
          * The minimum height (inclusively) required to display children.  E.g.: `3rem`, `500px` or `30vw`.
         */
        "minimumHeightInclusive"?: string;
        /**
          * The minimum width (exclusively) required to display children.  E.g.: `3rem`, `500px` or `30vw`.
         */
        "minimumWidthExclusive"?: string;
        /**
          * The minimum width (inclusively) required to display children.  E.g.: `3rem`, `500px` or `30vw`.
         */
        "minimumWidthInclusive"?: string;
    }
    interface AtomicSortDropdown {
    }
    interface AtomicSortExpression {
        /**
          * The non-localized caption to display for this expression.
         */
        "caption": string;
        /**
          * One or more sort criteria that the end user can select or toggle between.  The available sort criteria are:  * `relevancy` * `date ascending`/`date descending` * `qre` * `<FIELD> ascending`/`<FIELD> descending`, where you replace `<FIELD>` with the name of a sortable field in your index (e.g., `criteria="size ascending"`).  You can specify multiple sort criteria to be used in the same request by separating them with a comma (e.g., `criteria="size ascending, date ascending"`).
         */
        "expression": string;
    }
    interface AtomicTableCellV1 {
        /**
          * The result content to display.
         */
        "content": string;
        /**
          * The result item.
         */
        "result": Result;
    }
    interface AtomicTableElementV1 {
        /**
          * The label to display in the header of this column.
         */
        "label": string;
    }
    interface AtomicText {
        /**
          * The count value used for plurals.
         */
        "count"?: number;
        /**
          * The string key value.
         */
        "value": string;
    }
    interface AtomicTimeframe {
        /**
          * The amount of units from which to count.  E.g., 10 days, 1 year, etc.
         */
        "amount": number;
        /**
          * The non-localized label for the timeframe. When defined, it will appear instead of the formatted value.
         */
        "label"?: string;
        /**
          * The relative period of time to now.
         */
        "period": 'past' | 'next';
        /**
          * The unit used to define: - the start date of the timeframe, if the period is `past` - the end date of the timeframe, if the period is `future`
         */
        "unit": RelativeDateUnit;
    }
    interface AtomicTimeframeFacet {
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Specifies if the facet is collapsed.
         */
        "isCollapsed": boolean;
        /**
          * The non-localized label for the facet.
         */
        "label": string;
        /**
          * Whether this facet should contain an datepicker allowing users to set custom ranges.
         */
        "withDatePicker": boolean;
    }
}
declare global {
    interface HTMLAtomicBreadboxElement extends Components.AtomicBreadbox, HTMLStencilElement {
    }
    var HTMLAtomicBreadboxElement: {
        prototype: HTMLAtomicBreadboxElement;
        new (): HTMLAtomicBreadboxElement;
    };
    interface HTMLAtomicBreadcrumbManagerElement extends Components.AtomicBreadcrumbManager, HTMLStencilElement {
    }
    var HTMLAtomicBreadcrumbManagerElement: {
        prototype: HTMLAtomicBreadcrumbManagerElement;
        new (): HTMLAtomicBreadcrumbManagerElement;
    };
    interface HTMLAtomicCategoryFacetElement extends Components.AtomicCategoryFacet, HTMLStencilElement {
    }
    var HTMLAtomicCategoryFacetElement: {
        prototype: HTMLAtomicCategoryFacetElement;
        new (): HTMLAtomicCategoryFacetElement;
    };
    interface HTMLAtomicCategoryFacetV1Element extends Components.AtomicCategoryFacetV1, HTMLStencilElement {
    }
    var HTMLAtomicCategoryFacetV1Element: {
        prototype: HTMLAtomicCategoryFacetV1Element;
        new (): HTMLAtomicCategoryFacetV1Element;
    };
    interface HTMLAtomicColorFacetElement extends Components.AtomicColorFacet, HTMLStencilElement {
    }
    var HTMLAtomicColorFacetElement: {
        prototype: HTMLAtomicColorFacetElement;
        new (): HTMLAtomicColorFacetElement;
    };
    interface HTMLAtomicComponentErrorElement extends Components.AtomicComponentError, HTMLStencilElement {
    }
    var HTMLAtomicComponentErrorElement: {
        prototype: HTMLAtomicComponentErrorElement;
        new (): HTMLAtomicComponentErrorElement;
    };
    interface HTMLAtomicDateFacetElement extends Components.AtomicDateFacet, HTMLStencilElement {
    }
    var HTMLAtomicDateFacetElement: {
        prototype: HTMLAtomicDateFacetElement;
        new (): HTMLAtomicDateFacetElement;
    };
    interface HTMLAtomicDateRangeElement extends Components.AtomicDateRange, HTMLStencilElement {
    }
    var HTMLAtomicDateRangeElement: {
        prototype: HTMLAtomicDateRangeElement;
        new (): HTMLAtomicDateRangeElement;
    };
    interface HTMLAtomicDidYouMeanElement extends Components.AtomicDidYouMean, HTMLStencilElement {
    }
    var HTMLAtomicDidYouMeanElement: {
        prototype: HTMLAtomicDidYouMeanElement;
        new (): HTMLAtomicDidYouMeanElement;
    };
    interface HTMLAtomicFacetElement extends Components.AtomicFacet, HTMLStencilElement {
    }
    var HTMLAtomicFacetElement: {
        prototype: HTMLAtomicFacetElement;
        new (): HTMLAtomicFacetElement;
    };
    interface HTMLAtomicFacetDateInputElement extends Components.AtomicFacetDateInput, HTMLStencilElement {
    }
    var HTMLAtomicFacetDateInputElement: {
        prototype: HTMLAtomicFacetDateInputElement;
        new (): HTMLAtomicFacetDateInputElement;
    };
    interface HTMLAtomicFacetManagerElement extends Components.AtomicFacetManager, HTMLStencilElement {
    }
    var HTMLAtomicFacetManagerElement: {
        prototype: HTMLAtomicFacetManagerElement;
        new (): HTMLAtomicFacetManagerElement;
    };
    interface HTMLAtomicFacetNumberInputElement extends Components.AtomicFacetNumberInput, HTMLStencilElement {
    }
    var HTMLAtomicFacetNumberInputElement: {
        prototype: HTMLAtomicFacetNumberInputElement;
        new (): HTMLAtomicFacetNumberInputElement;
    };
    interface HTMLAtomicFacetV1Element extends Components.AtomicFacetV1, HTMLStencilElement {
    }
    var HTMLAtomicFacetV1Element: {
        prototype: HTMLAtomicFacetV1Element;
        new (): HTMLAtomicFacetV1Element;
    };
    interface HTMLAtomicFieldConditionElement extends Components.AtomicFieldCondition, HTMLStencilElement {
    }
    var HTMLAtomicFieldConditionElement: {
        prototype: HTMLAtomicFieldConditionElement;
        new (): HTMLAtomicFieldConditionElement;
    };
    interface HTMLAtomicFormatCurrencyElement extends Components.AtomicFormatCurrency, HTMLStencilElement {
    }
    var HTMLAtomicFormatCurrencyElement: {
        prototype: HTMLAtomicFormatCurrencyElement;
        new (): HTMLAtomicFormatCurrencyElement;
    };
    interface HTMLAtomicFormatNumberElement extends Components.AtomicFormatNumber, HTMLStencilElement {
    }
    var HTMLAtomicFormatNumberElement: {
        prototype: HTMLAtomicFormatNumberElement;
        new (): HTMLAtomicFormatNumberElement;
    };
    interface HTMLAtomicFormatUnitElement extends Components.AtomicFormatUnit, HTMLStencilElement {
    }
    var HTMLAtomicFormatUnitElement: {
        prototype: HTMLAtomicFormatUnitElement;
        new (): HTMLAtomicFormatUnitElement;
    };
    interface HTMLAtomicFrequentlyBoughtTogetherElement extends Components.AtomicFrequentlyBoughtTogether, HTMLStencilElement {
    }
    var HTMLAtomicFrequentlyBoughtTogetherElement: {
        prototype: HTMLAtomicFrequentlyBoughtTogetherElement;
        new (): HTMLAtomicFrequentlyBoughtTogetherElement;
    };
    interface HTMLAtomicIconElement extends Components.AtomicIcon, HTMLStencilElement {
    }
    var HTMLAtomicIconElement: {
        prototype: HTMLAtomicIconElement;
        new (): HTMLAtomicIconElement;
    };
    interface HTMLAtomicLoadMoreResultsElement extends Components.AtomicLoadMoreResults, HTMLStencilElement {
    }
    var HTMLAtomicLoadMoreResultsElement: {
        prototype: HTMLAtomicLoadMoreResultsElement;
        new (): HTMLAtomicLoadMoreResultsElement;
    };
    interface HTMLAtomicModalElement extends Components.AtomicModal, HTMLStencilElement {
    }
    var HTMLAtomicModalElement: {
        prototype: HTMLAtomicModalElement;
        new (): HTMLAtomicModalElement;
    };
    interface HTMLAtomicNoResultsElement extends Components.AtomicNoResults, HTMLStencilElement {
    }
    var HTMLAtomicNoResultsElement: {
        prototype: HTMLAtomicNoResultsElement;
        new (): HTMLAtomicNoResultsElement;
    };
    interface HTMLAtomicNoResultsV1Element extends Components.AtomicNoResultsV1, HTMLStencilElement {
    }
    var HTMLAtomicNoResultsV1Element: {
        prototype: HTMLAtomicNoResultsV1Element;
        new (): HTMLAtomicNoResultsV1Element;
    };
    interface HTMLAtomicNumericFacetElement extends Components.AtomicNumericFacet, HTMLStencilElement {
    }
    var HTMLAtomicNumericFacetElement: {
        prototype: HTMLAtomicNumericFacetElement;
        new (): HTMLAtomicNumericFacetElement;
    };
    interface HTMLAtomicNumericFacetV1Element extends Components.AtomicNumericFacetV1, HTMLStencilElement {
    }
    var HTMLAtomicNumericFacetV1Element: {
        prototype: HTMLAtomicNumericFacetV1Element;
        new (): HTMLAtomicNumericFacetV1Element;
    };
    interface HTMLAtomicNumericRangeElement extends Components.AtomicNumericRange, HTMLStencilElement {
    }
    var HTMLAtomicNumericRangeElement: {
        prototype: HTMLAtomicNumericRangeElement;
        new (): HTMLAtomicNumericRangeElement;
    };
    interface HTMLAtomicPagerElement extends Components.AtomicPager, HTMLStencilElement {
    }
    var HTMLAtomicPagerElement: {
        prototype: HTMLAtomicPagerElement;
        new (): HTMLAtomicPagerElement;
    };
    interface HTMLAtomicPagerV1Element extends Components.AtomicPagerV1, HTMLStencilElement {
    }
    var HTMLAtomicPagerV1Element: {
        prototype: HTMLAtomicPagerV1Element;
        new (): HTMLAtomicPagerV1Element;
    };
    interface HTMLAtomicQueryErrorElement extends Components.AtomicQueryError, HTMLStencilElement {
    }
    var HTMLAtomicQueryErrorElement: {
        prototype: HTMLAtomicQueryErrorElement;
        new (): HTMLAtomicQueryErrorElement;
    };
    interface HTMLAtomicQuerySummaryElement extends Components.AtomicQuerySummary, HTMLStencilElement {
    }
    var HTMLAtomicQuerySummaryElement: {
        prototype: HTMLAtomicQuerySummaryElement;
        new (): HTMLAtomicQuerySummaryElement;
    };
    interface HTMLAtomicRatingFacetElement extends Components.AtomicRatingFacet, HTMLStencilElement {
    }
    var HTMLAtomicRatingFacetElement: {
        prototype: HTMLAtomicRatingFacetElement;
        new (): HTMLAtomicRatingFacetElement;
    };
    interface HTMLAtomicRatingRangeFacetElement extends Components.AtomicRatingRangeFacet, HTMLStencilElement {
    }
    var HTMLAtomicRatingRangeFacetElement: {
        prototype: HTMLAtomicRatingRangeFacetElement;
        new (): HTMLAtomicRatingRangeFacetElement;
    };
    interface HTMLAtomicRefineModalElement extends Components.AtomicRefineModal, HTMLStencilElement {
    }
    var HTMLAtomicRefineModalElement: {
        prototype: HTMLAtomicRefineModalElement;
        new (): HTMLAtomicRefineModalElement;
    };
    interface HTMLAtomicRefineToggleElement extends Components.AtomicRefineToggle, HTMLStencilElement {
    }
    var HTMLAtomicRefineToggleElement: {
        prototype: HTMLAtomicRefineToggleElement;
        new (): HTMLAtomicRefineToggleElement;
    };
    interface HTMLAtomicRelevanceInspectorElement extends Components.AtomicRelevanceInspector, HTMLStencilElement {
    }
    var HTMLAtomicRelevanceInspectorElement: {
        prototype: HTMLAtomicRelevanceInspectorElement;
        new (): HTMLAtomicRelevanceInspectorElement;
    };
    interface HTMLAtomicResultElement extends Components.AtomicResult, HTMLStencilElement {
    }
    var HTMLAtomicResultElement: {
        prototype: HTMLAtomicResultElement;
        new (): HTMLAtomicResultElement;
    };
    interface HTMLAtomicResultBadgeV1Element extends Components.AtomicResultBadgeV1, HTMLStencilElement {
    }
    var HTMLAtomicResultBadgeV1Element: {
        prototype: HTMLAtomicResultBadgeV1Element;
        new (): HTMLAtomicResultBadgeV1Element;
    };
    interface HTMLAtomicResultDateElement extends Components.AtomicResultDate, HTMLStencilElement {
    }
    var HTMLAtomicResultDateElement: {
        prototype: HTMLAtomicResultDateElement;
        new (): HTMLAtomicResultDateElement;
    };
    interface HTMLAtomicResultFieldsListV1Element extends Components.AtomicResultFieldsListV1, HTMLStencilElement {
    }
    var HTMLAtomicResultFieldsListV1Element: {
        prototype: HTMLAtomicResultFieldsListV1Element;
        new (): HTMLAtomicResultFieldsListV1Element;
    };
    interface HTMLAtomicResultIconElement extends Components.AtomicResultIcon, HTMLStencilElement {
    }
    var HTMLAtomicResultIconElement: {
        prototype: HTMLAtomicResultIconElement;
        new (): HTMLAtomicResultIconElement;
    };
    interface HTMLAtomicResultIconV1Element extends Components.AtomicResultIconV1, HTMLStencilElement {
    }
    var HTMLAtomicResultIconV1Element: {
        prototype: HTMLAtomicResultIconV1Element;
        new (): HTMLAtomicResultIconV1Element;
    };
    interface HTMLAtomicResultImageElement extends Components.AtomicResultImage, HTMLStencilElement {
    }
    var HTMLAtomicResultImageElement: {
        prototype: HTMLAtomicResultImageElement;
        new (): HTMLAtomicResultImageElement;
    };
    interface HTMLAtomicResultLinkElement extends Components.AtomicResultLink, HTMLStencilElement {
    }
    var HTMLAtomicResultLinkElement: {
        prototype: HTMLAtomicResultLinkElement;
        new (): HTMLAtomicResultLinkElement;
    };
    interface HTMLAtomicResultListElement extends Components.AtomicResultList, HTMLStencilElement {
    }
    var HTMLAtomicResultListElement: {
        prototype: HTMLAtomicResultListElement;
        new (): HTMLAtomicResultListElement;
    };
    interface HTMLAtomicResultListPlaceholderElement extends Components.AtomicResultListPlaceholder, HTMLStencilElement {
    }
    var HTMLAtomicResultListPlaceholderElement: {
        prototype: HTMLAtomicResultListPlaceholderElement;
        new (): HTMLAtomicResultListPlaceholderElement;
    };
    interface HTMLAtomicResultListV1Element extends Components.AtomicResultListV1, HTMLStencilElement {
    }
    var HTMLAtomicResultListV1Element: {
        prototype: HTMLAtomicResultListV1Element;
        new (): HTMLAtomicResultListV1Element;
    };
    interface HTMLAtomicResultMultiValueTextElement extends Components.AtomicResultMultiValueText, HTMLStencilElement {
    }
    var HTMLAtomicResultMultiValueTextElement: {
        prototype: HTMLAtomicResultMultiValueTextElement;
        new (): HTMLAtomicResultMultiValueTextElement;
    };
    interface HTMLAtomicResultNumberElement extends Components.AtomicResultNumber, HTMLStencilElement {
    }
    var HTMLAtomicResultNumberElement: {
        prototype: HTMLAtomicResultNumberElement;
        new (): HTMLAtomicResultNumberElement;
    };
    interface HTMLAtomicResultNumberV1Element extends Components.AtomicResultNumberV1, HTMLStencilElement {
    }
    var HTMLAtomicResultNumberV1Element: {
        prototype: HTMLAtomicResultNumberV1Element;
        new (): HTMLAtomicResultNumberV1Element;
    };
    interface HTMLAtomicResultPlaceholderV1Element extends Components.AtomicResultPlaceholderV1, HTMLStencilElement {
    }
    var HTMLAtomicResultPlaceholderV1Element: {
        prototype: HTMLAtomicResultPlaceholderV1Element;
        new (): HTMLAtomicResultPlaceholderV1Element;
    };
    interface HTMLAtomicResultPriceElement extends Components.AtomicResultPrice, HTMLStencilElement {
    }
    var HTMLAtomicResultPriceElement: {
        prototype: HTMLAtomicResultPriceElement;
        new (): HTMLAtomicResultPriceElement;
    };
    interface HTMLAtomicResultPrintableUriElement extends Components.AtomicResultPrintableUri, HTMLStencilElement {
    }
    var HTMLAtomicResultPrintableUriElement: {
        prototype: HTMLAtomicResultPrintableUriElement;
        new (): HTMLAtomicResultPrintableUriElement;
    };
    interface HTMLAtomicResultQuickviewElement extends Components.AtomicResultQuickview, HTMLStencilElement {
    }
    var HTMLAtomicResultQuickviewElement: {
        prototype: HTMLAtomicResultQuickviewElement;
        new (): HTMLAtomicResultQuickviewElement;
    };
    interface HTMLAtomicResultRatingV1Element extends Components.AtomicResultRatingV1, HTMLStencilElement {
    }
    var HTMLAtomicResultRatingV1Element: {
        prototype: HTMLAtomicResultRatingV1Element;
        new (): HTMLAtomicResultRatingV1Element;
    };
    interface HTMLAtomicResultSectionActionsElement extends Components.AtomicResultSectionActions, HTMLStencilElement {
    }
    var HTMLAtomicResultSectionActionsElement: {
        prototype: HTMLAtomicResultSectionActionsElement;
        new (): HTMLAtomicResultSectionActionsElement;
    };
    interface HTMLAtomicResultSectionBadgesElement extends Components.AtomicResultSectionBadges, HTMLStencilElement {
    }
    var HTMLAtomicResultSectionBadgesElement: {
        prototype: HTMLAtomicResultSectionBadgesElement;
        new (): HTMLAtomicResultSectionBadgesElement;
    };
    interface HTMLAtomicResultSectionBottomMetadataElement extends Components.AtomicResultSectionBottomMetadata, HTMLStencilElement {
    }
    var HTMLAtomicResultSectionBottomMetadataElement: {
        prototype: HTMLAtomicResultSectionBottomMetadataElement;
        new (): HTMLAtomicResultSectionBottomMetadataElement;
    };
    interface HTMLAtomicResultSectionEmphasizedElement extends Components.AtomicResultSectionEmphasized, HTMLStencilElement {
    }
    var HTMLAtomicResultSectionEmphasizedElement: {
        prototype: HTMLAtomicResultSectionEmphasizedElement;
        new (): HTMLAtomicResultSectionEmphasizedElement;
    };
    interface HTMLAtomicResultSectionExcerptElement extends Components.AtomicResultSectionExcerpt, HTMLStencilElement {
    }
    var HTMLAtomicResultSectionExcerptElement: {
        prototype: HTMLAtomicResultSectionExcerptElement;
        new (): HTMLAtomicResultSectionExcerptElement;
    };
    interface HTMLAtomicResultSectionTitleElement extends Components.AtomicResultSectionTitle, HTMLStencilElement {
    }
    var HTMLAtomicResultSectionTitleElement: {
        prototype: HTMLAtomicResultSectionTitleElement;
        new (): HTMLAtomicResultSectionTitleElement;
    };
    interface HTMLAtomicResultSectionTitleMetadataElement extends Components.AtomicResultSectionTitleMetadata, HTMLStencilElement {
    }
    var HTMLAtomicResultSectionTitleMetadataElement: {
        prototype: HTMLAtomicResultSectionTitleMetadataElement;
        new (): HTMLAtomicResultSectionTitleMetadataElement;
    };
    interface HTMLAtomicResultSectionVisualElement extends Components.AtomicResultSectionVisual, HTMLStencilElement {
    }
    var HTMLAtomicResultSectionVisualElement: {
        prototype: HTMLAtomicResultSectionVisualElement;
        new (): HTMLAtomicResultSectionVisualElement;
    };
    interface HTMLAtomicResultTablePlaceholderV1Element extends Components.AtomicResultTablePlaceholderV1, HTMLStencilElement {
    }
    var HTMLAtomicResultTablePlaceholderV1Element: {
        prototype: HTMLAtomicResultTablePlaceholderV1Element;
        new (): HTMLAtomicResultTablePlaceholderV1Element;
    };
    interface HTMLAtomicResultTemplateElement extends Components.AtomicResultTemplate, HTMLStencilElement {
    }
    var HTMLAtomicResultTemplateElement: {
        prototype: HTMLAtomicResultTemplateElement;
        new (): HTMLAtomicResultTemplateElement;
    };
    interface HTMLAtomicResultTextElement extends Components.AtomicResultText, HTMLStencilElement {
    }
    var HTMLAtomicResultTextElement: {
        prototype: HTMLAtomicResultTextElement;
        new (): HTMLAtomicResultTextElement;
    };
    interface HTMLAtomicResultV1Element extends Components.AtomicResultV1, HTMLStencilElement {
    }
    var HTMLAtomicResultV1Element: {
        prototype: HTMLAtomicResultV1Element;
        new (): HTMLAtomicResultV1Element;
    };
    interface HTMLAtomicResultsPerPageElement extends Components.AtomicResultsPerPage, HTMLStencilElement {
    }
    var HTMLAtomicResultsPerPageElement: {
        prototype: HTMLAtomicResultsPerPageElement;
        new (): HTMLAtomicResultsPerPageElement;
    };
    interface HTMLAtomicResultsPerPageV1Element extends Components.AtomicResultsPerPageV1, HTMLStencilElement {
    }
    var HTMLAtomicResultsPerPageV1Element: {
        prototype: HTMLAtomicResultsPerPageV1Element;
        new (): HTMLAtomicResultsPerPageV1Element;
    };
    interface HTMLAtomicSearchBoxElement extends Components.AtomicSearchBox, HTMLStencilElement {
    }
    var HTMLAtomicSearchBoxElement: {
        prototype: HTMLAtomicSearchBoxElement;
        new (): HTMLAtomicSearchBoxElement;
    };
    interface HTMLAtomicSearchInterfaceElement extends Components.AtomicSearchInterface, HTMLStencilElement {
    }
    var HTMLAtomicSearchInterfaceElement: {
        prototype: HTMLAtomicSearchInterfaceElement;
        new (): HTMLAtomicSearchInterfaceElement;
    };
    interface HTMLAtomicSizeConditionV1Element extends Components.AtomicSizeConditionV1, HTMLStencilElement {
    }
    var HTMLAtomicSizeConditionV1Element: {
        prototype: HTMLAtomicSizeConditionV1Element;
        new (): HTMLAtomicSizeConditionV1Element;
    };
    interface HTMLAtomicSortDropdownElement extends Components.AtomicSortDropdown, HTMLStencilElement {
    }
    var HTMLAtomicSortDropdownElement: {
        prototype: HTMLAtomicSortDropdownElement;
        new (): HTMLAtomicSortDropdownElement;
    };
    interface HTMLAtomicSortExpressionElement extends Components.AtomicSortExpression, HTMLStencilElement {
    }
    var HTMLAtomicSortExpressionElement: {
        prototype: HTMLAtomicSortExpressionElement;
        new (): HTMLAtomicSortExpressionElement;
    };
    interface HTMLAtomicTableCellV1Element extends Components.AtomicTableCellV1, HTMLStencilElement {
    }
    var HTMLAtomicTableCellV1Element: {
        prototype: HTMLAtomicTableCellV1Element;
        new (): HTMLAtomicTableCellV1Element;
    };
    interface HTMLAtomicTableElementV1Element extends Components.AtomicTableElementV1, HTMLStencilElement {
    }
    var HTMLAtomicTableElementV1Element: {
        prototype: HTMLAtomicTableElementV1Element;
        new (): HTMLAtomicTableElementV1Element;
    };
    interface HTMLAtomicTextElement extends Components.AtomicText, HTMLStencilElement {
    }
    var HTMLAtomicTextElement: {
        prototype: HTMLAtomicTextElement;
        new (): HTMLAtomicTextElement;
    };
    interface HTMLAtomicTimeframeElement extends Components.AtomicTimeframe, HTMLStencilElement {
    }
    var HTMLAtomicTimeframeElement: {
        prototype: HTMLAtomicTimeframeElement;
        new (): HTMLAtomicTimeframeElement;
    };
    interface HTMLAtomicTimeframeFacetElement extends Components.AtomicTimeframeFacet, HTMLStencilElement {
    }
    var HTMLAtomicTimeframeFacetElement: {
        prototype: HTMLAtomicTimeframeFacetElement;
        new (): HTMLAtomicTimeframeFacetElement;
    };
    interface HTMLElementTagNameMap {
        "atomic-breadbox": HTMLAtomicBreadboxElement;
        "atomic-breadcrumb-manager": HTMLAtomicBreadcrumbManagerElement;
        "atomic-category-facet": HTMLAtomicCategoryFacetElement;
        "atomic-category-facet-v1": HTMLAtomicCategoryFacetV1Element;
        "atomic-color-facet": HTMLAtomicColorFacetElement;
        "atomic-component-error": HTMLAtomicComponentErrorElement;
        "atomic-date-facet": HTMLAtomicDateFacetElement;
        "atomic-date-range": HTMLAtomicDateRangeElement;
        "atomic-did-you-mean": HTMLAtomicDidYouMeanElement;
        "atomic-facet": HTMLAtomicFacetElement;
        "atomic-facet-date-input": HTMLAtomicFacetDateInputElement;
        "atomic-facet-manager": HTMLAtomicFacetManagerElement;
        "atomic-facet-number-input": HTMLAtomicFacetNumberInputElement;
        "atomic-facet-v1": HTMLAtomicFacetV1Element;
        "atomic-field-condition": HTMLAtomicFieldConditionElement;
        "atomic-format-currency": HTMLAtomicFormatCurrencyElement;
        "atomic-format-number": HTMLAtomicFormatNumberElement;
        "atomic-format-unit": HTMLAtomicFormatUnitElement;
        "atomic-frequently-bought-together": HTMLAtomicFrequentlyBoughtTogetherElement;
        "atomic-icon": HTMLAtomicIconElement;
        "atomic-load-more-results": HTMLAtomicLoadMoreResultsElement;
        "atomic-modal": HTMLAtomicModalElement;
        "atomic-no-results": HTMLAtomicNoResultsElement;
        "atomic-no-results-v1": HTMLAtomicNoResultsV1Element;
        "atomic-numeric-facet": HTMLAtomicNumericFacetElement;
        "atomic-numeric-facet-v1": HTMLAtomicNumericFacetV1Element;
        "atomic-numeric-range": HTMLAtomicNumericRangeElement;
        "atomic-pager": HTMLAtomicPagerElement;
        "atomic-pager-v1": HTMLAtomicPagerV1Element;
        "atomic-query-error": HTMLAtomicQueryErrorElement;
        "atomic-query-summary": HTMLAtomicQuerySummaryElement;
        "atomic-rating-facet": HTMLAtomicRatingFacetElement;
        "atomic-rating-range-facet": HTMLAtomicRatingRangeFacetElement;
        "atomic-refine-modal": HTMLAtomicRefineModalElement;
        "atomic-refine-toggle": HTMLAtomicRefineToggleElement;
        "atomic-relevance-inspector": HTMLAtomicRelevanceInspectorElement;
        "atomic-result": HTMLAtomicResultElement;
        "atomic-result-badge-v1": HTMLAtomicResultBadgeV1Element;
        "atomic-result-date": HTMLAtomicResultDateElement;
        "atomic-result-fields-list-v1": HTMLAtomicResultFieldsListV1Element;
        "atomic-result-icon": HTMLAtomicResultIconElement;
        "atomic-result-icon-v1": HTMLAtomicResultIconV1Element;
        "atomic-result-image": HTMLAtomicResultImageElement;
        "atomic-result-link": HTMLAtomicResultLinkElement;
        "atomic-result-list": HTMLAtomicResultListElement;
        "atomic-result-list-placeholder": HTMLAtomicResultListPlaceholderElement;
        "atomic-result-list-v1": HTMLAtomicResultListV1Element;
        "atomic-result-multi-value-text": HTMLAtomicResultMultiValueTextElement;
        "atomic-result-number": HTMLAtomicResultNumberElement;
        "atomic-result-number-v1": HTMLAtomicResultNumberV1Element;
        "atomic-result-placeholder-v1": HTMLAtomicResultPlaceholderV1Element;
        "atomic-result-price": HTMLAtomicResultPriceElement;
        "atomic-result-printable-uri": HTMLAtomicResultPrintableUriElement;
        "atomic-result-quickview": HTMLAtomicResultQuickviewElement;
        "atomic-result-rating-v1": HTMLAtomicResultRatingV1Element;
        "atomic-result-section-actions": HTMLAtomicResultSectionActionsElement;
        "atomic-result-section-badges": HTMLAtomicResultSectionBadgesElement;
        "atomic-result-section-bottom-metadata": HTMLAtomicResultSectionBottomMetadataElement;
        "atomic-result-section-emphasized": HTMLAtomicResultSectionEmphasizedElement;
        "atomic-result-section-excerpt": HTMLAtomicResultSectionExcerptElement;
        "atomic-result-section-title": HTMLAtomicResultSectionTitleElement;
        "atomic-result-section-title-metadata": HTMLAtomicResultSectionTitleMetadataElement;
        "atomic-result-section-visual": HTMLAtomicResultSectionVisualElement;
        "atomic-result-table-placeholder-v1": HTMLAtomicResultTablePlaceholderV1Element;
        "atomic-result-template": HTMLAtomicResultTemplateElement;
        "atomic-result-text": HTMLAtomicResultTextElement;
        "atomic-result-v1": HTMLAtomicResultV1Element;
        "atomic-results-per-page": HTMLAtomicResultsPerPageElement;
        "atomic-results-per-page-v1": HTMLAtomicResultsPerPageV1Element;
        "atomic-search-box": HTMLAtomicSearchBoxElement;
        "atomic-search-interface": HTMLAtomicSearchInterfaceElement;
        "atomic-size-condition-v1": HTMLAtomicSizeConditionV1Element;
        "atomic-sort-dropdown": HTMLAtomicSortDropdownElement;
        "atomic-sort-expression": HTMLAtomicSortExpressionElement;
        "atomic-table-cell-v1": HTMLAtomicTableCellV1Element;
        "atomic-table-element-v1": HTMLAtomicTableElementV1Element;
        "atomic-text": HTMLAtomicTextElement;
        "atomic-timeframe": HTMLAtomicTimeframeElement;
        "atomic-timeframe-facet": HTMLAtomicTimeframeFacetElement;
    }
}
declare namespace LocalJSX {
    interface AtomicBreadbox {
    }
    interface AtomicBreadcrumbManager {
        /**
          * A character that divides each path segment in a category facet breadcrumb.
         */
        "categoryDivider"?: string;
        /**
          * Number of breadcrumbs to display when collapsed.
         */
        "collapseThreshold"?: number;
    }
    interface AtomicCategoryFacet {
        /**
          * The base path shared by all values for the facet, separated by commas.
         */
        "basePath"?: string;
        /**
          * The character that separates values of a multi-value field.
         */
        "delimitingCharacter"?: string;
        /**
          * Whether this facet should contain a search box.
         */
        "enableFacetSearch"?: boolean;
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * Specifies the index field whose values the facet should use.
         */
        "field"?: string;
        /**
          * Whether to use basePath as a filter for the results.
         */
        "filterByBasePath"?: boolean;
        /**
          * The non-localized label for the facet.
         */
        "label"?: string;
        /**
          * The number of values to request for this facet. Also determines the number of additional values to request each time this facet is expanded, and the number of values to display when this facet is collapsed.
         */
        "numberOfValues"?: number;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are `alphanumeric`, and `occurrences`.
         */
        "sortCriteria"?: CategoryFacetSortCriterion;
    }
    interface AtomicCategoryFacetV1 {
        /**
          * The base path shared by all values for the facet, separated by commas.
         */
        "basePath"?: string;
        /**
          * The character that separates values of a multi-value field.
         */
        "delimitingCharacter"?: string;
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Whether to use basePath as a filter for the results.
         */
        "filterByBasePath"?: boolean;
        /**
          * Specifies if the facet is collapsed.
         */
        "isCollapsed"?: boolean;
        /**
          * The non-localized label for the facet.
         */
        "label"?: string;
        /**
          * The number of values to request for this facet. Also determines the number of additional values to request each time more values are shown.
         */
        "numberOfValues"?: number;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are 'score', 'alphanumeric', 'occurrences', and 'automatic'. TODO: add automatic (occurences when not expanded, alphanumeric when expanded)
         */
        "sortCriteria"?: CategoryFacetSortCriterion;
        /**
          * Whether this facet should contain a search box. When "true", the search is only enabled when more facet values are available.
         */
        "withSearch"?: boolean;
    }
    interface AtomicColorFacet {
        /**
          * Whether to display the facet values as checkboxes (multiple selection) or boxes (multiple selection). Possible values are 'checkbox', and 'box'.
         */
        "displayValuesAs"?: 'checkbox' | 'box';
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Specifies if the facet is collapsed.
         */
        "isCollapsed"?: boolean;
        /**
          * The non-localized label for the facet.
         */
        "label"?: string;
        /**
          * The number of values to request for this facet. Also determines the number of additional values to request each time more values are shown.
         */
        "numberOfValues"?: number;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are 'score', 'alphanumeric', 'occurrences', and 'automatic'.
         */
        "sortCriteria"?: FacetSortCriterion;
        /**
          * Whether this facet should contain a search box. When "true", the search is only enabled when more facet values are available.
         */
        "withSearch"?: boolean;
    }
    interface AtomicComponentError {
        "element": HTMLElement;
        "error": Error;
    }
    interface AtomicDateFacet {
        /**
          * The format that the date will be displayed in. See https://day.js.org/docs/en/display/format for formatting details.
         */
        "dateFormat"?: string;
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * Specifies the index field whose values the facet should use.
         */
        "field"?: string;
        /**
          * The non-localized label for the facet.
         */
        "label"?: string;
        /**
          * The number of values to request for this facet, when there are no manual ranges.
         */
        "numberOfValues"?: number;
        /**
          * The algorithm that's used for generating the ranges of this facet when they aren't manually defined. The default value of `"even"` generates equally sized facet ranges across all of the results. The value `"equiprobable"` generates facet ranges which vary in size, but have a more balanced number of results in each facet range.
         */
        "rangeAlgorithm"?: RangeFacetRangeAlgorithm;
    }
    interface AtomicDateRange {
        /**
          * The ending date for the range. It can be expressed as a Javascript date, as a number using epoch time or as a string using the ISO 8601 format.
         */
        "end": Date | string | number;
        /**
          * The starting date for the range. It can be expressed as a Javascript date, as a number using epoch time or as a string using the ISO 8601 format.
         */
        "start": Date | string | number;
    }
    interface AtomicDidYouMean {
    }
    interface AtomicFacet {
        /**
          * The character that separates values of a multi-value field.
         */
        "delimitingCharacter"?: string;
        /**
          * Whether this facet should contain a search box.
         */
        "enableFacetSearch"?: boolean;
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field"?: string;
        /**
          * The non-localized label for the facet.
         */
        "label"?: string;
        /**
          * The number of values to request for this facet. Also determines the number of additional values to request each time this facet is expanded, and the number of values to display when this facet is collapsed.
         */
        "numberOfValues"?: number;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are:  * 'score' * 'numeric' * 'occurrences' * 'automatic'
         */
        "sortCriteria"?: FacetSortCriterion;
    }
    interface AtomicFacetDateInput {
        "bindings": Bindings;
        "filter": DateFilter;
        "filterState": DateFilterState;
        "label": string;
        "onAtomic/dateInputApply"?: (event: CustomEvent<any>) => void;
    }
    interface AtomicFacetManager {
    }
    interface AtomicFacetNumberInput {
        "bindings": Bindings;
        "filter": NumericFilter;
        "filterState": NumericFilterState;
        "label": string;
        "onAtomic/numberInputApply"?: (event: CustomEvent<any>) => void;
        "type": NumberInputType;
    }
    interface AtomicFacetV1 {
        /**
          * Whether to display the facet values as checkboxes (multiple selection), links (single selection) or boxes (multiple selection). Possible values are 'checkbox', 'link', and 'box'.
         */
        "displayValuesAs"?: 'checkbox' | 'link' | 'box';
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Specifies if the facet is collapsed.
         */
        "isCollapsed"?: boolean;
        /**
          * The non-localized label for the facet.
         */
        "label"?: string;
        /**
          * The number of values to request for this facet. Also determines the number of additional values to request each time more values are shown.
         */
        "numberOfValues"?: number;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are 'score', 'alphanumeric', 'occurrences', and 'automatic'.
         */
        "sortCriteria"?: FacetSortCriterion;
        /**
          * Whether this facet should contain a search box. When "true", the search is only enabled when more facet values are available.
         */
        "withSearch"?: boolean;
    }
    interface AtomicFieldCondition {
        /**
          * A list of conditions that must be fulfilled for this template to be selected.
         */
        "conditions"?: ResultTemplateCondition[];
        /**
          * Verifies wheter the specified fields are defined.
         */
        "ifDefined"?: string;
        /**
          * Verifies whether the specified fields are not defined.
         */
        "ifNotDefined"?: string;
    }
    interface AtomicFormatCurrency {
        /**
          * The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as "USD" for the US dollar, "EUR" for the euro, or "CNY" for the Chinese RMB. See the current [currency & funds code list](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency).
         */
        "currency": string;
    }
    interface AtomicFormatNumber {
        /**
          * The maximum number of fraction digits to use.
         */
        "maximumFractionDigits"?: number;
        /**
          * The maximum number of significant digits to use.
         */
        "maximumSignificantDigits"?: number;
        /**
          * The minimum number of fraction digits to use.
         */
        "minimumFractionDigits"?: number;
        /**
          * The minimum number of integer digits to use.
         */
        "minimumIntegerDigits"?: number;
        /**
          * The minimum number of significant digits to use.
         */
        "minimumSignificantDigits"?: number;
    }
    interface AtomicFormatUnit {
        /**
          * The unit to use in unit formatting. Leverages the [Intl.NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat) constructor. The unit must be [sanctioned unit identifier](https://tc39.es/proposal-unified-intl-numberformat/section6/locales-currencies-tz_proposed_out.html#sec-issanctionedsimpleunitidentifier)
         */
        "unit": string;
        /**
          * The unit formatting style to use in unit formatting.  * "long" (e.g., 16 litres) * "short" (e.g., 16 l) * "narrow" (e.g., 16l)
         */
        "unitDisplay"?: 'long' | 'short' | 'narrow';
    }
    interface AtomicFrequentlyBoughtTogether {
    }
    interface AtomicIcon {
        /**
          * The SVG icon to display.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly.
         */
        "icon": string;
    }
    interface AtomicLoadMoreResults {
    }
    interface AtomicModal {
        "handleClose": () => void;
    }
    interface AtomicNoResults {
        /**
          * Whether to display a button which cancels the last available action.
         */
        "enableCancelLastAction"?: boolean;
        /**
          * Whether to display a list of search tips to the user.
         */
        "enableSearchTips"?: boolean;
    }
    interface AtomicNoResultsV1 {
        /**
          * Whether to display a button which cancels the last available action.
         */
        "enableCancelLastAction"?: boolean;
    }
    interface AtomicNumericFacet {
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * Specifies the index field whose values the facet should use.
         */
        "field"?: string;
        /**
          * The non-localized label for the facet.
         */
        "label"?: string;
        /**
          * The number of values to request for this facet, when there are no manual ranges.
         */
        "numberOfValues"?: number;
        /**
          * The algorithm that's used for generating the ranges of this facet when they aren't manually defined. The default value of `"even"` generates equally sized facet ranges across all of the results. The value `"equiprobable"` generates facet ranges which vary in size but have a more balanced number of results within each range.
         */
        "rangeAlgorithm"?: RangeFacetRangeAlgorithm;
    }
    interface AtomicNumericFacetV1 {
        /**
          * Whether to display the facet values as checkboxes (multiple selection) or links (single selection). Possible values are 'checkbox' and 'link'.
         */
        "displayValuesAs"?: 'checkbox' | 'link';
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * Specifies if the facet is collapsed.
         */
        "isCollapsed"?: boolean;
        /**
          * The non-localized label for the facet.
         */
        "label"?: string;
        /**
          * The number of values to request for this facet, when there are no manual ranges. If the number of values is 0, no ranges will be displayed.
         */
        "numberOfValues"?: number;
        /**
          * The algorithm that's used for generating the ranges of this facet when they aren't manually defined. The default value of `"equiprobable"` generates facet ranges which vary in size but have a more balanced number of results within each range. The value of `"even"` generates equally sized facet ranges across all of the results.
         */
        "rangeAlgorithm"?: RangeFacetRangeAlgorithm;
        /**
          * The sort criterion to apply to the returned facet values. Possible values are 'ascending' and 'descending'.
         */
        "sortCriteria"?: RangeFacetSortCriterion;
        /**
          * Whether this facet should contain an input allowing users to set custom ranges. Depending on the field, the input can allow either decimal or integer values.
         */
        "withInput"?: NumberInputType;
    }
    interface AtomicNumericRange {
        /**
          * The ending value for the numeric range.
         */
        "end": number;
        /**
          * Specifies whether the end value should be included in the range.
         */
        "endInclusive"?: boolean;
        /**
          * The non-localized label for the facet. When defined, it will appear instead of the formatted value.
         */
        "label"?: string;
        /**
          * The starting value for the numeric range.
         */
        "start": number;
    }
    interface AtomicPager {
        /**
          * Specifies how many page buttons to display in the pager.
         */
        "numberOfPages"?: number;
        "onAtomic/scrollToTop"?: (event: CustomEvent<any>) => void;
    }
    interface AtomicPagerV1 {
        /**
          * Specifies how many page buttons to display in the pager.
         */
        "numberOfPages"?: number;
        "onAtomic/scrollToTop"?: (event: CustomEvent<any>) => void;
    }
    interface AtomicQueryError {
    }
    interface AtomicQuerySummary {
        /**
          * Whether to display the duration of the last query execution.
         */
        "enableDuration"?: boolean;
    }
    interface AtomicRatingFacet {
        /**
          * Whether to display the facet values as checkboxes (multiple selection) or links (single selection). Possible values are 'checkbox' and 'link'.
         */
        "displayValuesAs"?: 'checkbox' | 'link';
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * The SVG icon to use to display the rating.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly.
         */
        "icon"?: string;
        /**
          * Specifies if the facet is collapsed.
         */
        "isCollapsed"?: boolean;
        /**
          * The non-localized label for the facet.
         */
        "label"?: string;
        /**
          * The maximum value of the field. This value is also used as the number of icons to be displayed.
         */
        "maxValueInIndex"?: number;
        /**
          * The minimum value of the field.
         */
        "minValueInIndex"?: number;
        /**
          * The number of intervals to split the index for this facet.
         */
        "numberOfIntervals"?: number;
    }
    interface AtomicRatingRangeFacet {
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field": string;
        /**
          * The SVG icon to use to display the rating.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly.
         */
        "icon"?: string;
        /**
          * Specifies if the facet is collapsed.
         */
        "isCollapsed"?: boolean;
        /**
          * The non-localized label for the facet.
         */
        "label"?: string;
        /**
          * The maximum value of the field. This value is also used as the number of icons to be displayed.
         */
        "maxValueInIndex"?: number;
        /**
          * The minimum value of the field.
         */
        "minValueInIndex"?: number;
        /**
          * The number of intervals to split the index for this facet.
         */
        "numberOfIntervals"?: number;
    }
    interface AtomicRefineModal {
        "enabled": boolean;
    }
    interface AtomicRefineToggle {
    }
    interface AtomicRelevanceInspector {
        /**
          * The Atomic interface bindings, namely the headless search engine and i18n instances.
         */
        "bindings": Bindings;
    }
    interface AtomicResult {
        /**
          * The result content to display.
         */
        "content": string;
        /**
          * The headless search engine.
         */
        "engine": SearchEngine;
        /**
          * The result item.
         */
        "result": Result;
    }
    interface AtomicResultBadgeV1 {
        /**
          * The result field which the component should use. This will look in the Result object first, and then in the Result.raw object for the fields. It is important to include the necessary field in the ResultList component.
         */
        "field"?: string;
        /**
          * Specifies the icon to display.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly
         */
        "icon"?: string;
        /**
          * The text to display instead of the field.
         */
        "label"?: string;
    }
    interface AtomicResultDate {
        /**
          * The result field which the component should use. This will look for the field in the Result object first, and then in the Result.raw object. It is important to include the necessary field in the ResultList component.
         */
        "field"?: string;
        /**
          * Available formats: https://day.js.org/docs/en/display/format
         */
        "format"?: string;
    }
    interface AtomicResultFieldsListV1 {
    }
    interface AtomicResultIcon {
        /**
          * Specifies the icon to display from the list of available icons.  By default, this will parse the `objecttype` and `filetype` fields to find a matching icon. If none are available, it will use the `custom` icon.
         */
        "icon"?: string;
    }
    interface AtomicResultIconV1 {
    }
    interface AtomicResultImage {
        /**
          * The result field which the component should use. This will look for the field in the Result object first, then in the Result.raw object. It is important to include the necessary field in the ResultList component.
         */
        "field": string;
    }
    interface AtomicResultLink {
        /**
          * Where to display the linked URL, as the name for a browsing context (a tab, window, or <iframe>).  The following keywords have special meanings:  * _self: the current browsing context. (Default) * _blank: usually a new tab, but users can configure their browsers to open a new window instead. * _parent: the parent of the current browsing context. If there's no parent, this behaves as `_self`. * _top: the topmost browsing context (the "highest" context that’s an ancestor of the current one). If there are no ancestors, this behaves as `_self`.
         */
        "target"?: string;
    }
    interface AtomicResultList {
        /**
          * A list of fields to include in the query results, separated by commas.
         */
        "fieldsToInclude"?: string;
    }
    interface AtomicResultListPlaceholder {
    }
    interface AtomicResultListV1 {
        "density"?: ResultDisplayDensity;
        "display"?: ResultDisplayLayout;
        /**
          * A list of fields to include in the query results, separated by commas.
         */
        "fieldsToInclude"?: string;
        "image"?: ResultDisplayImageSize;
    }
    interface AtomicResultMultiValueText {
        /**
          * The field that the component should use. The component will try to find this field in the `Result.raw` object unless it finds it in the `Result` object first. Make sure this field is present in the `fieldsToInclude` property of the `atomic-result-list` component.
         */
        "field": string;
        /**
          * The maximum number of field values to display. If there are _n_ more values than the specified maximum, the last displayed value will be "_n_ more...".
         */
        "maxValuesToDisplay"?: number;
    }
    interface AtomicResultNumber {
        /**
          * The result field which the component should use. This will look for the fields in the Result object first, and then in the Result.raw object. It is important to include the necessary field in the ResultList component.
         */
        "field": string;
        /**
          * The maximum number of fraction digits to use.
         */
        "maximumFractionDigits"?: number;
        /**
          * The maximum number of significant digits to use.
         */
        "maximumSignificantDigits"?: number;
        /**
          * The minimum number of fraction digits to use.
         */
        "minimumFractionDigits"?: number;
        /**
          * The minimum number of integer digits to use.
         */
        "minimumIntegerDigits"?: number;
        /**
          * The minimum number of significant digits to use.
         */
        "minimumSignificantDigits"?: number;
    }
    interface AtomicResultNumberV1 {
        /**
          * The field that the component should use. The component will try to find this field in the `Result.raw` object unless it finds it in the `Result` object first. Make sure this field is present in the `fieldsToInclude` property of the `atomic-result-list` component.
         */
        "field": string;
    }
    interface AtomicResultPlaceholderV1 {
        "density": ResultDisplayDensity;
        "display": ResultDisplayLayout;
        "image": ResultDisplayImageSize;
    }
    interface AtomicResultPrice {
        /**
          * The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as "USD" for the US dollar, "EUR" for the euro, or "CNY" for the Chinese RMB — see the [Current currency & funds code list](http://www.currency-iso.org/en/home/tables/table-a1.html).
         */
        "currency"?: string;
        /**
          * The result field which the component should use. This will look in the Result object first, and then in the Result.raw object for the fields. It is important to include the necessary field in the ResultList component.
         */
        "field"?: string;
    }
    interface AtomicResultPrintableUri {
        /**
          * The maximum number of Uri parts to display. This has to be over the minimum of `3` in order to be effective. Putting `Infinity` will disable the ellipsis.
         */
        "maxNumberOfParts"?: number;
    }
    interface AtomicResultQuickview {
        /**
          * The maximum preview size to retrieve, in bytes. By default, the full preview is retrieved.
         */
        "maximumPreviewSize"?: number | undefined;
    }
    interface AtomicResultRatingV1 {
        /**
          * The field whose values you want to display as a rating.
         */
        "field": string;
        /**
          * The SVG icon to use to display the rating.  - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location. - Use a value that starts with `assets://`, to display an icon from the Atomic package. - Use a stringified SVG to display it directly
         */
        "icon"?: string;
        /**
          * The maximum value of the field. This value is also used as the number of icons to be displayed.
         */
        "maxValueInIndex"?: number;
    }
    interface AtomicResultSectionActions {
    }
    interface AtomicResultSectionBadges {
    }
    interface AtomicResultSectionBottomMetadata {
    }
    interface AtomicResultSectionEmphasized {
    }
    interface AtomicResultSectionExcerpt {
    }
    interface AtomicResultSectionTitle {
    }
    interface AtomicResultSectionTitleMetadata {
    }
    interface AtomicResultSectionVisual {
    }
    interface AtomicResultTablePlaceholderV1 {
        "density": ResultDisplayDensity;
        "image": ResultDisplayImageSize;
        "rows": number;
    }
    interface AtomicResultTemplate {
        /**
          * A function that must return true on results for the result template to apply.  For example, a template with the following condition only applies to results whose `title` contains `singapore`: `[(result) => /singapore/i.test(result.title)]`
         */
        "conditions"?: ResultTemplateCondition[];
    }
    interface AtomicResultText {
        /**
          * The locale key for the text to display when the configured field has no value.
         */
        "default"?: string;
        /**
          * The result field which the component should use. This will look in the Result object first, and then in the Result.raw object for the fields. It is important to include the necessary field in the ResultList component.
         */
        "field": string;
        /**
          * If this is set to true, it will look for the corresponding highlight property and use it if available.
         */
        "shouldHighlight"?: boolean;
    }
    interface AtomicResultV1 {
        /**
          * The result content to display.
         */
        "content": string;
        /**
          * How large or small results should be.
         */
        "density"?: ResultDisplayDensity;
        /**
          * How results should be displayed.
         */
        "display"?: ResultDisplayLayout;
        /**
          * The headless search engine.
         */
        "engine": SearchEngine;
        /**
          * How large or small the visual section of results should be.
         */
        "image"?: ResultDisplayImageSize;
        /**
          * The result item.
         */
        "result": Result;
    }
    interface AtomicResultsPerPage {
        /**
          * A list of choices for the number of results to display per page, separated by commas.
         */
        "choicesDisplayed"?: string;
        /**
          * The initial selection for the number of result per page. This should be part of the `choicesDisplayed` option. By default, this is set to the first value in `choicesDisplayed`.
         */
        "initialChoice"?: number;
    }
    interface AtomicResultsPerPageV1 {
        /**
          * A list of choices for the number of results to display per page, separated by commas.
         */
        "choicesDisplayed"?: string;
        /**
          * The initial selection for the number of result per page. This should be part of the `choicesDisplayed` option. By default, this is set to the first value in `choicesDisplayed`.
         */
        "initialChoice"?: number;
    }
    interface AtomicSearchBox {
        /**
          * Whether the submit button is placed before the input.
         */
        "leadingSubmitButton"?: boolean;
        /**
          * The maximum number of suggestions to display.
         */
        "numberOfSuggestions"?: number;
        /**
          * The placeholder text to display in the search box input area.
         */
        "placeholder"?: string;
    }
    interface AtomicSearchInterface {
        /**
          * The search interface headless engine.
         */
        "engine"?: SearchEngine;
        /**
          * The search interface i18next instance.
         */
        "i18n"?: i18n;
        /**
          * The search interface language.
         */
        "language"?: string;
        /**
          * The severity level of the messages to log in the console.
         */
        "logLevel"?: LogLevel;
        /**
          * The search interface [query pipeline](https://docs.coveo.com/en/180/).
         */
        "pipeline"?: string;
        /**
          * Whether the state should be reflected in the URL parameters.
         */
        "reflectStateInUrl"?: boolean;
        /**
          * The CSS selector for the container where the interface will scroll back to.
         */
        "scrollContainer"?: string;
        /**
          * The search interface [search hub](https://docs.coveo.com/en/1342/).
         */
        "searchHub"?: string;
        /**
          * The [tz database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) identifier of the time zone to use to correctly interpret dates in the query expression, facets, and result items. By default, the timezone will be [guessed](https://day.js.org/docs/en/timezone/guessing-user-timezone).
          * @example America/Montreal
         */
        "timezone"?: string;
    }
    interface AtomicSizeConditionV1 {
        /**
          * The maximum height (exclusively) required to display children.  E.g.: `3rem`, `500px` or `30vw`.
         */
        "maximumHeightExclusive"?: string;
        /**
          * The maximum height (inclusively) required to display children.  E.g.: `3rem`, `500px` or `30vw`.
         */
        "maximumHeightInclusive"?: string;
        /**
          * The maximum width (exclusively) required to display children.  E.g.: `3rem`, `500px` or `30vw`.
         */
        "maximumWidthExclusive"?: string;
        /**
          * The maximum width (inclusively) required to display children.  E.g.: `3rem`, `500px` or `30vw`.
         */
        "maximumWidthInclusive"?: string;
        /**
          * The minimum height (exclusively) required to display children.  E.g.: `3rem`, `500px` or `30vw`.
         */
        "minimumHeightExclusive"?: string;
        /**
          * The minimum height (inclusively) required to display children.  E.g.: `3rem`, `500px` or `30vw`.
         */
        "minimumHeightInclusive"?: string;
        /**
          * The minimum width (exclusively) required to display children.  E.g.: `3rem`, `500px` or `30vw`.
         */
        "minimumWidthExclusive"?: string;
        /**
          * The minimum width (inclusively) required to display children.  E.g.: `3rem`, `500px` or `30vw`.
         */
        "minimumWidthInclusive"?: string;
    }
    interface AtomicSortDropdown {
    }
    interface AtomicSortExpression {
        /**
          * The non-localized caption to display for this expression.
         */
        "caption": string;
        /**
          * One or more sort criteria that the end user can select or toggle between.  The available sort criteria are:  * `relevancy` * `date ascending`/`date descending` * `qre` * `<FIELD> ascending`/`<FIELD> descending`, where you replace `<FIELD>` with the name of a sortable field in your index (e.g., `criteria="size ascending"`).  You can specify multiple sort criteria to be used in the same request by separating them with a comma (e.g., `criteria="size ascending, date ascending"`).
         */
        "expression": string;
    }
    interface AtomicTableCellV1 {
        /**
          * The result content to display.
         */
        "content": string;
        /**
          * The result item.
         */
        "result": Result;
    }
    interface AtomicTableElementV1 {
        /**
          * The label to display in the header of this column.
         */
        "label": string;
    }
    interface AtomicText {
        /**
          * The count value used for plurals.
         */
        "count"?: number;
        /**
          * The string key value.
         */
        "value": string;
    }
    interface AtomicTimeframe {
        /**
          * The amount of units from which to count.  E.g., 10 days, 1 year, etc.
         */
        "amount"?: number;
        /**
          * The non-localized label for the timeframe. When defined, it will appear instead of the formatted value.
         */
        "label"?: string;
        /**
          * The relative period of time to now.
         */
        "period"?: 'past' | 'next';
        /**
          * The unit used to define: - the start date of the timeframe, if the period is `past` - the end date of the timeframe, if the period is `future`
         */
        "unit": RelativeDateUnit;
    }
    interface AtomicTimeframeFacet {
        /**
          * Specifies a unique identifier for the facet.
         */
        "facetId"?: string;
        /**
          * The field whose values you want to display in the facet.
         */
        "field"?: string;
        /**
          * Specifies if the facet is collapsed.
         */
        "isCollapsed"?: boolean;
        /**
          * The non-localized label for the facet.
         */
        "label"?: string;
        /**
          * Whether this facet should contain an datepicker allowing users to set custom ranges.
         */
        "withDatePicker"?: boolean;
    }
    interface IntrinsicElements {
        "atomic-breadbox": AtomicBreadbox;
        "atomic-breadcrumb-manager": AtomicBreadcrumbManager;
        "atomic-category-facet": AtomicCategoryFacet;
        "atomic-category-facet-v1": AtomicCategoryFacetV1;
        "atomic-color-facet": AtomicColorFacet;
        "atomic-component-error": AtomicComponentError;
        "atomic-date-facet": AtomicDateFacet;
        "atomic-date-range": AtomicDateRange;
        "atomic-did-you-mean": AtomicDidYouMean;
        "atomic-facet": AtomicFacet;
        "atomic-facet-date-input": AtomicFacetDateInput;
        "atomic-facet-manager": AtomicFacetManager;
        "atomic-facet-number-input": AtomicFacetNumberInput;
        "atomic-facet-v1": AtomicFacetV1;
        "atomic-field-condition": AtomicFieldCondition;
        "atomic-format-currency": AtomicFormatCurrency;
        "atomic-format-number": AtomicFormatNumber;
        "atomic-format-unit": AtomicFormatUnit;
        "atomic-frequently-bought-together": AtomicFrequentlyBoughtTogether;
        "atomic-icon": AtomicIcon;
        "atomic-load-more-results": AtomicLoadMoreResults;
        "atomic-modal": AtomicModal;
        "atomic-no-results": AtomicNoResults;
        "atomic-no-results-v1": AtomicNoResultsV1;
        "atomic-numeric-facet": AtomicNumericFacet;
        "atomic-numeric-facet-v1": AtomicNumericFacetV1;
        "atomic-numeric-range": AtomicNumericRange;
        "atomic-pager": AtomicPager;
        "atomic-pager-v1": AtomicPagerV1;
        "atomic-query-error": AtomicQueryError;
        "atomic-query-summary": AtomicQuerySummary;
        "atomic-rating-facet": AtomicRatingFacet;
        "atomic-rating-range-facet": AtomicRatingRangeFacet;
        "atomic-refine-modal": AtomicRefineModal;
        "atomic-refine-toggle": AtomicRefineToggle;
        "atomic-relevance-inspector": AtomicRelevanceInspector;
        "atomic-result": AtomicResult;
        "atomic-result-badge-v1": AtomicResultBadgeV1;
        "atomic-result-date": AtomicResultDate;
        "atomic-result-fields-list-v1": AtomicResultFieldsListV1;
        "atomic-result-icon": AtomicResultIcon;
        "atomic-result-icon-v1": AtomicResultIconV1;
        "atomic-result-image": AtomicResultImage;
        "atomic-result-link": AtomicResultLink;
        "atomic-result-list": AtomicResultList;
        "atomic-result-list-placeholder": AtomicResultListPlaceholder;
        "atomic-result-list-v1": AtomicResultListV1;
        "atomic-result-multi-value-text": AtomicResultMultiValueText;
        "atomic-result-number": AtomicResultNumber;
        "atomic-result-number-v1": AtomicResultNumberV1;
        "atomic-result-placeholder-v1": AtomicResultPlaceholderV1;
        "atomic-result-price": AtomicResultPrice;
        "atomic-result-printable-uri": AtomicResultPrintableUri;
        "atomic-result-quickview": AtomicResultQuickview;
        "atomic-result-rating-v1": AtomicResultRatingV1;
        "atomic-result-section-actions": AtomicResultSectionActions;
        "atomic-result-section-badges": AtomicResultSectionBadges;
        "atomic-result-section-bottom-metadata": AtomicResultSectionBottomMetadata;
        "atomic-result-section-emphasized": AtomicResultSectionEmphasized;
        "atomic-result-section-excerpt": AtomicResultSectionExcerpt;
        "atomic-result-section-title": AtomicResultSectionTitle;
        "atomic-result-section-title-metadata": AtomicResultSectionTitleMetadata;
        "atomic-result-section-visual": AtomicResultSectionVisual;
        "atomic-result-table-placeholder-v1": AtomicResultTablePlaceholderV1;
        "atomic-result-template": AtomicResultTemplate;
        "atomic-result-text": AtomicResultText;
        "atomic-result-v1": AtomicResultV1;
        "atomic-results-per-page": AtomicResultsPerPage;
        "atomic-results-per-page-v1": AtomicResultsPerPageV1;
        "atomic-search-box": AtomicSearchBox;
        "atomic-search-interface": AtomicSearchInterface;
        "atomic-size-condition-v1": AtomicSizeConditionV1;
        "atomic-sort-dropdown": AtomicSortDropdown;
        "atomic-sort-expression": AtomicSortExpression;
        "atomic-table-cell-v1": AtomicTableCellV1;
        "atomic-table-element-v1": AtomicTableElementV1;
        "atomic-text": AtomicText;
        "atomic-timeframe": AtomicTimeframe;
        "atomic-timeframe-facet": AtomicTimeframeFacet;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "atomic-breadbox": LocalJSX.AtomicBreadbox & JSXBase.HTMLAttributes<HTMLAtomicBreadboxElement>;
            "atomic-breadcrumb-manager": LocalJSX.AtomicBreadcrumbManager & JSXBase.HTMLAttributes<HTMLAtomicBreadcrumbManagerElement>;
            "atomic-category-facet": LocalJSX.AtomicCategoryFacet & JSXBase.HTMLAttributes<HTMLAtomicCategoryFacetElement>;
            "atomic-category-facet-v1": LocalJSX.AtomicCategoryFacetV1 & JSXBase.HTMLAttributes<HTMLAtomicCategoryFacetV1Element>;
            "atomic-color-facet": LocalJSX.AtomicColorFacet & JSXBase.HTMLAttributes<HTMLAtomicColorFacetElement>;
            "atomic-component-error": LocalJSX.AtomicComponentError & JSXBase.HTMLAttributes<HTMLAtomicComponentErrorElement>;
            "atomic-date-facet": LocalJSX.AtomicDateFacet & JSXBase.HTMLAttributes<HTMLAtomicDateFacetElement>;
            "atomic-date-range": LocalJSX.AtomicDateRange & JSXBase.HTMLAttributes<HTMLAtomicDateRangeElement>;
            "atomic-did-you-mean": LocalJSX.AtomicDidYouMean & JSXBase.HTMLAttributes<HTMLAtomicDidYouMeanElement>;
            "atomic-facet": LocalJSX.AtomicFacet & JSXBase.HTMLAttributes<HTMLAtomicFacetElement>;
            "atomic-facet-date-input": LocalJSX.AtomicFacetDateInput & JSXBase.HTMLAttributes<HTMLAtomicFacetDateInputElement>;
            "atomic-facet-manager": LocalJSX.AtomicFacetManager & JSXBase.HTMLAttributes<HTMLAtomicFacetManagerElement>;
            "atomic-facet-number-input": LocalJSX.AtomicFacetNumberInput & JSXBase.HTMLAttributes<HTMLAtomicFacetNumberInputElement>;
            "atomic-facet-v1": LocalJSX.AtomicFacetV1 & JSXBase.HTMLAttributes<HTMLAtomicFacetV1Element>;
            "atomic-field-condition": LocalJSX.AtomicFieldCondition & JSXBase.HTMLAttributes<HTMLAtomicFieldConditionElement>;
            "atomic-format-currency": LocalJSX.AtomicFormatCurrency & JSXBase.HTMLAttributes<HTMLAtomicFormatCurrencyElement>;
            "atomic-format-number": LocalJSX.AtomicFormatNumber & JSXBase.HTMLAttributes<HTMLAtomicFormatNumberElement>;
            "atomic-format-unit": LocalJSX.AtomicFormatUnit & JSXBase.HTMLAttributes<HTMLAtomicFormatUnitElement>;
            "atomic-frequently-bought-together": LocalJSX.AtomicFrequentlyBoughtTogether & JSXBase.HTMLAttributes<HTMLAtomicFrequentlyBoughtTogetherElement>;
            "atomic-icon": LocalJSX.AtomicIcon & JSXBase.HTMLAttributes<HTMLAtomicIconElement>;
            "atomic-load-more-results": LocalJSX.AtomicLoadMoreResults & JSXBase.HTMLAttributes<HTMLAtomicLoadMoreResultsElement>;
            "atomic-modal": LocalJSX.AtomicModal & JSXBase.HTMLAttributes<HTMLAtomicModalElement>;
            "atomic-no-results": LocalJSX.AtomicNoResults & JSXBase.HTMLAttributes<HTMLAtomicNoResultsElement>;
            "atomic-no-results-v1": LocalJSX.AtomicNoResultsV1 & JSXBase.HTMLAttributes<HTMLAtomicNoResultsV1Element>;
            "atomic-numeric-facet": LocalJSX.AtomicNumericFacet & JSXBase.HTMLAttributes<HTMLAtomicNumericFacetElement>;
            "atomic-numeric-facet-v1": LocalJSX.AtomicNumericFacetV1 & JSXBase.HTMLAttributes<HTMLAtomicNumericFacetV1Element>;
            "atomic-numeric-range": LocalJSX.AtomicNumericRange & JSXBase.HTMLAttributes<HTMLAtomicNumericRangeElement>;
            "atomic-pager": LocalJSX.AtomicPager & JSXBase.HTMLAttributes<HTMLAtomicPagerElement>;
            "atomic-pager-v1": LocalJSX.AtomicPagerV1 & JSXBase.HTMLAttributes<HTMLAtomicPagerV1Element>;
            "atomic-query-error": LocalJSX.AtomicQueryError & JSXBase.HTMLAttributes<HTMLAtomicQueryErrorElement>;
            "atomic-query-summary": LocalJSX.AtomicQuerySummary & JSXBase.HTMLAttributes<HTMLAtomicQuerySummaryElement>;
            "atomic-rating-facet": LocalJSX.AtomicRatingFacet & JSXBase.HTMLAttributes<HTMLAtomicRatingFacetElement>;
            "atomic-rating-range-facet": LocalJSX.AtomicRatingRangeFacet & JSXBase.HTMLAttributes<HTMLAtomicRatingRangeFacetElement>;
            "atomic-refine-modal": LocalJSX.AtomicRefineModal & JSXBase.HTMLAttributes<HTMLAtomicRefineModalElement>;
            "atomic-refine-toggle": LocalJSX.AtomicRefineToggle & JSXBase.HTMLAttributes<HTMLAtomicRefineToggleElement>;
            "atomic-relevance-inspector": LocalJSX.AtomicRelevanceInspector & JSXBase.HTMLAttributes<HTMLAtomicRelevanceInspectorElement>;
            "atomic-result": LocalJSX.AtomicResult & JSXBase.HTMLAttributes<HTMLAtomicResultElement>;
            "atomic-result-badge-v1": LocalJSX.AtomicResultBadgeV1 & JSXBase.HTMLAttributes<HTMLAtomicResultBadgeV1Element>;
            "atomic-result-date": LocalJSX.AtomicResultDate & JSXBase.HTMLAttributes<HTMLAtomicResultDateElement>;
            "atomic-result-fields-list-v1": LocalJSX.AtomicResultFieldsListV1 & JSXBase.HTMLAttributes<HTMLAtomicResultFieldsListV1Element>;
            "atomic-result-icon": LocalJSX.AtomicResultIcon & JSXBase.HTMLAttributes<HTMLAtomicResultIconElement>;
            "atomic-result-icon-v1": LocalJSX.AtomicResultIconV1 & JSXBase.HTMLAttributes<HTMLAtomicResultIconV1Element>;
            "atomic-result-image": LocalJSX.AtomicResultImage & JSXBase.HTMLAttributes<HTMLAtomicResultImageElement>;
            "atomic-result-link": LocalJSX.AtomicResultLink & JSXBase.HTMLAttributes<HTMLAtomicResultLinkElement>;
            "atomic-result-list": LocalJSX.AtomicResultList & JSXBase.HTMLAttributes<HTMLAtomicResultListElement>;
            "atomic-result-list-placeholder": LocalJSX.AtomicResultListPlaceholder & JSXBase.HTMLAttributes<HTMLAtomicResultListPlaceholderElement>;
            "atomic-result-list-v1": LocalJSX.AtomicResultListV1 & JSXBase.HTMLAttributes<HTMLAtomicResultListV1Element>;
            "atomic-result-multi-value-text": LocalJSX.AtomicResultMultiValueText & JSXBase.HTMLAttributes<HTMLAtomicResultMultiValueTextElement>;
            "atomic-result-number": LocalJSX.AtomicResultNumber & JSXBase.HTMLAttributes<HTMLAtomicResultNumberElement>;
            "atomic-result-number-v1": LocalJSX.AtomicResultNumberV1 & JSXBase.HTMLAttributes<HTMLAtomicResultNumberV1Element>;
            "atomic-result-placeholder-v1": LocalJSX.AtomicResultPlaceholderV1 & JSXBase.HTMLAttributes<HTMLAtomicResultPlaceholderV1Element>;
            "atomic-result-price": LocalJSX.AtomicResultPrice & JSXBase.HTMLAttributes<HTMLAtomicResultPriceElement>;
            "atomic-result-printable-uri": LocalJSX.AtomicResultPrintableUri & JSXBase.HTMLAttributes<HTMLAtomicResultPrintableUriElement>;
            "atomic-result-quickview": LocalJSX.AtomicResultQuickview & JSXBase.HTMLAttributes<HTMLAtomicResultQuickviewElement>;
            "atomic-result-rating-v1": LocalJSX.AtomicResultRatingV1 & JSXBase.HTMLAttributes<HTMLAtomicResultRatingV1Element>;
            "atomic-result-section-actions": LocalJSX.AtomicResultSectionActions & JSXBase.HTMLAttributes<HTMLAtomicResultSectionActionsElement>;
            "atomic-result-section-badges": LocalJSX.AtomicResultSectionBadges & JSXBase.HTMLAttributes<HTMLAtomicResultSectionBadgesElement>;
            "atomic-result-section-bottom-metadata": LocalJSX.AtomicResultSectionBottomMetadata & JSXBase.HTMLAttributes<HTMLAtomicResultSectionBottomMetadataElement>;
            "atomic-result-section-emphasized": LocalJSX.AtomicResultSectionEmphasized & JSXBase.HTMLAttributes<HTMLAtomicResultSectionEmphasizedElement>;
            "atomic-result-section-excerpt": LocalJSX.AtomicResultSectionExcerpt & JSXBase.HTMLAttributes<HTMLAtomicResultSectionExcerptElement>;
            "atomic-result-section-title": LocalJSX.AtomicResultSectionTitle & JSXBase.HTMLAttributes<HTMLAtomicResultSectionTitleElement>;
            "atomic-result-section-title-metadata": LocalJSX.AtomicResultSectionTitleMetadata & JSXBase.HTMLAttributes<HTMLAtomicResultSectionTitleMetadataElement>;
            "atomic-result-section-visual": LocalJSX.AtomicResultSectionVisual & JSXBase.HTMLAttributes<HTMLAtomicResultSectionVisualElement>;
            "atomic-result-table-placeholder-v1": LocalJSX.AtomicResultTablePlaceholderV1 & JSXBase.HTMLAttributes<HTMLAtomicResultTablePlaceholderV1Element>;
            "atomic-result-template": LocalJSX.AtomicResultTemplate & JSXBase.HTMLAttributes<HTMLAtomicResultTemplateElement>;
            "atomic-result-text": LocalJSX.AtomicResultText & JSXBase.HTMLAttributes<HTMLAtomicResultTextElement>;
            "atomic-result-v1": LocalJSX.AtomicResultV1 & JSXBase.HTMLAttributes<HTMLAtomicResultV1Element>;
            "atomic-results-per-page": LocalJSX.AtomicResultsPerPage & JSXBase.HTMLAttributes<HTMLAtomicResultsPerPageElement>;
            "atomic-results-per-page-v1": LocalJSX.AtomicResultsPerPageV1 & JSXBase.HTMLAttributes<HTMLAtomicResultsPerPageV1Element>;
            "atomic-search-box": LocalJSX.AtomicSearchBox & JSXBase.HTMLAttributes<HTMLAtomicSearchBoxElement>;
            "atomic-search-interface": LocalJSX.AtomicSearchInterface & JSXBase.HTMLAttributes<HTMLAtomicSearchInterfaceElement>;
            "atomic-size-condition-v1": LocalJSX.AtomicSizeConditionV1 & JSXBase.HTMLAttributes<HTMLAtomicSizeConditionV1Element>;
            "atomic-sort-dropdown": LocalJSX.AtomicSortDropdown & JSXBase.HTMLAttributes<HTMLAtomicSortDropdownElement>;
            "atomic-sort-expression": LocalJSX.AtomicSortExpression & JSXBase.HTMLAttributes<HTMLAtomicSortExpressionElement>;
            "atomic-table-cell-v1": LocalJSX.AtomicTableCellV1 & JSXBase.HTMLAttributes<HTMLAtomicTableCellV1Element>;
            "atomic-table-element-v1": LocalJSX.AtomicTableElementV1 & JSXBase.HTMLAttributes<HTMLAtomicTableElementV1Element>;
            "atomic-text": LocalJSX.AtomicText & JSXBase.HTMLAttributes<HTMLAtomicTextElement>;
            "atomic-timeframe": LocalJSX.AtomicTimeframe & JSXBase.HTMLAttributes<HTMLAtomicTimeframeElement>;
            "atomic-timeframe-facet": LocalJSX.AtomicTimeframeFacet & JSXBase.HTMLAttributes<HTMLAtomicTimeframeFacetElement>;
        }
    }
}
