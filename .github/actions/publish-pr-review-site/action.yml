name: 'Publish PR review site'
description: Publish PR review stuff

inputs:
  token:
    description: 'GitHub token'
    required: true
  copy:
    description: 'Files to copy'

runs:
  using: composite
  steps:
    - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
      with:
        repository: coveo/ui-kit-prs
        path: prs
        sparse-checkout: '${{ github.event.pull_request.number }}'
        token: ${{inputs.token}}
    - name: 'Setup branch'
      run: |
        BRANCH_NAME="${{ github.event.pull_request.number }}"

        git fetch origin

        # Check if the branch exists on the remote
        if git show-ref --verify --quiet "refs/remotes/origin/$BRANCH_NAME"; then
          echo "Branch $BRANCH_NAME exists remotely. Checking out..."
          
          # If the branch exists locally, switch to it; otherwise, create a tracking branch
          if git show-ref --verify --quiet "refs/heads/$BRANCH_NAME"; then
            git switch "$BRANCH_NAME"
          else
            git switch --track "origin/$BRANCH_NAME"
          fi

          # Reset the branch to match the latest commit from the main branch
          git reset --hard origin/main
        else
          echo "Branch $BRANCH_NAME does not exist remotely. Creating a new branch..."
          
          # Create a new branch locally and push it to the remote
          git switch -c "$BRANCH_NAME"
          git push -u origin "$BRANCH_NAME"
        fi
      working-directory: prs
      shell: bash
    - name: 'Ensure clean directory exists'
      run: |
        rm -rf "${{github.event.pull_request.number}}"
        mkdir -p "${{github.event.pull_request.number}}"
      working-directory: prs
      shell: bash
    - name: 'Copy files'
      if: ${{inputs.copy}}
      run: |
        cp -R packages/atomic/dist-storybook prs/${{github.event.pull_request.number}}
        cp -R packages/atomic/playwright-report prs/${{github.event.pull_request.number}}
      shell: bash
    - name: 'Commit/Push'
      run: |
        git config user.name "GitHub Actions Bot"
        git config user.email "<>"
        git add "${{github.event.pull_request.number}}"
        git commit -m "Add ${{github.sha}}"
        git push --set-upstream origin ${{github.event.pull_request.number}} -f
      working-directory: prs
      shell: bash
    - name: 'Ensure PR exists'
      run: gh pr new -f
      continue-on-error: true
      env:
        GH_TOKEN: ${{inputs.token}}
      working-directory: prs
      shell: bash
    - name: 'Merge PR'
      run: gh pr merge
      continue-on-error: true
      env:
        GH_TOKEN: ${{inputs.token}}
      working-directory: prs
      shell: bash
