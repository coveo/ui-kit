{
  "graph": {
    "nodes": {
      "atomic-angular": {
        "name": "atomic-angular",
        "type": "lib",
        "data": {
          "root": "packages/atomic-angular/projects/atomic-angular",
          "name": "atomic-angular",
          "metadata": {
            "targetGroups": {
              "NPM Scripts": []
            }
          },
          "targets": {
            "nx-release-publish": {
              "dependsOn": ["^nx-release-publish"],
              "executor": "@nx/js:release-publish",
              "options": {},
              "configurations": {}
            },
            "promote:npm:latest": {
              "dependsOn": [],
              "inputs": [],
              "outputs": [],
              "executor": "nx:run-commands",
              "options": {
                "command": "node ../../../../scripts/deploy/update-npm-tag.mjs latest",
                "cwd": "packages/atomic-angular/projects/atomic-angular"
              },
              "configurations": {}
            }
          },
          "sourceRoot": "packages/atomic-angular/projects/atomic-angular",
          "projectType": "library",
          "$schema": "../../../../node_modules/nx/schemas/project-schema.json",
          "implicitDependencies": ["atomic-angular-builder"],
          "tags": []
        }
      },
      "headless-ssr-samples-pages-router": {
        "name": "headless-ssr-samples-pages-router",
        "type": "lib",
        "data": {
          "root": "packages/samples/headless-ssr/pages-router",
          "name": "headless-ssr-samples-pages-router",
          "metadata": {
            "targetGroups": {
              "NPM Scripts": [
                "dev",
                "build",
                "build:next",
                "prod",
                "lint",
                "e2e",
                "e2e:watch",
                "dev",
                "build",
                "build:next",
                "prod",
                "lint",
                "e2e",
                "e2e:watch"
              ]
            }
          },
          "targets": {
            "dev": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "next dev",
                "runCommand": "npm run dev"
              },
              "dependsOn": ["^build"],
              "options": {
                "script": "dev"
              },
              "configurations": {}
            },
            "build": {
              "dependsOn": ["cached:build"],
              "executor": "nx:noop",
              "options": {},
              "configurations": {}
            },
            "build:next": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "next build",
                "runCommand": "npm run build:next"
              },
              "options": {
                "script": "build:next"
              },
              "configurations": {}
            },
            "prod": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "next start",
                "runCommand": "npm run prod"
              },
              "dependsOn": ["build"],
              "options": {
                "script": "prod"
              },
              "configurations": {}
            },
            "lint": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "next lint",
                "runCommand": "npm run lint"
              },
              "options": {
                "script": "lint"
              },
              "configurations": {}
            },
            "e2e": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "cypress run --browser chrome --e2e --project ../ --env NEXTJS_ROUTER=pages",
                "runCommand": "npm run e2e"
              },
              "dependsOn": ["build"],
              "options": {
                "script": "e2e"
              },
              "configurations": {}
            },
            "e2e:watch": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "cypress open --browser chrome --e2e --project ../",
                "runCommand": "npm run e2e:watch"
              },
              "options": {
                "script": "e2e:watch"
              },
              "configurations": {}
            },
            "cached:build": {
              "executor": "nx:run-commands",
              "metadata": {},
              "inputs": ["^production", "production"],
              "outputs": [
                "{projectRoot}/dist",
                "{projectRoot}/www",
                "{projectRoot}/temp",
                "{projectRoot}/build",
                "{projectRoot}/.angular",
                "{projectRoot}/.next",
                "{projectRoot}/next-env.d.ts"
              ],
              "dependsOn": ["^build"],
              "cache": true,
              "options": {
                "command": "npm run build:next",
                "cwd": "packages/samples/headless-ssr/pages-router"
              },
              "configurations": {}
            }
          },
          "sourceRoot": "packages/samples/headless-ssr/pages-router",
          "projectType": "library",
          "$schema": "../../../../node_modules/nx/schemas/project-schema.json",
          "implicitDependencies": [],
          "tags": []
        }
      },
      "headless-ssr-samples-app-router": {
        "name": "headless-ssr-samples-app-router",
        "type": "lib",
        "data": {
          "root": "packages/samples/headless-ssr/app-router",
          "name": "headless-ssr-samples-app-router",
          "metadata": {
            "targetGroups": {
              "NPM Scripts": [
                "dev",
                "build",
                "build:next",
                "prod",
                "lint",
                "e2e",
                "e2e:watch",
                "dev",
                "build",
                "build:next",
                "prod",
                "lint",
                "e2e",
                "e2e:watch"
              ]
            }
          },
          "targets": {
            "dev": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "next dev",
                "runCommand": "npm run dev"
              },
              "dependsOn": ["^build"],
              "options": {
                "script": "dev"
              },
              "configurations": {}
            },
            "build": {
              "dependsOn": ["cached:build"],
              "executor": "nx:noop",
              "options": {},
              "configurations": {}
            },
            "build:next": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "next build",
                "runCommand": "npm run build:next"
              },
              "options": {
                "script": "build:next"
              },
              "configurations": {}
            },
            "prod": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "next start",
                "runCommand": "npm run prod"
              },
              "dependsOn": ["build"],
              "options": {
                "script": "prod"
              },
              "configurations": {}
            },
            "lint": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "next lint",
                "runCommand": "npm run lint"
              },
              "options": {
                "script": "lint"
              },
              "configurations": {}
            },
            "e2e": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "cypress run --browser chrome --e2e --project ../ --env NEXTJS_ROUTER=app",
                "runCommand": "npm run e2e"
              },
              "dependsOn": ["build"],
              "options": {
                "script": "e2e"
              },
              "configurations": {}
            },
            "e2e:watch": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "cypress open --browser chrome --e2e --project ../",
                "runCommand": "npm run e2e:watch"
              },
              "options": {
                "script": "e2e:watch"
              },
              "configurations": {}
            },
            "cached:build": {
              "executor": "nx:run-commands",
              "metadata": {},
              "inputs": ["^production", "production"],
              "outputs": [
                "{projectRoot}/dist",
                "{projectRoot}/www",
                "{projectRoot}/temp",
                "{projectRoot}/build",
                "{projectRoot}/.angular",
                "{projectRoot}/.next",
                "{projectRoot}/next-env.d.ts"
              ],
              "dependsOn": ["^build"],
              "cache": true,
              "options": {
                "command": "npm run build:next",
                "cwd": "packages/samples/headless-ssr/app-router"
              },
              "configurations": {}
            }
          },
          "sourceRoot": "packages/samples/headless-ssr/app-router",
          "projectType": "library",
          "$schema": "../../../../node_modules/nx/schemas/project-schema.json",
          "implicitDependencies": [],
          "tags": []
        }
      },
      "headless-react-samples": {
        "name": "headless-react-samples",
        "type": "lib",
        "data": {
          "root": "packages/samples/headless-react",
          "name": "headless-react-samples",
          "metadata": {
            "targetGroups": {
              "NPM Scripts": [
                "dev",
                "build",
                "build:client",
                "build:server",
                "test",
                "prod:ssr",
                "dev",
                "build",
                "build:client",
                "build:server",
                "test",
                "prod:ssr"
              ]
            }
          },
          "targets": {
            "dev": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "react-scripts start",
                "runCommand": "npm run dev"
              },
              "dependsOn": ["^build"],
              "options": {
                "script": "dev"
              },
              "configurations": {}
            },
            "build": {
              "dependsOn": ["cached:build"],
              "executor": "nx:noop",
              "options": {},
              "configurations": {}
            },
            "build:client": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "tsc --noEmit && tsc --module commonjs --noEmit",
                "runCommand": "npm run build:client"
              },
              "options": {
                "script": "build:client"
              },
              "configurations": {}
            },
            "build:server": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "tsc --project ./tsconfig.server.json",
                "runCommand": "npm run build:server"
              },
              "options": {
                "script": "build:server"
              },
              "configurations": {}
            },
            "test": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "react-scripts test",
                "runCommand": "npm run test"
              },
              "dependsOn": ["^build"],
              "options": {
                "script": "test"
              },
              "configurations": {}
            },
            "prod:ssr": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "node ./build/server/server/server.js",
                "runCommand": "npm run prod:ssr"
              },
              "options": {
                "script": "prod:ssr"
              },
              "configurations": {}
            },
            "cached:build": {
              "executor": "nx:run-commands",
              "metadata": {},
              "inputs": ["^production", "production"],
              "outputs": [
                "{projectRoot}/dist",
                "{projectRoot}/www",
                "{projectRoot}/temp",
                "{projectRoot}/build",
                "{projectRoot}/.angular",
                "{projectRoot}/.next",
                "{projectRoot}/next-env.d.ts"
              ],
              "dependsOn": ["^build"],
              "cache": true,
              "options": {
                "commands": ["npm run build:client", "npm run build:server"],
                "parallel": true,
                "cwd": "packages/samples/headless-react"
              },
              "configurations": {}
            }
          },
          "sourceRoot": "packages/samples/headless-react",
          "projectType": "library",
          "$schema": "../../../node_modules/nx/schemas/project-schema.json",
          "implicitDependencies": [],
          "tags": []
        }
      },
      "@coveo/headless-ssr-samples-common": {
        "name": "@coveo/headless-ssr-samples-common",
        "type": "lib",
        "data": {
          "root": "packages/samples/headless-ssr",
          "targets": {
            "e2e": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "cypress run --browser chrome --e2e",
                "runCommand": "npm run e2e"
              },
              "dependsOn": ["build"],
              "options": {
                "script": "e2e"
              },
              "configurations": {}
            },
            "e2e:watch": {
              "executor": "nx:run-script",
              "options": {
                "script": "e2e:watch"
              },
              "metadata": {
                "scriptContent": "cypress open --browser chrome --e2e",
                "runCommand": "npm run e2e:watch"
              },
              "configurations": {}
            }
          },
          "sourceRoot": "packages/samples/headless-ssr",
          "name": "@coveo/headless-ssr-samples-common",
          "projectType": "library",
          "metadata": {
            "targetGroups": {
              "NPM Scripts": ["e2e", "e2e:watch"]
            }
          },
          "implicitDependencies": [],
          "tags": []
        }
      },
      "atomic-react-samples": {
        "name": "atomic-react-samples",
        "type": "lib",
        "data": {
          "root": "packages/samples/atomic-react",
          "name": "atomic-react-samples",
          "metadata": {
            "targetGroups": {
              "NPM Scripts": [
                "build",
                "dev",
                "dev:webpack",
                "build:assets",
                "e2e:watch",
                "build",
                "dev",
                "dev:webpack",
                "build:assets",
                "e2e:watch"
              ]
            }
          },
          "targets": {
            "build": {
              "dependsOn": ["cached:build"],
              "executor": "nx:noop",
              "options": {},
              "configurations": {}
            },
            "dev": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "npm run build:assets && npm run dev:webpack",
                "runCommand": "npm run dev"
              },
              "dependsOn": ["^build"],
              "options": {
                "script": "dev"
              },
              "configurations": {}
            },
            "dev:webpack": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "webpack serve",
                "runCommand": "npm run dev:webpack"
              },
              "options": {
                "script": "dev:webpack"
              },
              "configurations": {}
            },
            "build:assets": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "ncp ../../atomic-react/dist/assets public/assets && ncp ../../atomic-react/dist/lang public/lang public/assets && ncp ../../atomic/dist/atomic/themes public/themes",
                "runCommand": "npm run build:assets"
              },
              "options": {
                "script": "build:assets"
              },
              "configurations": {}
            },
            "e2e:watch": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "cypress open --browser chrome --e2e",
                "runCommand": "npm run e2e:watch"
              },
              "options": {
                "script": "e2e:watch"
              },
              "configurations": {}
            },
            "cached:build": {
              "executor": "nx:run-commands",
              "metadata": {},
              "inputs": ["^production", "production"],
              "outputs": ["{projectRoot}/public/dist"],
              "dependsOn": ["^build"],
              "cache": true,
              "options": {
                "commands": ["tsc --noEmit", "tsc --module commonjs --noEmit"],
                "parallel": true,
                "cwd": "packages/samples/atomic-react"
              },
              "configurations": {}
            }
          },
          "sourceRoot": "packages/samples/atomic-react",
          "projectType": "library",
          "$schema": "../../../node_modules/nx/schemas/project-schema.json",
          "namedInputs": {
            "negativeBuildOutputs": ["!{projectRoot}/public/dist"]
          },
          "implicitDependencies": [],
          "tags": []
        }
      },
      "atomic-next-samples": {
        "name": "atomic-next-samples",
        "type": "lib",
        "data": {
          "root": "packages/samples/atomic-next",
          "name": "atomic-next-samples",
          "metadata": {
            "targetGroups": {
              "NPM Scripts": [
                "build",
                "dev",
                "dev:nextjs",
                "build:assets",
                "e2e:watch",
                "e2e",
                "build",
                "dev",
                "dev:nextjs",
                "build:assets",
                "e2e:watch",
                "e2e"
              ]
            }
          },
          "targets": {
            "build": {
              "dependsOn": ["cached:build"],
              "executor": "nx:noop",
              "options": {},
              "configurations": {}
            },
            "dev": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "npm run build:assets && npm run dev:nextjs",
                "runCommand": "npm run dev"
              },
              "dependsOn": ["^build"],
              "options": {
                "script": "dev"
              },
              "configurations": {}
            },
            "dev:nextjs": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "next dev",
                "runCommand": "npm run dev:nextjs"
              },
              "options": {
                "script": "dev:nextjs"
              },
              "configurations": {}
            },
            "build:assets": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "ncp ../../atomic-react/dist/assets public/assets && ncp ../../atomic-react/dist/lang public/lang public/assets",
                "runCommand": "npm run build:assets"
              },
              "options": {
                "script": "build:assets"
              },
              "configurations": {}
            },
            "e2e:watch": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "cypress open --browser chrome --e2e",
                "runCommand": "npm run e2e:watch"
              },
              "options": {
                "script": "e2e:watch"
              },
              "configurations": {}
            },
            "e2e": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "cypress run --browser chrome",
                "runCommand": "npm run e2e"
              },
              "dependsOn": ["build"],
              "options": {
                "script": "e2e"
              },
              "configurations": {}
            },
            "cached:build": {
              "executor": "nx:run-commands",
              "metadata": {},
              "inputs": ["^production", "production"],
              "outputs": [
                "{projectRoot}/dist",
                "{projectRoot}/www",
                "{projectRoot}/temp",
                "{projectRoot}/build",
                "{projectRoot}/.angular",
                "{projectRoot}/.next",
                "{projectRoot}/next-env.d.ts"
              ],
              "dependsOn": ["^build"],
              "cache": true,
              "options": {
                "commands": [
                  "npx next build",
                  "tsc --noEmit",
                  "tsc --module commonjs --noEmit"
                ],
                "parallel": true,
                "cwd": "packages/samples/atomic-next"
              },
              "configurations": {}
            }
          },
          "sourceRoot": "packages/samples/atomic-next",
          "projectType": "library",
          "$schema": "../../../node_modules/nx/schemas/project-schema.json",
          "implicitDependencies": [],
          "tags": []
        }
      },
      "atomic-hosted-page": {
        "name": "atomic-hosted-page",
        "type": "lib",
        "data": {
          "root": "packages/atomic-hosted-page",
          "name": "atomic-hosted-page",
          "metadata": {
            "targetGroups": {
              "NPM Scripts": [
                "clean",
                "build",
                "dev",
                "e2e:watch",
                "e2e",
                "validate:definitions",
                "publish:npm",
                "publish:bump",
                "promote:npm:latest",
                "clean",
                "build",
                "dev",
                "e2e:watch",
                "e2e",
                "validate:definitions",
                "publish:npm",
                "publish:bump",
                "promote:npm:latest"
              ]
            }
          },
          "targets": {
            "clean": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "rimraf -rf dist/*",
                "runCommand": "npm run clean"
              },
              "options": {
                "script": "clean"
              },
              "configurations": {}
            },
            "build": {
              "dependsOn": ["cached:build:stencil", "validate:definitions"],
              "inputs": [],
              "outputs": [],
              "executor": "nx:noop",
              "options": {},
              "configurations": {}
            },
            "dev": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "node --max_old_space_size=6144 ../../node_modules/@stencil/core/bin/stencil build --dev --watch --serve",
                "runCommand": "npm run dev"
              },
              "dependsOn": ["^build"],
              "options": {
                "script": "dev"
              },
              "configurations": {}
            },
            "e2e:watch": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "cypress open --browser chrome --e2e",
                "runCommand": "npm run e2e:watch"
              },
              "options": {
                "script": "e2e:watch"
              },
              "configurations": {}
            },
            "e2e": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "cypress run --browser chrome",
                "runCommand": "npm run e2e"
              },
              "dependsOn": ["build"],
              "options": {
                "script": "e2e"
              },
              "configurations": {}
            },
            "validate:definitions": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "tsc --noEmit --esModuleInterop --skipLibCheck ./dist/types/components.d.ts",
                "runCommand": "npm run validate:definitions"
              },
              "dependsOn": ["^build", "cached:build:stencil"],
              "inputs": [],
              "outputs": [],
              "options": {
                "script": "validate:definitions"
              },
              "configurations": {}
            },
            "publish:npm": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "npm run-script -w=@coveo/release npm-publish",
                "runCommand": "npm run publish:npm"
              },
              "options": {
                "script": "publish:npm"
              },
              "configurations": {}
            },
            "publish:bump": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "npm run-script -w=@coveo/release bump",
                "runCommand": "npm run publish:bump"
              },
              "options": {
                "script": "publish:bump"
              },
              "configurations": {}
            },
            "promote:npm:latest": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "node ../../scripts/deploy/update-npm-tag.mjs latest",
                "runCommand": "npm run promote:npm:latest"
              },
              "options": {
                "script": "promote:npm:latest"
              },
              "configurations": {}
            },
            "nx-release-publish": {
              "dependsOn": ["^nx-release-publish"],
              "executor": "@nx/js:release-publish",
              "options": {},
              "configurations": {}
            },
            "release:phase1": {
              "dependsOn": ["^release:phase1", "^release:phase2"],
              "executor": "nx:run-script",
              "options": {
                "script": "publish:bump"
              },
              "configurations": {}
            },
            "release:build": {
              "dependsOn": ["^release:build", "release:phase1"],
              "executor": "nx:run-script",
              "options": {
                "script": "build"
              },
              "configurations": {}
            },
            "release:phase2": {
              "dependsOn": ["release:build", "release:phase1"],
              "executor": "nx:run-script",
              "options": {
                "script": "publish:npm"
              },
              "configurations": {}
            },
            "cached:build:stencil": {
              "executor": "nx:run-commands",
              "metadata": {},
              "cache": true,
              "dependsOn": ["^build"],
              "inputs": ["^production", "production"],
              "outputs": [
                "{projectRoot}/dist",
                "{projectRoot}/www",
                "{projectRoot}/loader",
                "{projectRoot}/src/components.d.ts"
              ],
              "options": {
                "command": "node --max_old_space_size=6144 ../../node_modules/@stencil/core/bin/stencil build",
                "cwd": "packages/atomic-hosted-page"
              },
              "configurations": {}
            }
          },
          "sourceRoot": "packages/atomic-hosted-page",
          "projectType": "library",
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "namedInputs": {
            "negativeBuildOutputs": [
              "!{projectRoot}/dist",
              "!{projectRoot}/www",
              "!{projectRoot}/loader",
              "!{projectRoot}/src/components.d.ts"
            ]
          },
          "implicitDependencies": [],
          "tags": []
        }
      },
      "atomic-angular-samples": {
        "name": "atomic-angular-samples",
        "type": "lib",
        "data": {
          "root": "packages/samples/angular",
          "name": "atomic-angular-samples",
          "metadata": {
            "targetGroups": {
              "NPM Scripts": [
                "ng",
                "build",
                "build:angular",
                "dev",
                "dev:angular",
                "build:assets",
                "ng",
                "build",
                "build:angular",
                "dev",
                "dev:angular",
                "build:assets"
              ]
            }
          },
          "targets": {
            "ng": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "ng",
                "runCommand": "npm run ng"
              },
              "options": {
                "script": "ng"
              },
              "configurations": {}
            },
            "build": {
              "dependsOn": ["cached:build"],
              "executor": "nx:noop",
              "options": {},
              "configurations": {}
            },
            "build:angular": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "ng build",
                "runCommand": "npm run build:angular"
              },
              "options": {
                "script": "build:angular"
              },
              "configurations": {}
            },
            "dev": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "npm run build:assets && npm run dev:angular",
                "runCommand": "npm run dev"
              },
              "dependsOn": ["^build"],
              "options": {
                "script": "dev"
              },
              "configurations": {}
            },
            "dev:angular": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "ng serve --host=0.0.0.0",
                "runCommand": "npm run dev:angular"
              },
              "options": {
                "script": "dev:angular"
              },
              "configurations": {}
            },
            "build:assets": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "ncp ../../atomic-angular/projects/atomic-angular/dist/assets src/assets && ncp ../../atomic-angular/projects/atomic-angular/dist/lang src/lang",
                "runCommand": "npm run build:assets"
              },
              "options": {
                "script": "build:assets"
              },
              "configurations": {}
            },
            "cached:build": {
              "executor": "nx:run-commands",
              "metadata": {},
              "inputs": ["^production", "production"],
              "outputs": [
                "{projectRoot}/dist",
                "{projectRoot}/www",
                "{projectRoot}/temp",
                "{projectRoot}/build",
                "{projectRoot}/.angular",
                "{projectRoot}/.next",
                "{projectRoot}/next-env.d.ts"
              ],
              "dependsOn": ["^build", "clean"],
              "cache": true,
              "options": {
                "commands": ["npm run build:assets", "npm run build:angular"],
                "parallel": false,
                "cwd": "packages/samples/angular"
              },
              "configurations": {}
            }
          },
          "sourceRoot": "packages/samples/angular",
          "projectType": "library",
          "$schema": "../../../node_modules/nx/schemas/project-schema.json",
          "implicitDependencies": [],
          "tags": []
        }
      },
      "atomic-stencil-samples": {
        "name": "atomic-stencil-samples",
        "type": "lib",
        "data": {
          "root": "packages/samples/stencil",
          "name": "atomic-stencil-samples",
          "metadata": {
            "targetGroups": {
              "NPM Scripts": [
                "dev",
                "build",
                "e2e:watch",
                "dev",
                "build",
                "e2e:watch"
              ]
            }
          },
          "targets": {
            "dev": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "stencil build --dev --watch --serve --port 3666 --no-open",
                "runCommand": "npm run dev"
              },
              "dependsOn": ["^build"],
              "options": {
                "script": "dev"
              },
              "configurations": {}
            },
            "build": {
              "dependsOn": ["cached:build:stencil"],
              "inputs": [],
              "outputs": [],
              "executor": "nx:noop",
              "options": {},
              "configurations": {}
            },
            "e2e:watch": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "cypress open --browser chrome --e2e",
                "runCommand": "npm run e2e:watch"
              },
              "options": {
                "script": "e2e:watch"
              },
              "configurations": {}
            },
            "cached:build:stencil": {
              "executor": "nx:run-commands",
              "metadata": {},
              "cache": true,
              "dependsOn": ["^build"],
              "inputs": ["^production", "production"],
              "outputs": [
                "{projectRoot}/www",
                "{projectRoot}/src/components.d.ts"
              ],
              "options": {
                "command": "node --max_old_space_size=6144 ../../../node_modules/@stencil/core/bin/stencil build",
                "cwd": "packages/samples/stencil"
              },
              "configurations": {}
            }
          },
          "sourceRoot": "packages/samples/stencil",
          "projectType": "library",
          "$schema": "../../../node_modules/nx/schemas/project-schema.json",
          "namedInputs": {
            "negativeBuildOutputs": [
              "!{projectRoot}/www",
              "!{projectRoot}/src/components.d.ts"
            ]
          },
          "implicitDependencies": [],
          "tags": []
        }
      },
      "atomic-angular-builder": {
        "name": "atomic-angular-builder",
        "type": "lib",
        "data": {
          "root": "packages/atomic-angular",
          "name": "atomic-angular-builder",
          "metadata": {
            "targetGroups": {
              "NPM Scripts": [
                "ng",
                "dev",
                "build",
                "build:bundles",
                "build:assets",
                "publish:npm",
                "publish:bump",
                "ng",
                "dev",
                "build",
                "build:bundles",
                "build:assets",
                "publish:npm",
                "publish:bump"
              ]
            }
          },
          "targets": {
            "ng": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "ng",
                "runCommand": "npm run ng"
              },
              "options": {
                "script": "ng"
              },
              "configurations": {}
            },
            "dev": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "ng serve",
                "runCommand": "npm run dev"
              },
              "dependsOn": ["^build"],
              "options": {
                "script": "dev"
              },
              "configurations": {}
            },
            "build": {
              "dependsOn": ["cached:build"],
              "executor": "nx:noop",
              "options": {},
              "configurations": {}
            },
            "build:bundles": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "ng build",
                "runCommand": "npm run build:bundles"
              },
              "options": {
                "script": "build:bundles"
              },
              "configurations": {}
            },
            "build:assets": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "ncp ../atomic/dist/atomic/assets projects/atomic-angular/dist/assets && ncp ../atomic/dist/atomic/lang projects/atomic-angular/dist/lang",
                "runCommand": "npm run build:assets"
              },
              "options": {
                "script": "build:assets"
              },
              "configurations": {}
            },
            "publish:npm": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "node ./scripts/publish-npm.mjs",
                "runCommand": "npm run publish:npm"
              },
              "options": {
                "script": "publish:npm"
              },
              "configurations": {}
            },
            "publish:bump": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "node ./scripts/bump.mjs",
                "runCommand": "npm run publish:bump"
              },
              "options": {
                "script": "publish:bump"
              },
              "configurations": {}
            },
            "cached:build": {
              "executor": "nx:run-commands",
              "metadata": {},
              "inputs": ["^production", "production"],
              "outputs": ["{projectRoot}/projects/atomic-angular/dist"],
              "dependsOn": ["^build"],
              "cache": true,
              "options": {
                "commands": ["npm run build:bundles", "npm run build:assets"],
                "parallel": false,
                "cwd": "packages/atomic-angular"
              },
              "configurations": {}
            }
          },
          "sourceRoot": "packages/atomic-angular",
          "projectType": "library",
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "namedInputs": {
            "negativeBuildOutputs": [
              "!{projectRoot}/projects/atomic-angular/dist"
            ]
          },
          "implicitDependencies": [],
          "tags": []
        }
      },
      "headless-react": {
        "name": "headless-react",
        "type": "lib",
        "data": {
          "root": "packages/headless-react",
          "name": "headless-react",
          "metadata": {
            "targetGroups": {
              "NPM Scripts": [
                "build",
                "clean",
                "test",
                "test:watch",
                "lint",
                "publish:npm",
                "publish:bump",
                "promote:npm:latest",
                "build",
                "clean",
                "test",
                "test:watch",
                "lint",
                "publish:npm",
                "publish:bump",
                "promote:npm:latest"
              ]
            }
          },
          "targets": {
            "build": {
              "dependsOn": ["cached:build"],
              "executor": "nx:noop",
              "options": {},
              "configurations": {}
            },
            "clean": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "rimraf dist",
                "runCommand": "npm run clean"
              },
              "options": {
                "script": "clean"
              },
              "configurations": {}
            },
            "test": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "jest",
                "runCommand": "npm run test"
              },
              "dependsOn": ["^build"],
              "options": {
                "script": "test"
              },
              "configurations": {}
            },
            "test:watch": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "jest --watch --colors --no-cache",
                "runCommand": "npm run test:watch"
              },
              "options": {
                "script": "test:watch"
              },
              "configurations": {}
            },
            "lint": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "eslint .; publint",
                "runCommand": "npm run lint"
              },
              "options": {
                "script": "lint"
              },
              "configurations": {}
            },
            "publish:npm": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "npm run-script -w=@coveo/release npm-publish",
                "runCommand": "npm run publish:npm"
              },
              "options": {
                "script": "publish:npm"
              },
              "configurations": {}
            },
            "publish:bump": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "npm run-script -w=@coveo/release bump",
                "runCommand": "npm run publish:bump"
              },
              "options": {
                "script": "publish:bump"
              },
              "configurations": {}
            },
            "promote:npm:latest": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "node ../../scripts/deploy/update-npm-tag.mjs latest",
                "runCommand": "npm run promote:npm:latest"
              },
              "options": {
                "script": "promote:npm:latest"
              },
              "configurations": {}
            },
            "nx-release-publish": {
              "dependsOn": ["^nx-release-publish"],
              "executor": "@nx/js:release-publish",
              "options": {},
              "configurations": {}
            },
            "cached:build": {
              "executor": "nx:run-commands",
              "metadata": {},
              "inputs": ["^production", "production"],
              "outputs": [
                "{projectRoot}/dist",
                "{projectRoot}/www",
                "{projectRoot}/temp",
                "{projectRoot}/build",
                "{projectRoot}/.angular",
                "{projectRoot}/.next",
                "{projectRoot}/next-env.d.ts"
              ],
              "dependsOn": ["^build"],
              "cache": true,
              "options": {
                "command": "tsc --project ./tsconfig.json",
                "cwd": "packages/headless-react"
              },
              "configurations": {}
            },
            "release:phase1": {
              "dependsOn": ["^release:phase1", "^release:phase2"],
              "executor": "nx:run-script",
              "options": {
                "script": "publish:bump"
              },
              "configurations": {}
            },
            "release:build": {
              "dependsOn": ["^release:build", "release:phase1"],
              "executor": "nx:run-script",
              "options": {
                "script": "build"
              },
              "configurations": {}
            },
            "release:phase2": {
              "dependsOn": ["release:build", "release:phase1"],
              "executor": "nx:run-script",
              "options": {
                "script": "publish:npm"
              },
              "configurations": {}
            }
          },
          "sourceRoot": "packages/headless-react",
          "projectType": "library",
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "implicitDependencies": [],
          "tags": []
        }
      },
      "atomic-vuejs-samples": {
        "name": "atomic-vuejs-samples",
        "type": "lib",
        "data": {
          "root": "packages/samples/vuejs",
          "name": "atomic-vuejs-samples",
          "metadata": {
            "targetGroups": {
              "NPM Scripts": [
                "build",
                "dev",
                "build:assets",
                "dev:vue",
                "build:vue",
                "preview",
                "build",
                "dev",
                "build:assets",
                "dev:vue",
                "build:vue",
                "preview"
              ]
            }
          },
          "targets": {
            "build": {
              "dependsOn": ["cached:build"],
              "executor": "nx:noop",
              "options": {},
              "configurations": {}
            },
            "dev": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "npm run build:assets && npm run dev:vue",
                "runCommand": "npm run dev"
              },
              "dependsOn": ["^build"],
              "options": {
                "script": "dev"
              },
              "configurations": {}
            },
            "build:assets": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "ncp ../../atomic/dist/atomic/assets public/assets && ncp ../../atomic/dist/atomic/lang public/lang",
                "runCommand": "npm run build:assets"
              },
              "options": {
                "script": "build:assets"
              },
              "configurations": {}
            },
            "dev:vue": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "vite",
                "runCommand": "npm run dev:vue"
              },
              "options": {
                "script": "dev:vue"
              },
              "configurations": {}
            },
            "build:vue": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "vite build",
                "runCommand": "npm run build:vue"
              },
              "options": {
                "script": "build:vue"
              },
              "configurations": {}
            },
            "preview": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "vite preview",
                "runCommand": "npm run preview"
              },
              "options": {
                "script": "preview"
              },
              "configurations": {}
            },
            "cached:build": {
              "executor": "nx:run-commands",
              "metadata": {},
              "inputs": ["^production", "production"],
              "outputs": [
                "{projectRoot}/dist",
                "{projectRoot}/www",
                "{projectRoot}/temp",
                "{projectRoot}/build",
                "{projectRoot}/.angular",
                "{projectRoot}/.next",
                "{projectRoot}/next-env.d.ts"
              ],
              "dependsOn": ["^build", "clean"],
              "cache": true,
              "options": {
                "commands": ["npm run build:assets", "npm run build:vue"],
                "parallel": false,
                "cwd": "packages/samples/vuejs"
              },
              "configurations": {}
            }
          },
          "sourceRoot": "packages/samples/vuejs",
          "projectType": "library",
          "$schema": "../../../node_modules/nx/schemas/project-schema.json",
          "implicitDependencies": [],
          "tags": []
        }
      },
      "atomic-react": {
        "name": "atomic-react",
        "type": "lib",
        "data": {
          "root": "packages/atomic-react",
          "name": "atomic-react",
          "metadata": {
            "targetGroups": {
              "NPM Scripts": [
                "build",
                "clean",
                "build:bundles:esm",
                "build:bundles:cjs",
                "build:bundles:iife",
                "build:bundles",
                "publish:npm",
                "publish:bump",
                "promote:npm:latest",
                "build:assets",
                "build",
                "clean",
                "build:bundles:esm",
                "build:bundles:cjs",
                "build:bundles:iife",
                "build:bundles",
                "publish:npm",
                "publish:bump",
                "promote:npm:latest",
                "build:assets"
              ]
            }
          },
          "targets": {
            "build": {
              "dependsOn": ["cached:build"],
              "executor": "nx:noop",
              "options": {},
              "configurations": {}
            },
            "clean": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "rimraf -rf dist",
                "runCommand": "npm run clean"
              },
              "options": {
                "script": "clean"
              },
              "configurations": {}
            },
            "build:bundles:esm": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "tsc -p tsconfig.esm.json",
                "runCommand": "npm run build:bundles:esm"
              },
              "options": {
                "script": "build:bundles:esm"
              },
              "configurations": {}
            },
            "build:bundles:cjs": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "tsc -p tsconfig.cjs.json",
                "runCommand": "npm run build:bundles:cjs"
              },
              "options": {
                "script": "build:bundles:cjs"
              },
              "configurations": {}
            },
            "build:bundles:iife": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "rollup --config rollup.config.mjs",
                "runCommand": "npm run build:bundles:iife"
              },
              "options": {
                "script": "build:bundles:iife"
              },
              "configurations": {}
            },
            "build:bundles": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "concurrently \"npm run build:bundles:esm\" \"npm run build:bundles:cjs\"  \"npm run build:bundles:iife\"",
                "runCommand": "npm run build:bundles"
              },
              "options": {
                "script": "build:bundles"
              },
              "configurations": {}
            },
            "publish:npm": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "npm run-script -w=@coveo/release npm-publish",
                "runCommand": "npm run publish:npm"
              },
              "options": {
                "script": "publish:npm"
              },
              "configurations": {}
            },
            "publish:bump": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "npm run-script -w=@coveo/release bump",
                "runCommand": "npm run publish:bump"
              },
              "options": {
                "script": "publish:bump"
              },
              "configurations": {}
            },
            "promote:npm:latest": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "node ../../scripts/deploy/update-npm-tag.mjs latest",
                "runCommand": "npm run promote:npm:latest"
              },
              "options": {
                "script": "promote:npm:latest"
              },
              "configurations": {}
            },
            "build:assets": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "ncp ../atomic/dist/atomic/assets dist/assets && ncp ../atomic/dist/atomic/lang dist/lang ",
                "runCommand": "npm run build:assets"
              },
              "options": {
                "script": "build:assets"
              },
              "configurations": {}
            },
            "nx-release-publish": {
              "dependsOn": ["^nx-release-publish"],
              "executor": "@nx/js:release-publish",
              "options": {},
              "configurations": {}
            },
            "cached:build": {
              "executor": "nx:run-commands",
              "metadata": {},
              "inputs": ["^production", "production"],
              "outputs": [
                "{projectRoot}/dist",
                "{projectRoot}/www",
                "{projectRoot}/temp",
                "{projectRoot}/build",
                "{projectRoot}/.angular",
                "{projectRoot}/.next",
                "{projectRoot}/next-env.d.ts"
              ],
              "dependsOn": ["^build", "clean"],
              "cache": true,
              "options": {
                "commands": ["npm run build:bundles", "npm run build:assets"],
                "parallel": false,
                "cwd": "packages/atomic-react"
              },
              "configurations": {}
            },
            "release:phase1": {
              "dependsOn": ["^release:phase1", "^release:phase2"],
              "executor": "nx:run-script",
              "options": {
                "script": "publish:bump"
              },
              "configurations": {}
            },
            "release:build": {
              "dependsOn": ["^release:build", "release:phase1"],
              "executor": "nx:run-script",
              "options": {
                "script": "build"
              },
              "configurations": {}
            },
            "release:phase2": {
              "dependsOn": ["release:build", "release:phase1"],
              "executor": "nx:run-script",
              "options": {
                "script": "publish:npm"
              },
              "configurations": {}
            }
          },
          "sourceRoot": "packages/atomic-react",
          "projectType": "library",
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "implicitDependencies": [],
          "tags": []
        }
      },
      "iife-samples": {
        "name": "iife-samples",
        "type": "lib",
        "data": {
          "root": "packages/samples/iife",
          "name": "iife-samples",
          "metadata": {
            "targetGroups": {
              "NPM Scripts": [
                "clean",
                "dev",
                "prod",
                "build:assets",
                "e2e:watch",
                "e2e",
                "clean",
                "dev",
                "prod",
                "build:assets",
                "e2e:watch",
                "e2e"
              ]
            }
          },
          "targets": {
            "clean": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "rimraf www/cdn",
                "runCommand": "npm run clean"
              },
              "options": {
                "script": "clean"
              },
              "configurations": {}
            },
            "dev": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "npm run build && npm run prod",
                "runCommand": "npm run dev"
              },
              "dependsOn": ["^build"],
              "options": {
                "script": "dev"
              },
              "configurations": {}
            },
            "prod": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "serve www",
                "runCommand": "npm run prod"
              },
              "dependsOn": ["build"],
              "options": {
                "script": "prod"
              },
              "configurations": {}
            },
            "build:assets": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "node build-assets.mjs",
                "runCommand": "npm run build:assets"
              },
              "options": {
                "script": "build:assets"
              },
              "configurations": {}
            },
            "e2e:watch": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "cypress open --browser chrome --e2e",
                "runCommand": "npm run e2e:watch"
              },
              "options": {
                "script": "e2e:watch"
              },
              "configurations": {}
            },
            "e2e": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "cypress run --browser chrome",
                "runCommand": "npm run e2e"
              },
              "dependsOn": ["build"],
              "options": {
                "script": "e2e"
              },
              "configurations": {}
            },
            "build": {
              "executor": "nx:noop",
              "inputs": ["^production", "production"],
              "dependsOn": ["cached:build"],
              "options": {},
              "configurations": {}
            },
            "cached:build": {
              "executor": "nx:run-commands",
              "metadata": {},
              "inputs": ["^production", "production"],
              "outputs": ["{projectRoot}/www/cdn"],
              "dependsOn": ["^build", "clean"],
              "cache": true,
              "options": {
                "command": "npm run build:assets",
                "cwd": "packages/samples/iife"
              },
              "configurations": {}
            }
          },
          "sourceRoot": "packages/samples/iife",
          "projectType": "library",
          "$schema": "../../../node_modules/nx/schemas/project-schema.json",
          "namedInputs": {
            "negativeBuildOutputs": ["!{projectRoot}/www/cdn"]
          },
          "implicitDependencies": [],
          "tags": []
        }
      },
      "headless": {
        "name": "headless",
        "type": "lib",
        "data": {
          "root": "packages/headless",
          "name": "headless",
          "metadata": {
            "targetGroups": {
              "NPM Scripts": [
                "dev",
                "build",
                "build:prod",
                "build:bundles",
                "build:definitions",
                "clean",
                "test",
                "test:watch",
                "test:unit",
                "test:integration",
                "publish:npm",
                "publish:bump",
                "promote:npm:latest",
                "build:doc",
                "build:doc:extract",
                "build:doc:parse",
                "dev",
                "build",
                "build:prod",
                "build:bundles",
                "build:definitions",
                "clean",
                "test",
                "test:watch",
                "test:unit",
                "test:integration",
                "publish:npm",
                "publish:bump",
                "promote:npm:latest",
                "build:doc",
                "build:doc:extract",
                "build:doc:parse"
              ]
            }
          },
          "targets": {
            "dev": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "concurrently \"npm run build:definitions -- -w\" \"npm run build:bundles -- dev\"",
                "runCommand": "npm run dev"
              },
              "dependsOn": ["^build"],
              "options": {
                "script": "dev"
              },
              "configurations": {}
            },
            "build": {
              "dependsOn": ["cached:build"],
              "executor": "nx:noop",
              "options": {},
              "configurations": {}
            },
            "build:prod": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "npm run build:definitions && npm run build:bundles",
                "runCommand": "npm run build:prod"
              },
              "options": {
                "script": "build:prod"
              },
              "configurations": {}
            },
            "build:bundles": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "node esbuild.mjs",
                "runCommand": "npm run build:bundles"
              },
              "options": {
                "script": "build:bundles"
              },
              "configurations": {}
            },
            "build:definitions": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "tsc -p src/tsconfig.build.json -d --emitDeclarationOnly --declarationDir dist/definitions",
                "runCommand": "npm run build:definitions"
              },
              "options": {
                "script": "build:definitions"
              },
              "configurations": {}
            },
            "clean": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "rimraf -rf dist/*",
                "runCommand": "npm run clean"
              },
              "options": {
                "script": "clean"
              },
              "configurations": {}
            },
            "test": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "jest",
                "runCommand": "npm run test"
              },
              "dependsOn": ["^build"],
              "options": {
                "script": "test"
              },
              "configurations": {}
            },
            "test:watch": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "jest --watch --colors --no-cache --silent=false",
                "runCommand": "npm run test:watch"
              },
              "options": {
                "script": "test:watch"
              },
              "configurations": {}
            },
            "test:unit": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "jest --testPathIgnorePatterns=src/integration-tests",
                "runCommand": "npm run test:unit"
              },
              "options": {
                "script": "test:unit"
              },
              "configurations": {}
            },
            "test:integration": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "jest --testPathPattern=src/integration-tests",
                "runCommand": "npm run test:integration"
              },
              "options": {
                "script": "test:integration"
              },
              "configurations": {}
            },
            "publish:npm": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "npm run-script -w=@coveo/release npm-publish",
                "runCommand": "npm run publish:npm"
              },
              "options": {
                "script": "publish:npm"
              },
              "configurations": {}
            },
            "publish:bump": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "npm run-script -w=@coveo/release bump",
                "runCommand": "npm run publish:bump"
              },
              "options": {
                "script": "publish:bump"
              },
              "configurations": {}
            },
            "promote:npm:latest": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "node ../../scripts/deploy/update-npm-tag.mjs latest",
                "runCommand": "npm run promote:npm:latest"
              },
              "options": {
                "script": "promote:npm:latest"
              },
              "configurations": {}
            },
            "build:doc": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "npm run build:doc:extract && npm run build:doc:parse",
                "runCommand": "npm run build:doc"
              },
              "options": {
                "script": "build:doc"
              },
              "configurations": {}
            },
            "build:doc:extract": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "node ./scripts/extract-documentation.mjs",
                "runCommand": "npm run build:doc:extract"
              },
              "options": {
                "script": "build:doc:extract"
              },
              "configurations": {}
            },
            "build:doc:parse": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "ts-node --project ./doc-parser/tsconfig.build.json ./doc-parser/doc-parser.ts",
                "runCommand": "npm run build:doc:parse"
              },
              "options": {
                "script": "build:doc:parse"
              },
              "configurations": {}
            },
            "nx-release-publish": {
              "dependsOn": ["^nx-release-publish"],
              "executor": "@nx/js:release-publish",
              "options": {},
              "configurations": {}
            },
            "cached:build": {
              "executor": "nx:run-commands",
              "metadata": {},
              "inputs": ["^production", "production"],
              "outputs": [
                "{projectRoot}/dist",
                "{projectRoot}/temp",
                "{workspaceRoot}/packages/atomic/src/external-builds"
              ],
              "dependsOn": ["^build"],
              "cache": true,
              "options": {
                "commands": ["npm run build:prod", "npm run build:doc"],
                "parallel": false,
                "cwd": "packages/headless"
              },
              "configurations": {}
            },
            "release:phase1": {
              "dependsOn": ["^release:phase1", "^release:phase2"],
              "executor": "nx:run-script",
              "options": {
                "script": "publish:bump"
              },
              "configurations": {}
            },
            "release:build": {
              "dependsOn": ["^release:build", "release:phase1"],
              "executor": "nx:run-script",
              "options": {
                "script": "build"
              },
              "configurations": {}
            },
            "release:phase2": {
              "dependsOn": ["release:build", "release:phase1"],
              "executor": "nx:run-script",
              "options": {
                "script": "publish:npm"
              },
              "configurations": {}
            }
          },
          "sourceRoot": "packages/headless",
          "projectType": "library",
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "namedInputs": {
            "negativeBuildOutputs": [
              "!{projectRoot}/dist",
              "!{projectRoot}/temp",
              "!{workspaceRoot}/packages/atomic/src/external-builds"
            ]
          },
          "implicitDependencies": [],
          "tags": []
        }
      },
      "quantic": {
        "name": "quantic",
        "type": "lib",
        "data": {
          "root": "packages/quantic",
          "name": "quantic",
          "metadata": {
            "targetGroups": {
              "NPM Scripts": [
                "test",
                "lint:check:tests",
                "lint:fix",
                "lint:fix:js",
                "lint:fix:apex",
                "build:staticresources",
                "build",
                "dev",
                "dev:sfdx",
                "test:unit",
                "test:unit:debug",
                "test:unit:watch",
                "test:unit:coverage",
                "validate:types",
                "e2e:watch",
                "e2e",
                "e2e:detailed",
                "scratch:create",
                "setup:examples",
                "deploy:main",
                "deploy:examples",
                "scratch:dev",
                "prebuild:doc",
                "build:doc",
                "publish:sfdx",
                "promote:sfdx",
                "promote:sfdx:ci",
                "publish:npm",
                "publish:bump",
                "promote:npm:latest",
                "preinstall",
                "postinstall",
                "test",
                "lint:check:tests",
                "lint:fix",
                "lint:fix:js",
                "lint:fix:apex",
                "build:staticresources",
                "build",
                "dev",
                "dev:sfdx",
                "test:unit",
                "test:unit:debug",
                "test:unit:watch",
                "test:unit:coverage",
                "validate:types",
                "e2e:watch",
                "e2e",
                "e2e:detailed",
                "scratch:create",
                "setup:examples",
                "deploy:main",
                "deploy:examples",
                "scratch:dev",
                "prebuild:doc",
                "build:doc",
                "publish:sfdx",
                "promote:sfdx",
                "promote:sfdx:ci",
                "publish:npm",
                "publish:bump",
                "promote:npm:latest",
                "preinstall",
                "postinstall"
              ]
            }
          },
          "targets": {
            "test": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "npm run build:staticresources && npm run lint:check:tests && npm run validate:types && npm run test:unit",
                "runCommand": "npm run test"
              },
              "dependsOn": ["^build"],
              "options": {
                "script": "test"
              },
              "configurations": {}
            },
            "lint:check:tests": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "eslint force-app/main/default/lwc/ --format junit -o reports/eslint.xml",
                "runCommand": "npm run lint:check:tests"
              },
              "options": {
                "script": "lint:check:tests"
              },
              "configurations": {}
            },
            "lint:fix": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "npm run lint:fix:js",
                "runCommand": "npm run lint:fix"
              },
              "options": {
                "script": "lint:fix"
              },
              "configurations": {}
            },
            "lint:fix:js": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "eslint --fix force-app/main/default/lwc/ && eslint --fix force-app/examples/main/lwc/ && prettier \"force-app/{,**}/*.js\" --write",
                "runCommand": "npm run lint:fix:js"
              },
              "options": {
                "script": "lint:fix:js"
              },
              "configurations": {}
            },
            "lint:fix:apex": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "prettier \"force-app/{,**}/*.{cls,trigger}\" --write",
                "runCommand": "npm run lint:fix:apex"
              },
              "options": {
                "script": "lint:fix:apex"
              },
              "configurations": {}
            },
            "build:staticresources": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "node copy-static-resources.js",
                "runCommand": "npm run build:staticresources"
              },
              "options": {
                "script": "build:staticresources"
              },
              "configurations": {}
            },
            "build": {
              "dependsOn": ["cached:build"],
              "executor": "nx:noop",
              "options": {},
              "configurations": {}
            },
            "dev": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "npx rimraf .localdevserver && npm run build:staticresources && npm run dev:sfdx",
                "runCommand": "npm run dev"
              },
              "dependsOn": ["^build"],
              "options": {
                "script": "dev"
              },
              "configurations": {}
            },
            "dev:sfdx": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "sf project deploy start --source-dir force-app/main && sfdx force:lightning:lwc:start --port 3334",
                "runCommand": "npm run dev:sfdx"
              },
              "options": {
                "script": "dev:sfdx"
              },
              "configurations": {}
            },
            "test:unit": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "lwc-jest",
                "runCommand": "npm run test:unit"
              },
              "options": {
                "script": "test:unit"
              },
              "configurations": {}
            },
            "test:unit:debug": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "lwc-jest --debug",
                "runCommand": "npm run test:unit:debug"
              },
              "options": {
                "script": "test:unit:debug"
              },
              "configurations": {}
            },
            "test:unit:watch": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "lwc-jest --watch",
                "runCommand": "npm run test:unit:watch"
              },
              "options": {
                "script": "test:unit:watch"
              },
              "configurations": {}
            },
            "test:unit:coverage": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "lwc-jest --coverage",
                "runCommand": "npm run test:unit:coverage"
              },
              "options": {
                "script": "test:unit:coverage"
              },
              "configurations": {}
            },
            "validate:types": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "tsc",
                "runCommand": "npm run validate:types"
              },
              "options": {
                "script": "validate:types"
              },
              "configurations": {}
            },
            "e2e:watch": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "cypress open --browser chrome --e2e",
                "runCommand": "npm run e2e:watch"
              },
              "options": {
                "script": "e2e:watch"
              },
              "configurations": {}
            },
            "e2e": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "cypress run --browser chrome",
                "runCommand": "npm run e2e"
              },
              "dependsOn": ["build"],
              "options": {
                "script": "e2e"
              },
              "configurations": {}
            },
            "e2e:detailed": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "cypress run --browser chrome --headless --reporter cypress/reporters/detailed-reporter.js",
                "runCommand": "npm run e2e:detailed"
              },
              "options": {
                "script": "e2e:detailed"
              },
              "configurations": {}
            },
            "scratch:create": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "sf org create scratch --set-default --definition-file config/project-scratch-def.json --alias \"LWC\"",
                "runCommand": "npm run scratch:create"
              },
              "options": {
                "script": "scratch:create"
              },
              "configurations": {}
            },
            "setup:examples": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "../../node_modules/.bin/ts-node scripts/build/deploy-community.ts",
                "runCommand": "npm run setup:examples"
              },
              "options": {
                "script": "setup:examples"
              },
              "configurations": {}
            },
            "deploy:main": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "sf project deploy start --target-org LWC --source-dir force-app/main",
                "runCommand": "npm run deploy:main"
              },
              "options": {
                "script": "deploy:main"
              },
              "configurations": {}
            },
            "deploy:examples": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "sf project deploy start --target-org LWC --source-dir force-app/examples",
                "runCommand": "npm run deploy:examples"
              },
              "options": {
                "script": "deploy:examples"
              },
              "configurations": {}
            },
            "scratch:dev": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "npm run scratch:create && npm run deploy:main && npm run setup:examples",
                "runCommand": "npm run scratch:dev"
              },
              "options": {
                "script": "scratch:dev"
              },
              "configurations": {}
            },
            "prebuild:doc": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "mkdirp docs/out",
                "runCommand": "npm run prebuild:doc"
              },
              "options": {
                "script": "prebuild:doc"
              },
              "configurations": {}
            },
            "build:doc": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "jsdoc -c jsdoc-config.json",
                "runCommand": "npm run build:doc"
              },
              "options": {
                "script": "build:doc"
              },
              "configurations": {}
            },
            "publish:sfdx": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "../../node_modules/.bin/ts-node scripts/build/create-package.ts --remove-translations",
                "runCommand": "npm run publish:sfdx"
              },
              "dependsOn": ["build"],
              "options": {
                "script": "publish:sfdx"
              },
              "configurations": {}
            },
            "promote:sfdx": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "npm run publish:sfdx -- --promote",
                "runCommand": "npm run promote:sfdx"
              },
              "dependsOn": ["build"],
              "inputs": [],
              "outputs": [],
              "options": {
                "script": "promote:sfdx"
              },
              "configurations": {}
            },
            "promote:sfdx:ci": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "npm run publish:sfdx -- --promote --ci",
                "runCommand": "npm run promote:sfdx:ci"
              },
              "dependsOn": ["build"],
              "inputs": [],
              "outputs": [],
              "options": {
                "script": "promote:sfdx:ci"
              },
              "configurations": {}
            },
            "publish:npm": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "npm run-script -w=@coveo/release npm-publish",
                "runCommand": "npm run publish:npm"
              },
              "options": {
                "script": "publish:npm"
              },
              "configurations": {}
            },
            "publish:bump": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "npm run-script -w=@coveo/release bump",
                "runCommand": "npm run publish:bump"
              },
              "options": {
                "script": "publish:bump"
              },
              "configurations": {}
            },
            "promote:npm:latest": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "node ../../scripts/deploy/update-npm-tag.mjs latest",
                "runCommand": "npm run promote:npm:latest"
              },
              "options": {
                "script": "promote:npm:latest"
              },
              "configurations": {}
            },
            "preinstall": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "node scripts/npm/check-sfdx-project.js",
                "runCommand": "npm run preinstall"
              },
              "options": {
                "script": "preinstall"
              },
              "configurations": {}
            },
            "postinstall": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "node scripts/npm/setup-quantic.js",
                "runCommand": "npm run postinstall"
              },
              "options": {
                "script": "postinstall"
              },
              "configurations": {}
            },
            "nx-release-publish": {
              "dependsOn": ["^nx-release-publish"],
              "executor": "@nx/js:release-publish",
              "options": {},
              "configurations": {}
            },
            "cached:build": {
              "executor": "nx:run-commands",
              "metadata": {},
              "inputs": ["^production", "production"],
              "outputs": [
                "{projectRoot}/docs/out",
                "{projectRoot}/force-app/main/default/staticresources/coveobueno",
                "{projectRoot}/force-app/main/default/staticresources/coveoheadless"
              ],
              "dependsOn": ["^build"],
              "cache": true,
              "options": {
                "commands": [
                  "npm run build:staticresources",
                  "npm run build:doc"
                ],
                "parallel": true,
                "cwd": "packages/quantic"
              },
              "configurations": {}
            },
            "release:phase1": {
              "dependsOn": ["^release:phase1", "^release:phase2"],
              "executor": "nx:run-script",
              "options": {
                "script": "publish:bump"
              },
              "configurations": {}
            },
            "release:build": {
              "dependsOn": ["^release:build", "release:phase1"],
              "executor": "nx:run-script",
              "options": {
                "script": "build"
              },
              "configurations": {}
            },
            "release:phase2": {
              "dependsOn": ["release:build", "release:phase1"],
              "executor": "nx:run-script",
              "options": {
                "script": "publish:npm"
              },
              "configurations": {}
            }
          },
          "sourceRoot": "packages/quantic",
          "projectType": "library",
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "namedInputs": {
            "negativeBuildOutputs": [
              "!{projectRoot}/docs/out",
              "!{projectRoot}/force-app/main/default/staticresources/coveobueno",
              "!{projectRoot}/force-app/main/default/staticresources/coveoheadless"
            ],
            "negativeNonBuildOutputs": ["!{projectRoot}/reports"]
          },
          "implicitDependencies": [],
          "tags": []
        }
      },
      "atomic": {
        "name": "atomic",
        "type": "lib",
        "data": {
          "root": "packages/atomic",
          "name": "atomic",
          "metadata": {
            "targetGroups": {
              "NPM Scripts": [
                "clean",
                "build",
                "build:locales",
                "start",
                "prod",
                "test",
                "test:watch",
                "e2e",
                "e2e:firefox",
                "e2e:watch",
                "e2e:hsp",
                "e2e:hsp:firefox",
                "e2e:hsp:watch",
                "e2e:snapshots",
                "e2e:snapshots:watch",
                "e2e:insight",
                "e2e:insight:watch",
                "publish:npm",
                "publish:bump",
                "promote:npm:latest",
                "validate:definitions",
                "clean",
                "build",
                "build:locales",
                "start",
                "prod",
                "test",
                "test:watch",
                "e2e",
                "e2e:firefox",
                "e2e:watch",
                "e2e:hsp",
                "e2e:hsp:firefox",
                "e2e:hsp:watch",
                "e2e:snapshots",
                "e2e:snapshots:watch",
                "e2e:insight",
                "e2e:insight:watch",
                "publish:npm",
                "publish:bump",
                "promote:npm:latest",
                "validate:definitions"
              ]
            }
          },
          "targets": {
            "clean": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "rimraf -rf dist/*",
                "runCommand": "npm run clean"
              },
              "options": {
                "script": "clean"
              },
              "configurations": {}
            },
            "build": {
              "dependsOn": [
                "cached:build:stencil",
                "validate:definitions",
                "build-storybook"
              ],
              "inputs": [],
              "outputs": [],
              "executor": "nx:noop",
              "options": {},
              "configurations": {}
            },
            "build:locales": {
              "dependsOn": ["create-generated-folder"],
              "executor": "nx:run-commands",
              "options": {
                "commands": [
                  "node ./scripts/split-locales.mjs",
                  "node ./scripts/copy-dayjs-locales.mjs"
                ],
                "parallel": false,
                "cwd": "packages/atomic"
              },
              "configurations": {}
            },
            "start": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "nx dev atomic",
                "runCommand": "npm run start"
              },
              "options": {
                "script": "start"
              },
              "configurations": {}
            },
            "prod": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "npx serve www -l 3333 --no-request-logging",
                "runCommand": "npm run prod"
              },
              "dependsOn": ["build"],
              "options": {
                "script": "prod"
              },
              "configurations": {}
            },
            "test": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "npm run build:locales && stencil test --spec",
                "runCommand": "npm run test"
              },
              "dependsOn": ["^build"],
              "options": {
                "script": "test"
              },
              "configurations": {}
            },
            "test:watch": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "stencil test --spec --watchAll",
                "runCommand": "npm run test:watch"
              },
              "options": {
                "script": "test:watch"
              },
              "configurations": {}
            },
            "e2e": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "cypress run --browser chrome",
                "runCommand": "npm run e2e"
              },
              "dependsOn": ["build"],
              "options": {
                "script": "e2e"
              },
              "configurations": {}
            },
            "e2e:firefox": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "cypress run --browser firefox",
                "runCommand": "npm run e2e:firefox"
              },
              "options": {
                "script": "e2e:firefox"
              },
              "configurations": {}
            },
            "e2e:watch": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "cypress open --browser chrome --e2e",
                "runCommand": "npm run e2e:watch"
              },
              "options": {
                "script": "e2e:watch"
              },
              "configurations": {}
            },
            "e2e:hsp": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "cypress run --config-file cypress-hsp.config.ts --browser chrome",
                "runCommand": "npm run e2e:hsp"
              },
              "options": {
                "script": "e2e:hsp"
              },
              "configurations": {}
            },
            "e2e:hsp:firefox": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "cypress run --config-file cypress-hsp.config.ts --browser firefox",
                "runCommand": "npm run e2e:hsp:firefox"
              },
              "options": {
                "script": "e2e:hsp:firefox"
              },
              "configurations": {}
            },
            "e2e:hsp:watch": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "cypress open --config-file cypress-hsp.config.ts",
                "runCommand": "npm run e2e:hsp:watch"
              },
              "options": {
                "script": "e2e:hsp:watch"
              },
              "configurations": {}
            },
            "e2e:snapshots": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "cypress run --config-file cypress-screenshots.config.ts --browser chrome",
                "runCommand": "npm run e2e:snapshots"
              },
              "options": {
                "script": "e2e:snapshots"
              },
              "configurations": {}
            },
            "e2e:snapshots:watch": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "cypress open --config-file cypress-screenshots.config.ts --browser chrome",
                "runCommand": "npm run e2e:snapshots:watch"
              },
              "options": {
                "script": "e2e:snapshots:watch"
              },
              "configurations": {}
            },
            "e2e:insight": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "cypress run --config-file cypress-insight-panel.config.ts --browser chrome",
                "runCommand": "npm run e2e:insight"
              },
              "options": {
                "script": "e2e:insight"
              },
              "configurations": {}
            },
            "e2e:insight:watch": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "cypress open --config-file cypress-insight-panel.config.ts --browser chrome",
                "runCommand": "npm run e2e:insight:watch"
              },
              "options": {
                "script": "e2e:insight:watch"
              },
              "configurations": {}
            },
            "publish:npm": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "npm run-script -w=@coveo/release npm-publish",
                "runCommand": "npm run publish:npm"
              },
              "options": {
                "script": "publish:npm"
              },
              "configurations": {}
            },
            "publish:bump": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "npm run-script -w=@coveo/release bump",
                "runCommand": "npm run publish:bump"
              },
              "options": {
                "script": "publish:bump"
              },
              "configurations": {}
            },
            "promote:npm:latest": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "node ../../scripts/deploy/update-npm-tag.mjs latest",
                "runCommand": "npm run promote:npm:latest"
              },
              "options": {
                "script": "promote:npm:latest"
              },
              "configurations": {}
            },
            "validate:definitions": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "tsc --noEmit --esModuleInterop --skipLibCheck ./dist/types/components.d.ts",
                "runCommand": "npm run validate:definitions"
              },
              "dependsOn": ["^build", "cached:build:stencil"],
              "inputs": [],
              "outputs": [],
              "options": {
                "script": "validate:definitions"
              },
              "configurations": {}
            },
            "nx-release-publish": {
              "dependsOn": ["^nx-release-publish"],
              "executor": "@nx/js:release-publish",
              "options": {},
              "configurations": {}
            },
            "dev": {
              "executor": "nx:noop",
              "dependsOn": ["storybook", "stencil:dev", "cem:dev"],
              "options": {},
              "configurations": {}
            },
            "release:phase1": {
              "dependsOn": ["^release:phase1", "^release:phase2"],
              "executor": "nx:run-script",
              "options": {
                "script": "publish:bump"
              },
              "configurations": {}
            },
            "release:build": {
              "dependsOn": ["^release:build", "release:phase1"],
              "executor": "nx:run-script",
              "options": {
                "script": "build"
              },
              "configurations": {}
            },
            "release:phase2": {
              "dependsOn": ["release:build", "release:phase1"],
              "executor": "nx:run-script",
              "options": {
                "script": "publish:npm"
              },
              "configurations": {}
            },
            "cached:build:stencil": {
              "executor": "nx:run-commands",
              "metadata": {},
              "cache": true,
              "dependsOn": ["^build", "build:locales"],
              "inputs": ["^production", "production"],
              "outputs": [
                "{projectRoot}/dist",
                "{projectRoot}/www",
                "{projectRoot}/docs",
                "{projectRoot}/loader",
                "{projectRoot}/src/components.d.ts"
              ],
              "options": {
                "command": "node --max_old_space_size=6144 ../../node_modules/@stencil/core/bin/stencil build",
                "cwd": "packages/atomic"
              },
              "configurations": {}
            },
            "build-storybook": {
              "executor": "nx:run-commands",
              "metadata": {},
              "cache": true,
              "inputs": [
                "default",
                "^production",
                "{projectRoot}/.storybook/**/*",
                "{projectRoot}/tsconfig.storybook.json"
              ],
              "dependsOn": ["cached:build:stencil", "cem:build", "list-assets"],
              "outputs": ["{projectRoot}/dist-storybook"],
              "options": {
                "command": "npx storybook build -o dist-storybook",
                "cwd": "packages/atomic"
              },
              "configurations": {}
            },
            "create-generated-folder": {
              "executor": "nx:run-commands",
              "options": {
                "commands": ["node ./scripts/create-generated-folder.mjs"],
                "cwd": "packages/atomic"
              },
              "configurations": {}
            },
            "list-assets": {
              "dependsOn": ["cached:build:stencil"],
              "executor": "nx:run-commands",
              "options": {
                "commands": ["node ./scripts/list-assets.mjs"],
                "cwd": "packages/atomic"
              },
              "configurations": {}
            },
            "stencil:dev": {
              "dependsOn": ["^build", "build:locales"],
              "executor": "nx:run-commands",
              "options": {
                "command": "node --max_old_space_size=6144 ../../node_modules/@stencil/core/bin/stencil build --dev --watch --serve",
                "cwd": "packages/atomic"
              },
              "configurations": {}
            },
            "cem:dev": {
              "executor": "nx:run-commands",
              "options": {
                "command": "cem analyze --watch",
                "cwd": "packages/atomic"
              },
              "configurations": {}
            },
            "cem:build": {
              "executor": "nx:run-commands",
              "options": {
                "command": "cem analyze",
                "cwd": "packages/atomic"
              },
              "configurations": {}
            },
            "wait-on:dist": {
              "executor": "nx:run-commands",
              "options": {
                "cwd": "packages/atomic",
                "command": "wait-on dist/atomic"
              },
              "configurations": {}
            },
            "storybook": {
              "executor": "nx:run-commands",
              "dependsOn": ["wait-on:dist"],
              "options": {
                "cwd": "packages/atomic",
                "command": "npx storybook dev -p 4400"
              },
              "configurations": {}
            },
            "test-storybook": {
              "executor": "nx:run-commands",
              "options": {
                "command": "test-storybook -c packages/atomic/.storybook --url=http://localhost:4400"
              },
              "configurations": {}
            }
          },
          "sourceRoot": "packages/atomic",
          "projectType": "library",
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "namedInputs": {
            "negativeBuildOutputs": [
              "!{projectRoot}/dist",
              "!{projectRoot}/www",
              "!{projectRoot}/docs",
              "!{projectRoot}/loader",
              "!{projectRoot}/src/components.d.ts"
            ],
            "buildInputs": [
              "{projectRoot}/stencil.config.ts",
              "{projectRoot}/collection-manifest.json",
              "{projectRoot}/tailwind.config.js",
              "{projectRoot}/svg.transform.js",
              "{projectRoot}/stencil-plugin/**",
              "!{projectRoot}/src/external-builds/**",
              "!{projectRoot}/src/generated/**",
              "!{projectRoot}/src/components/search/atomic-search-interface/lang/**"
            ]
          },
          "implicitDependencies": [],
          "tags": []
        }
      },
      "bueno": {
        "name": "bueno",
        "type": "lib",
        "data": {
          "root": "packages/bueno",
          "name": "bueno",
          "metadata": {
            "targetGroups": {
              "NPM Scripts": [
                "dev",
                "build",
                "build:bundles",
                "build:definitions",
                "clean",
                "test",
                "test:watch",
                "publish:npm",
                "publish:bump",
                "promote:npm:latest",
                "dev",
                "build",
                "build:bundles",
                "build:definitions",
                "clean",
                "test",
                "test:watch",
                "publish:npm",
                "publish:bump",
                "promote:npm:latest"
              ]
            }
          },
          "targets": {
            "dev": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "concurrently \"npm run build:definitions -- -w\" \"npm run build:bundles -- dev\"",
                "runCommand": "npm run dev"
              },
              "dependsOn": ["^build"],
              "options": {
                "script": "dev"
              },
              "configurations": {}
            },
            "build": {
              "dependsOn": ["cached:build"],
              "executor": "nx:noop",
              "options": {},
              "configurations": {}
            },
            "build:bundles": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "node esbuild.mjs",
                "runCommand": "npm run build:bundles"
              },
              "options": {
                "script": "build:bundles"
              },
              "configurations": {}
            },
            "build:definitions": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "tsc -d --emitDeclarationOnly --declarationDir dist/definitions",
                "runCommand": "npm run build:definitions"
              },
              "options": {
                "script": "build:definitions"
              },
              "configurations": {}
            },
            "clean": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "rimraf -rf dist/*",
                "runCommand": "npm run clean"
              },
              "options": {
                "script": "clean"
              },
              "configurations": {}
            },
            "test": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "jest",
                "runCommand": "npm run test"
              },
              "dependsOn": ["^build"],
              "options": {
                "script": "test"
              },
              "configurations": {}
            },
            "test:watch": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "jest --watch --colors --no-cache",
                "runCommand": "npm run test:watch"
              },
              "options": {
                "script": "test:watch"
              },
              "configurations": {}
            },
            "publish:npm": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "npm run-script -w=@coveo/release npm-publish",
                "runCommand": "npm run publish:npm"
              },
              "options": {
                "script": "publish:npm"
              },
              "configurations": {}
            },
            "publish:bump": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "npm run-script -w=@coveo/release bump",
                "runCommand": "npm run publish:bump"
              },
              "options": {
                "script": "publish:bump"
              },
              "configurations": {}
            },
            "promote:npm:latest": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "node ../../scripts/deploy/update-npm-tag.mjs latest",
                "runCommand": "npm run promote:npm:latest"
              },
              "options": {
                "script": "promote:npm:latest"
              },
              "configurations": {}
            },
            "nx-release-publish": {
              "dependsOn": ["^nx-release-publish"],
              "executor": "@nx/js:release-publish",
              "options": {},
              "configurations": {}
            },
            "cached:build": {
              "executor": "nx:run-commands",
              "metadata": {},
              "inputs": ["^production", "production"],
              "outputs": [
                "{projectRoot}/dist",
                "{projectRoot}/www",
                "{projectRoot}/temp",
                "{projectRoot}/build",
                "{projectRoot}/.angular",
                "{projectRoot}/.next",
                "{projectRoot}/next-env.d.ts"
              ],
              "dependsOn": ["^build"],
              "cache": true,
              "options": {
                "commands": [
                  "npm run build:bundles",
                  "npm run build:definitions"
                ],
                "parallel": true,
                "cwd": "packages/bueno"
              },
              "configurations": {}
            },
            "release:phase1": {
              "dependsOn": ["^release:phase1", "^release:phase2"],
              "executor": "nx:run-script",
              "options": {
                "script": "publish:bump"
              },
              "configurations": {}
            },
            "release:build": {
              "dependsOn": ["^release:build", "release:phase1"],
              "executor": "nx:run-script",
              "options": {
                "script": "build"
              },
              "configurations": {}
            },
            "release:phase2": {
              "dependsOn": ["release:build", "release:phase1"],
              "executor": "nx:run-script",
              "options": {
                "script": "publish:npm"
              },
              "configurations": {}
            }
          },
          "sourceRoot": "packages/bueno",
          "projectType": "library",
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "implicitDependencies": [],
          "tags": []
        }
      },
      "auth": {
        "name": "auth",
        "type": "lib",
        "data": {
          "root": "packages/auth",
          "name": "auth",
          "metadata": {
            "targetGroups": {
              "NPM Scripts": [
                "dev",
                "build",
                "test",
                "test:watch",
                "build:bundles",
                "build:definitions",
                "clean",
                "publish:npm",
                "publish:bump",
                "promote:npm:latest",
                "e2e",
                "e2e:saml",
                "dev",
                "build",
                "test",
                "test:watch",
                "build:bundles",
                "build:definitions",
                "clean",
                "publish:npm",
                "publish:bump",
                "promote:npm:latest",
                "e2e",
                "e2e:saml"
              ]
            }
          },
          "targets": {
            "dev": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "concurrently \"npm run build:definitions -- -w\" \"npm run build:bundles -- dev\"",
                "runCommand": "npm run dev"
              },
              "dependsOn": ["^build"],
              "options": {
                "script": "dev"
              },
              "configurations": {}
            },
            "build": {
              "dependsOn": ["cached:build"],
              "executor": "nx:noop",
              "options": {},
              "configurations": {}
            },
            "test": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "jest",
                "runCommand": "npm run test"
              },
              "dependsOn": ["^build"],
              "options": {
                "script": "test"
              },
              "configurations": {}
            },
            "test:watch": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "jest --watch --colors --no-cache --silent=false",
                "runCommand": "npm run test:watch"
              },
              "options": {
                "script": "test:watch"
              },
              "configurations": {}
            },
            "build:bundles": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "node esbuild.mjs",
                "runCommand": "npm run build:bundles"
              },
              "options": {
                "script": "build:bundles"
              },
              "configurations": {}
            },
            "build:definitions": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "tsc -p src/tsconfig.build.json -d --emitDeclarationOnly --declarationDir dist/definitions",
                "runCommand": "npm run build:definitions"
              },
              "options": {
                "script": "build:definitions"
              },
              "configurations": {}
            },
            "clean": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "rimraf -rf dist/*",
                "runCommand": "npm run clean"
              },
              "options": {
                "script": "clean"
              },
              "configurations": {}
            },
            "publish:npm": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "npm run-script -w=@coveo/release npm-publish",
                "runCommand": "npm run publish:npm"
              },
              "options": {
                "script": "publish:npm"
              },
              "configurations": {}
            },
            "publish:bump": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "npm run-script -w=@coveo/release bump",
                "runCommand": "npm run publish:bump"
              },
              "options": {
                "script": "publish:bump"
              },
              "configurations": {}
            },
            "promote:npm:latest": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "node ../../scripts/deploy/update-npm-tag.mjs latest",
                "runCommand": "npm run promote:npm:latest"
              },
              "options": {
                "script": "promote:npm:latest"
              },
              "configurations": {}
            },
            "e2e": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "npm run e2e:saml",
                "runCommand": "npm run e2e"
              },
              "dependsOn": ["build"],
              "options": {
                "script": "e2e"
              },
              "configurations": {}
            },
            "e2e:saml": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "vite manual-e2e/saml/",
                "runCommand": "npm run e2e:saml"
              },
              "options": {
                "script": "e2e:saml"
              },
              "configurations": {}
            },
            "nx-release-publish": {
              "dependsOn": ["^nx-release-publish"],
              "executor": "@nx/js:release-publish",
              "options": {},
              "configurations": {}
            },
            "cached:build": {
              "executor": "nx:run-commands",
              "metadata": {},
              "inputs": ["^production", "production"],
              "outputs": [
                "{projectRoot}/dist",
                "{projectRoot}/www",
                "{projectRoot}/temp",
                "{projectRoot}/build",
                "{projectRoot}/.angular",
                "{projectRoot}/.next",
                "{projectRoot}/next-env.d.ts"
              ],
              "dependsOn": ["^build"],
              "cache": true,
              "options": {
                "commands": [
                  "npm run build:bundles",
                  "npm run build:definitions"
                ],
                "parallel": true,
                "cwd": "packages/auth"
              },
              "configurations": {}
            },
            "release:phase1": {
              "dependsOn": ["^release:phase1", "^release:phase2"],
              "executor": "nx:run-script",
              "options": {
                "script": "publish:bump"
              },
              "configurations": {}
            },
            "release:build": {
              "dependsOn": ["^release:build", "release:phase1"],
              "executor": "nx:run-script",
              "options": {
                "script": "build"
              },
              "configurations": {}
            },
            "release:phase2": {
              "dependsOn": ["release:build", "release:phase1"],
              "executor": "nx:run-script",
              "options": {
                "script": "publish:npm"
              },
              "configurations": {}
            }
          },
          "sourceRoot": "packages/auth",
          "projectType": "library",
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "implicitDependencies": [],
          "tags": []
        }
      },
      "release": {
        "name": "release",
        "type": "lib",
        "data": {
          "root": "utils/release",
          "name": "release",
          "metadata": {
            "targetGroups": {
              "NPM Scripts": [
                "git-lock",
                "bump",
                "npm-publish",
                "git-publish-all",
                "reify",
                "test",
                "git-lock",
                "bump",
                "npm-publish",
                "git-publish-all",
                "reify",
                "test"
              ]
            }
          },
          "targets": {
            "git-lock": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "./git-lock.mjs",
                "runCommand": "npm run git-lock"
              },
              "options": {
                "script": "git-lock"
              },
              "configurations": {}
            },
            "bump": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "./bump-package.mjs",
                "runCommand": "npm run bump"
              },
              "options": {
                "script": "bump"
              },
              "configurations": {}
            },
            "npm-publish": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "./npm-publish-package.mjs",
                "runCommand": "npm run npm-publish"
              },
              "options": {
                "script": "npm-publish"
              },
              "configurations": {}
            },
            "git-publish-all": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "./git-publish-all.mjs",
                "runCommand": "npm run git-publish-all"
              },
              "options": {
                "script": "git-publish-all"
              },
              "configurations": {}
            },
            "reify": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "./reify.mjs",
                "runCommand": "npm run reify"
              },
              "options": {
                "script": "reify"
              },
              "configurations": {}
            },
            "test": {
              "executor": "nx:run-script",
              "metadata": {
                "scriptContent": "tsc",
                "runCommand": "npm run test"
              },
              "dependsOn": ["^build"],
              "options": {
                "script": "test"
              },
              "configurations": {}
            }
          },
          "sourceRoot": "utils/release",
          "projectType": "library",
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "implicitDependencies": [],
          "tags": []
        }
      }
    },
    "dependencies": {
      "atomic-angular": [
        {
          "source": "atomic-angular",
          "target": "atomic-angular-builder",
          "type": "implicit"
        },
        {
          "source": "atomic-angular",
          "target": "headless",
          "type": "static"
        },
        {
          "source": "atomic-angular",
          "target": "atomic",
          "type": "static"
        }
      ],
      "headless-ssr-samples-pages-router": [
        {
          "source": "headless-ssr-samples-pages-router",
          "target": "@coveo/headless-ssr-samples-common",
          "type": "static"
        }
      ],
      "headless-ssr-samples-app-router": [
        {
          "source": "headless-ssr-samples-app-router",
          "target": "@coveo/headless-ssr-samples-common",
          "type": "static"
        }
      ],
      "headless-react-samples": [
        {
          "source": "headless-react-samples",
          "target": "auth",
          "type": "static"
        },
        {
          "source": "headless-react-samples",
          "target": "headless",
          "type": "static"
        }
      ],
      "@coveo/headless-ssr-samples-common": [
        {
          "source": "@coveo/headless-ssr-samples-common",
          "target": "headless-react",
          "type": "static"
        },
        {
          "source": "@coveo/headless-ssr-samples-common",
          "target": "headless",
          "type": "static"
        }
      ],
      "atomic-react-samples": [
        {
          "source": "atomic-react-samples",
          "target": "atomic",
          "type": "static"
        },
        {
          "source": "atomic-react-samples",
          "target": "atomic-react",
          "type": "static"
        },
        {
          "source": "atomic-react-samples",
          "target": "headless",
          "type": "static"
        }
      ],
      "atomic-next-samples": [
        {
          "source": "atomic-next-samples",
          "target": "atomic",
          "type": "static"
        },
        {
          "source": "atomic-next-samples",
          "target": "atomic-react",
          "type": "static"
        },
        {
          "source": "atomic-next-samples",
          "target": "headless",
          "type": "static"
        }
      ],
      "atomic-hosted-page": [
        {
          "source": "atomic-hosted-page",
          "target": "release",
          "type": "static"
        },
        {
          "source": "atomic-hosted-page",
          "target": "bueno",
          "type": "static"
        },
        {
          "source": "atomic-hosted-page",
          "target": "headless",
          "type": "static"
        }
      ],
      "atomic-angular-samples": [
        {
          "source": "atomic-angular-samples",
          "target": "atomic-angular",
          "type": "static"
        }
      ],
      "atomic-stencil-samples": [
        {
          "source": "atomic-stencil-samples",
          "target": "atomic",
          "type": "static"
        },
        {
          "source": "atomic-stencil-samples",
          "target": "headless",
          "type": "static"
        }
      ],
      "atomic-angular-builder": [
        {
          "source": "atomic-angular-builder",
          "target": "headless",
          "type": "static"
        },
        {
          "source": "atomic-angular-builder",
          "target": "atomic",
          "type": "static"
        },
        {
          "source": "atomic-angular-builder",
          "target": "release",
          "type": "dynamic"
        }
      ],
      "headless-react": [
        {
          "source": "headless-react",
          "target": "release",
          "type": "static"
        },
        {
          "source": "headless-react",
          "target": "headless",
          "type": "static"
        }
      ],
      "atomic-vuejs-samples": [
        {
          "source": "atomic-vuejs-samples",
          "target": "atomic",
          "type": "static"
        }
      ],
      "atomic-react": [
        {
          "source": "atomic-react",
          "target": "headless",
          "type": "static"
        },
        {
          "source": "atomic-react",
          "target": "release",
          "type": "static"
        },
        {
          "source": "atomic-react",
          "target": "atomic",
          "type": "static"
        }
      ],
      "iife-samples": [
        {
          "source": "iife-samples",
          "target": "atomic",
          "type": "static"
        },
        {
          "source": "iife-samples",
          "target": "atomic-hosted-page",
          "type": "static"
        },
        {
          "source": "iife-samples",
          "target": "atomic-react",
          "type": "static"
        },
        {
          "source": "iife-samples",
          "target": "headless",
          "type": "static"
        }
      ],
      "headless": [
        {
          "source": "headless",
          "target": "release",
          "type": "static"
        },
        {
          "source": "headless",
          "target": "bueno",
          "type": "static"
        }
      ],
      "quantic": [
        {
          "source": "quantic",
          "target": "release",
          "type": "static"
        },
        {
          "source": "quantic",
          "target": "bueno",
          "type": "static"
        },
        {
          "source": "quantic",
          "target": "headless",
          "type": "static"
        }
      ],
      "atomic": [
        {
          "source": "atomic",
          "target": "headless",
          "type": "static"
        },
        {
          "source": "atomic",
          "target": "release",
          "type": "static"
        },
        {
          "source": "atomic",
          "target": "bueno",
          "type": "static"
        }
      ],
      "bueno": [
        {
          "source": "bueno",
          "target": "release",
          "type": "static"
        }
      ],
      "auth": [
        {
          "source": "auth",
          "target": "release",
          "type": "static"
        }
      ],
      "release": []
    }
  }
}
