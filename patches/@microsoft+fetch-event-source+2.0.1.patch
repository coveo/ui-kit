diff --git a/node_modules/@microsoft/fetch-event-source/lib/cjs/fetch.js b/node_modules/@microsoft/fetch-event-source/lib/cjs/fetch.js
index ab40f1e..0dcb539 100644
--- a/node_modules/@microsoft/fetch-event-source/lib/cjs/fetch.js
+++ b/node_modules/@microsoft/fetch-event-source/lib/cjs/fetch.js
@@ -25,7 +25,7 @@ function fetchEventSource(input, _a) {
         }
         let curRequestController;
         function onVisibilityChange() {
-            curRequestController.abort();
+            curRequestController?.abort();
             if (!document.hidden) {
                 create();
             }
@@ -38,7 +38,7 @@ function fetchEventSource(input, _a) {
         function dispose() {
             document.removeEventListener('visibilitychange', onVisibilityChange);
             window.clearTimeout(retryTimer);
-            curRequestController.abort();
+            curRequestController?.abort();
         }
         inputSignal === null || inputSignal === void 0 ? void 0 : inputSignal.addEventListener('abort', () => {
             dispose();
@@ -48,9 +48,9 @@ function fetchEventSource(input, _a) {
         const onopen = inputOnOpen !== null && inputOnOpen !== void 0 ? inputOnOpen : defaultOnOpen;
         async function create() {
             var _a;
-            curRequestController = new AbortController();
+            curRequestController = typeof AbortController === 'undefined' ? null : new AbortController();
             try {
-                const response = await fetch(input, Object.assign(Object.assign({}, rest), { headers, signal: curRequestController.signal }));
+                const response = await fetch(input, Object.assign(Object.assign({}, rest), { headers, signal: curRequestController?.signal }));
                 await onopen(response);
                 await parse_1.getBytes(response.body, parse_1.getLines(parse_1.getMessages(id => {
                     if (id) {
@@ -67,7 +67,7 @@ function fetchEventSource(input, _a) {
                 resolve();
             }
             catch (err) {
-                if (!curRequestController.signal.aborted) {
+                if (!curRequestController?.signal.aborted) {
                     try {
                         const interval = (_a = onerror === null || onerror === void 0 ? void 0 : onerror(err)) !== null && _a !== void 0 ? _a : retryInterval;
                         window.clearTimeout(retryTimer);
diff --git a/node_modules/@microsoft/fetch-event-source/lib/esm/fetch.js b/node_modules/@microsoft/fetch-event-source/lib/esm/fetch.js
index 31eb227..6433047 100644
--- a/node_modules/@microsoft/fetch-event-source/lib/esm/fetch.js
+++ b/node_modules/@microsoft/fetch-event-source/lib/esm/fetch.js
@@ -22,7 +22,7 @@ export function fetchEventSource(input, _a) {
         }
         let curRequestController;
         function onVisibilityChange() {
-            curRequestController.abort();
+            curRequestController?.abort();
             if (!document.hidden) {
                 create();
             }
@@ -35,7 +35,7 @@ export function fetchEventSource(input, _a) {
         function dispose() {
             document.removeEventListener('visibilitychange', onVisibilityChange);
             window.clearTimeout(retryTimer);
-            curRequestController.abort();
+            curRequestController?.abort();
         }
         inputSignal === null || inputSignal === void 0 ? void 0 : inputSignal.addEventListener('abort', () => {
             dispose();
@@ -45,9 +45,9 @@ export function fetchEventSource(input, _a) {
         const onopen = inputOnOpen !== null && inputOnOpen !== void 0 ? inputOnOpen : defaultOnOpen;
         async function create() {
             var _a;
-            curRequestController = new AbortController();
+            curRequestController = typeof AbortController === 'undefined' ? null : new AbortController();
             try {
-                const response = await fetch(input, Object.assign(Object.assign({}, rest), { headers, signal: curRequestController.signal }));
+                const response = await fetch(input, Object.assign(Object.assign({}, rest), { headers, signal: curRequestController?.signal }));
                 await onopen(response);
                 await getBytes(response.body, getLines(getMessages(id => {
                     if (id) {
@@ -64,7 +64,7 @@ export function fetchEventSource(input, _a) {
                 resolve();
             }
             catch (err) {
-                if (!curRequestController.signal.aborted) {
+                if (!curRequestController?.signal.aborted) {
                     try {
                         const interval = (_a = onerror === null || onerror === void 0 ? void 0 : onerror(err)) !== null && _a !== void 0 ? _a : retryInterval;
                         window.clearTimeout(retryTimer);
