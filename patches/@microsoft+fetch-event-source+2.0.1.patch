diff --git a/node_modules/@microsoft/fetch-event-source/lib/cjs/fetch.js b/node_modules/@microsoft/fetch-event-source/lib/cjs/fetch.js
index ab40f1e..100306d 100644
--- a/node_modules/@microsoft/fetch-event-source/lib/cjs/fetch.js
+++ b/node_modules/@microsoft/fetch-event-source/lib/cjs/fetch.js
@@ -16,6 +16,9 @@ const parse_1 = require("./parse");
 exports.EventStreamContentType = 'text/event-stream';
 const DefaultRetryInterval = 1000;
 const LastEventId = 'last-event-id';
+function isBrowser() {
+    typeof window !== 'undefined'
+};
 function fetchEventSource(input, _a) {
     var { signal: inputSignal, headers: inputHeaders, onopen: inputOnOpen, onmessage, onclose, onerror, openWhenHidden, fetch: inputFetch } = _a, rest = __rest(_a, ["signal", "headers", "onopen", "onmessage", "onclose", "onerror", "openWhenHidden", "fetch"]);
     return new Promise((resolve, reject) => {
@@ -25,32 +28,32 @@ function fetchEventSource(input, _a) {
         }
         let curRequestController;
         function onVisibilityChange() {
-            curRequestController.abort();
+            curRequestController?.abort();
             if (!document.hidden) {
                 create();
             }
         }
-        if (!openWhenHidden) {
+        if (!openWhenHidden && isBrowser()) {
             document.addEventListener('visibilitychange', onVisibilityChange);
         }
         let retryInterval = DefaultRetryInterval;
         let retryTimer = 0;
         function dispose() {
-            document.removeEventListener('visibilitychange', onVisibilityChange);
-            window.clearTimeout(retryTimer);
-            curRequestController.abort();
+            isBrowser() && document.removeEventListener('visibilitychange', onVisibilityChange);
+            clearTimeout(retryTimer);
+            curRequestController?.abort();
         }
         inputSignal === null || inputSignal === void 0 ? void 0 : inputSignal.addEventListener('abort', () => {
             dispose();
             resolve();
         });
-        const fetch = inputFetch !== null && inputFetch !== void 0 ? inputFetch : window.fetch;
+        const fetch = inputFetch !== null && inputFetch !== void 0 ? inputFetch : fetch;
         const onopen = inputOnOpen !== null && inputOnOpen !== void 0 ? inputOnOpen : defaultOnOpen;
         async function create() {
             var _a;
-            curRequestController = new AbortController();
+            curRequestController = typeof AbortController === 'undefined' ? null : new AbortController();
             try {
-                const response = await fetch(input, Object.assign(Object.assign({}, rest), { headers, signal: curRequestController.signal }));
+                const response = await fetch(input, Object.assign(Object.assign({}, rest), { headers, signal: curRequestController?.signal }));
                 await onopen(response);
                 await parse_1.getBytes(response.body, parse_1.getLines(parse_1.getMessages(id => {
                     if (id) {
@@ -67,11 +70,11 @@ function fetchEventSource(input, _a) {
                 resolve();
             }
             catch (err) {
-                if (!curRequestController.signal.aborted) {
+                if (!curRequestController?.signal.aborted) {
                     try {
                         const interval = (_a = onerror === null || onerror === void 0 ? void 0 : onerror(err)) !== null && _a !== void 0 ? _a : retryInterval;
-                        window.clearTimeout(retryTimer);
-                        retryTimer = window.setTimeout(create, interval);
+                        clearTimeout(retryTimer);
+                        retryTimer = setTimeout(create, interval);
                     }
                     catch (innerErr) {
                         dispose();
diff --git a/node_modules/@microsoft/fetch-event-source/lib/esm/fetch.js b/node_modules/@microsoft/fetch-event-source/lib/esm/fetch.js
index 31eb227..50c776c 100644
--- a/node_modules/@microsoft/fetch-event-source/lib/esm/fetch.js
+++ b/node_modules/@microsoft/fetch-event-source/lib/esm/fetch.js
@@ -13,6 +13,9 @@ import { getBytes, getLines, getMessages } from './parse';
 export const EventStreamContentType = 'text/event-stream';
 const DefaultRetryInterval = 1000;
 const LastEventId = 'last-event-id';
+function isBrowser() {
+    typeof window !== 'undefined'
+};
 export function fetchEventSource(input, _a) {
     var { signal: inputSignal, headers: inputHeaders, onopen: inputOnOpen, onmessage, onclose, onerror, openWhenHidden, fetch: inputFetch } = _a, rest = __rest(_a, ["signal", "headers", "onopen", "onmessage", "onclose", "onerror", "openWhenHidden", "fetch"]);
     return new Promise((resolve, reject) => {
@@ -22,32 +25,32 @@ export function fetchEventSource(input, _a) {
         }
         let curRequestController;
         function onVisibilityChange() {
-            curRequestController.abort();
+            curRequestController?.abort();
             if (!document.hidden) {
                 create();
             }
         }
-        if (!openWhenHidden) {
+        if (!openWhenHidden && isBrowser()) {
             document.addEventListener('visibilitychange', onVisibilityChange);
         }
         let retryInterval = DefaultRetryInterval;
         let retryTimer = 0;
         function dispose() {
-            document.removeEventListener('visibilitychange', onVisibilityChange);
-            window.clearTimeout(retryTimer);
-            curRequestController.abort();
+            isBrowser() && document.removeEventListener('visibilitychange', onVisibilityChange);
+            clearTimeout(retryTimer);
+            curRequestController?.abort();
         }
         inputSignal === null || inputSignal === void 0 ? void 0 : inputSignal.addEventListener('abort', () => {
             dispose();
             resolve();
         });
-        const fetch = inputFetch !== null && inputFetch !== void 0 ? inputFetch : window.fetch;
+        const fetch = inputFetch !== null && inputFetch !== void 0 ? inputFetch : fetch;
         const onopen = inputOnOpen !== null && inputOnOpen !== void 0 ? inputOnOpen : defaultOnOpen;
         async function create() {
             var _a;
-            curRequestController = new AbortController();
+            curRequestController = typeof AbortController === 'undefined' ? null : new AbortController();
             try {
-                const response = await fetch(input, Object.assign(Object.assign({}, rest), { headers, signal: curRequestController.signal }));
+                const response = await fetch(input, Object.assign(Object.assign({}, rest), { headers, signal: curRequestController?.signal }));
                 await onopen(response);
                 await getBytes(response.body, getLines(getMessages(id => {
                     if (id) {
@@ -64,11 +67,11 @@ export function fetchEventSource(input, _a) {
                 resolve();
             }
             catch (err) {
-                if (!curRequestController.signal.aborted) {
+                if (!curRequestController?.signal.aborted) {
                     try {
                         const interval = (_a = onerror === null || onerror === void 0 ? void 0 : onerror(err)) !== null && _a !== void 0 ? _a : retryInterval;
-                        window.clearTimeout(retryTimer);
-                        retryTimer = window.setTimeout(create, interval);
+                        clearTimeout(retryTimer);
+                        retryTimer = setTimeout(create, interval);
                     }
                     catch (innerErr) {
                         dispose();
