diff --git a/node_modules/@stencil/angular-output-target/dist/generate-angular-component.js b/node_modules/@stencil/angular-output-target/dist/generate-angular-component.js
index 16b41a9..a88f7b8 100644
--- a/node_modules/@stencil/angular-output-target/dist/generate-angular-component.js
+++ b/node_modules/@stencil/angular-output-target/dist/generate-angular-component.js
@@ -134,7 +134,7 @@ export const createComponentTypeDefinition = (outputType, tagNameAsPascal, event
     const eventTypes = publicEvents.map((event) => {
         const comment = createDocComment(event.docs);
         let eventName = event.name;
-        if (event.name.includes('-')) {
+        if (/[\W_]/g.test(event.name)) {
             // If an event name includes a dash, we need to wrap it in quotes.
             // https://github.com/ionic-team/stencil-ds-output-targets/issues/212
             eventName = `'${event.name}'`;
diff --git a/node_modules/@stencil/angular-output-target/dist/index.cjs.js b/node_modules/@stencil/angular-output-target/dist/index.cjs.js
index a409a9e..291fa5d 100644
--- a/node_modules/@stencil/angular-output-target/dist/index.cjs.js
+++ b/node_modules/@stencil/angular-output-target/dist/index.cjs.js
@@ -279,7 +279,7 @@ const createComponentTypeDefinition = (outputType, tagNameAsPascal, events, comp
     const eventTypes = publicEvents.map((event) => {
         const comment = createDocComment(event.docs);
         let eventName = event.name;
-        if (event.name.includes('-')) {
+        if (/[\W_]/g.test(event.name)) {
             // If an event name includes a dash, we need to wrap it in quotes.
             // https://github.com/ionic-team/stencil-ds-output-targets/issues/212
             eventName = `'${event.name}'`;
diff --git a/node_modules/@stencil/angular-output-target/dist/index.js b/node_modules/@stencil/angular-output-target/dist/index.js
index 66792ef..3ca0509 100644
--- a/node_modules/@stencil/angular-output-target/dist/index.js
+++ b/node_modules/@stencil/angular-output-target/dist/index.js
@@ -271,7 +271,7 @@ const createComponentTypeDefinition = (outputType, tagNameAsPascal, events, comp
     const eventTypes = publicEvents.map((event) => {
         const comment = createDocComment(event.docs);
         let eventName = event.name;
-        if (event.name.includes('-')) {
+        if (/[\W_]/g.test(event.name)) {
             // If an event name includes a dash, we need to wrap it in quotes.
             // https://github.com/ionic-team/stencil-ds-output-targets/issues/212
             eventName = `'${event.name}'`;
diff --git a/node_modules/@stencil/angular-output-target/angular-component-lib/utils.ts b/node_modules/@stencil/angular-output-target/angular-component-lib/utils.ts
index 1fd8c4a..2c8a5b1 100644
--- a/node_modules/@stencil/angular-output-target/angular-component-lib/utils.ts
+++ b/node_modules/@stencil/angular-output-target/angular-component-lib/utils.ts
@@ -1,6 +1,34 @@
 /* eslint-disable */
 /* tslint:disable */
 import { fromEvent } from 'rxjs';
+import customElementsManifest from '@coveo/atomic/custom-elements-manifest';
+
+
+const createPropertyToAttributeMap = (): Map<string, string> => {
+  const map = new Map<string, string>();
+  
+  customElementsManifest.modules.forEach((module: any) => {
+    module.declarations?.forEach((declaration: any) => {
+      if (declaration.kind === 'class' && declaration.attributes) {
+        declaration.attributes.forEach((attr: any) => {
+          if (attr.fieldName && attr.name) {
+            map.set(attr.fieldName, attr.name);
+          }
+        });
+      }
+    });
+  });
+  
+  return map;
+};
+
+const propertyToAttributeMap = createPropertyToAttributeMap();
+
+const getAttributeName = (propertyName: string): string => {
+  const mappedAttr = propertyToAttributeMap.get(propertyName);
+  return mappedAttr || propertyName.replace(/([A-Z])/g, '-$1').toLowerCase();
+};
 
 export const proxyInputs = (Cmp: any, inputs: string[]) => {
   const Prototype = Cmp.prototype;
@@ -11,7 +39,9 @@ export const proxyInputs = (Cmp: any, inputs: string[]) => {
       },
       set(val: any) {
-        this.z.runOutsideAngular(() => (this.el[item] = val));
+        this.z.runOutsideAngular(() => {
+            const attrName = getAttributeName(item);
+            this.el.setAttribute(attrName, val);
+        });
       },
       /**
        * In the event that proxyInputs is called
